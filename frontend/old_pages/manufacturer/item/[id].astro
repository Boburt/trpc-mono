---
import { trpcClient } from "@frontend/src/utils/trpc-server";
import { Image } from "astro:assets";
import BaseLayout from "@frontend/src/layouts/BaseLayout.astro";
import CardComponent from "../../../components/manufacturers/CardComponent";
import clsx from "clsx";

const { id } = Astro.params;
let manufacturer = null;
try {
  manufacturer = await trpcClient.manufacturers.publicOne.query({
    where: {
      id: {
        equals: id,
      },
    },
    include: {
      cities: true,
      manufacturers_categories: {
        include: {
          manufacturers_categories_categories: true,
        },
      },
    },
    imageSizes: [
      {
        image_code: "logo",
        size_code: "300_300",
      },
    ],
  });
} catch (error) {
  return Astro.redirect("/404");
}
export const prerender = false;

if (!manufacturer) return Astro.redirect("/404");

const logoImage = manufacturer.images?.find((image) => image.code === "logo");
const categories = manufacturer.manufacturers_categories
  .map((item) => item.manufacturers_categories_categories.name.toLowerCase())
  .join(", ");

const reviewsCount = await trpcClient.manufacturers.getReviewsCount.query({
  id,
});
const ratingsPercentage =
  await trpcClient.manufacturers.getRatingsPercentage.query({
    id,
  });

const totalStars = Array.from({ length: 5 * 2 }, (_, index) => index + 1);
const selectedStars = Math.round(manufacturer.rating * 2);
---

<BaseLayout title={manufacturer.name}>
  <div itemscope itemtype="https://schema.org/Organization">
    <div class="card bg-base-100 shadow-xl">
      <div class="card-body">
        <div class="card-header space-x-4 flex items-start">
          <figure>
            <Image
              src={logoImage?.path
                ? `${import.meta.env.PUBLIC_TRPC_API_URL}${logoImage.path}`
                : "/images/no-photo.webp"}
              alt={manufacturer.name || manufacturer.short_name}
              width={300}
              height={300}
              itemprop="logo"
              class="rounded-xl"
              transition:name={`manufacture-logo:${manufacturer.id}`}
            />
          </figure>
          <div>
            <h1
              class="font-bold text-2xl uppercase"
              itemprop="name"
              transition:name={`manufacture-name:${manufacturer.id}`}
            >
              {manufacturer.short_name}
            </h1>
            <span>{manufacturer.name}</span>
            <div class="mt-2 flex space-x-2">
              {
                manufacturer.city_id && (
                  <>
                    <span>{manufacturer.cities?.name}</span>
                    <div class="divider divider-horizontal" />
                  </>
                )
              }
              {
                manufacturer.manufacturers_categories &&
                  manufacturer.manufacturers_categories.length > 0 && (
                    <>
                      <span>Категории: {categories}</span>
                      <div class="divider divider-horizontal" />
                    </>
                  )
              }
            </div>
            <div class="mt-4">
              <div class="rating rating-lg rating-half">
                {
                  totalStars.map((star, index) => (
                    <div
                      class={clsx([
                        "bg-yellow-500 w-3 h-5 mask mask-star-2",
                        {
                          "opacity-20": index >= selectedStars,
                          "mask-half-1": index % 2 === 0,
                          "mask-half-2": index % 2 !== 0,
                        },
                      ])}
                    />
                  ))
                }
                <p
                  class="ml-2 text-sm font-medium text-gray-900 dark:text-white"
                >
                  {manufacturer.rating.toFixed(1)} out of 5
                </p>
              </div>
              {
                reviewsCount > 0 && (
                  <p class="text-sm font-medium text-gray-500 dark:text-gray-400">
                    {reviewsCount} reviews
                  </p>
                )
              }
              {
                ratingsPercentage.map((rating) => (
                  <div class="flex items-center mt-4">
                    <span class="text-sm font-medium text-blue-600 dark:text-blue-500 hover:underline">
                      {rating.rating}
                    </span>
                    <div class="w-2/4 h-5 mx-4 bg-gray-200 rounded dark:bg-gray-700">
                      <div
                        class="h-5 bg-yellow-300 rounded"
                        style={{ width: `${rating.percent}%` }}
                      />
                    </div>
                    <span class="text-sm font-medium text-gray-500 dark:text-gray-400">
                      {rating.percent}%
                    </span>
                  </div>
                ))
              }
            </div>
          </div>
        </div>
      </div>
    </div>
    <CardComponent
      client:visible
      manufacturer={manufacturer}
      reviewsCount={reviewsCount}
    />
  </div>
</BaseLayout>
