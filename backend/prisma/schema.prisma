// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider       = "npx zod-prisma-types"
  output = "../src/lib/zod"
  useMultipleFiles = false
  writeBarrelFiles = true
  createInputTypes = true
  createModelTypes = true
  // createOptionalDefaultValuesTypes = true
  writeNullishInModelTypes = true
  addIncludeType = false
}

model permissions {
  id                                  String              @id(map: "PK_920331560282b8bd21bb02290df") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                                String              @unique(map: "UQ_d090ad82a0e97ce764c06c7b312") @db.VarChar(160)
  description                         String              @db.VarChar(60)
  active                              Boolean             @default(true)
  created_at                          DateTime            @default(now()) @db.Timestamptz(5)
  updated_at                          DateTime            @default(now()) @db.Timestamptz(5)
  created_by                          String?             @db.Uuid
  updated_by                          String?             @db.Uuid
  users_permissions_created_byTousers users?              @relation("permissions_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_c398f7100db3e0d9b6a6cd6beaf")
  users_permissions_updated_byTousers users?              @relation("permissions_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_58fae278276b7c2c6dde2bc19a5")
  roles_permissions                   roles_permissions[]
  users_permissions                   users_permissions[]
}

model roles {
  id                            String              @id(map: "PK_c1433d71a4838793a49dcad46ab") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String              @unique(map: "UQ_648e3f5447f725579d7d4ffdfb7") @db.VarChar(50)
  code                          String?             @unique(map: "UQ_0e2c0e1b4b0b0b0b0b0b0b0b0b0") @db.VarChar(50)
  active                        Boolean             @default(true)
  created_at                    DateTime            @default(now()) @db.Timestamptz(5)
  updated_at                    DateTime            @default(now()) @db.Timestamptz(5)
  created_by                    String?             @db.Uuid
  updated_by                    String?             @db.Uuid
  users_roles_created_byTousers users?              @relation("roles_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_4a39f3095781cdd9d6061afaae5")
  users_roles_updated_byTousers users?              @relation("roles_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_747b580d73db0ad78963d78b076")
  roles_permissions             roles_permissions[]
  users_roles                   users_roles[]
}

model roles_permissions {
  role_id                                   String      @db.Uuid
  permission_id                             String      @db.Uuid
  created_by                                String?     @db.Uuid
  updated_by                                String?     @db.Uuid
  users_roles_permissions_created_byTousers users?      @relation("roles_permissions_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_a3f5b9874c55ee69fdd01531e14")
  permissions                               permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, map: "FK_337aa8dba227a1fe6b73998307b")
  roles                                     roles       @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "FK_7d2dad9f14eddeb09c256fea719")
  users_roles_permissions_updated_byTousers users?      @relation("roles_permissions_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_d1ba552f47d08621fdd2bbb0124")

  @@id([role_id, permission_id], map: "PK_0cd11f0b35c4d348c6ebb9b36b7")
}

model users {
  id                                                    String                           @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phone                                                 String                           @unique(map: "UQ_a000cca60bcf04454e727699490") @db.VarChar(20)
  first_name                                            String?                          @db.VarChar(100)
  last_name                                             String?                          @db.VarChar(100)
  password                                              String?                          @db.VarChar
  is_super_user                                         Boolean                          @default(false)
  status                                                user_status
  card_name                                             String?                          @db.VarChar(100)
  card_number                                           String?                          @db.VarChar(100)
  birth_date                                            DateTime?                        @db.Timestamptz(5)
  car_model                                             String?                          @db.VarChar(100)
  car_number                                            String?                          @db.VarChar(100)
  is_online                                             Boolean                          @default(false)
  latitude                                              Float?                           @default(0)
  longitude                                             Float?                           @default(0)
  fcm_token                                             String?                          @db.VarChar(250)
  wallet_balance                                        Float                            @default(0)
  max_active_order_count                                Int?
  doc_files                                             String[]
  order_start_date                                      DateTime?                        @db.Timestamptz(5)
  app_version                                           String?                          @db.VarChar(100)
  created_at                                            DateTime                         @default(now()) @db.Timestamptz(5)
  updated_at                                            DateTime                         @default(now()) @db.Timestamptz(5)
  api_token                                             String?                          @db.VarChar(250)
  tg_id                                                 String?                          @db.VarChar(250)
  permissions_permissions_created_byTousers             permissions[]                    @relation("permissions_created_byTousers")
  permissions_permissions_updated_byTousers             permissions[]                    @relation("permissions_updated_byTousers")
  roles_roles_created_byTousers                         roles[]                          @relation("roles_created_byTousers")
  roles_roles_updated_byTousers                         roles[]                          @relation("roles_updated_byTousers")
  roles_permissions_roles_permissions_created_byTousers roles_permissions[]              @relation("roles_permissions_created_byTousers")
  roles_permissions_roles_permissions_updated_byTousers roles_permissions[]              @relation("roles_permissions_updated_byTousers")
  users_permissions_usersTousers_permissions_created_by users_permissions[]              @relation("usersTousers_permissions_created_by")
  users_permissions_usersTousers_permissions_updated_by users_permissions[]              @relation("usersTousers_permissions_updated_by")
  users_permissions_usersTousers_permissions_user_id    users_permissions[]              @relation("usersTousers_permissions_user_id")
  users_roles_usersTousers_roles_created_by             users_roles[]                    @relation("usersTousers_roles_created_by")
  users_roles_usersTousers_roles_updated_by             users_roles[]                    @relation("usersTousers_roles_updated_by")
  users_roles_usersTousers_roles_user_id                users_roles[]                    @relation("usersTousers_roles_user_id")
  organization_created_byTousers                        organization[]                   @relation("organization_created_byTousers")
  organization_updated_byTousers                        organization[]                   @relation("organization_updated_byTousers")
  work_schedules_created_byTousers                      work_schedules[]                 @relation("work_schedules_created_byTousers")
  work_schedules_updated_byTousers                      work_schedules[]                 @relation("work_schedules_updated_byTousers")
  users_terminals                                       users_terminals[]
  users_work_schedules                                  users_work_schedules[]
  work_schedule_entries_created_byTousers               work_schedule_entries[]          @relation("work_schedule_entries_created_byTousers")
  work_schedule_entries_updated_byTousers               work_schedule_entries[]          @relation("work_schedule_entries_updated_byTousers")
  work_schedule_entries_users                           work_schedule_entries[]          @relation("work_schedule_entries_users")
  api_tokens_created_byTousers                          api_tokens[]                     @relation("api_tokens_created_byTousers")
  api_tokens_updated_byTousers                          api_tokens[]                     @relation("api_tokens_updated_byTousers")
  timesheet_users                                       timesheet[]
  scheduled_reports_subscription_users                  scheduled_reports_subscription[]
}

model users_permissions {
  user_id                                   String      @db.Uuid
  permission_id                             String      @db.Uuid
  created_by                                String?     @db.Uuid
  updated_by                                String?     @db.Uuid
  users_usersTousers_permissions_created_by users?      @relation("usersTousers_permissions_created_by", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_1139f007de51cfe686c4b2abb43")
  permissions                               permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, map: "FK_b09b9a210c60f41ec7b453758e9")
  users_usersTousers_permissions_updated_by users?      @relation("usersTousers_permissions_updated_by", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_997b44464224900ee2727190813")
  users_usersTousers_permissions_user_id    users       @relation("usersTousers_permissions_user_id", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_4de7d0b175f702be3be55270023")

  @@id([user_id, permission_id], map: "PK_7f3736984cd8546a1e418005561")
}

model users_roles {
  user_id                             String  @db.Uuid
  role_id                             String  @db.Uuid
  created_by                          String? @db.Uuid
  updated_by                          String? @db.Uuid
  users_usersTousers_roles_created_by users?  @relation("usersTousers_roles_created_by", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_471c7c874c2a37052f53d920803")
  roles                               roles   @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "FK_1cf664021f00b9cc1ff95e17de4")
  users_usersTousers_roles_updated_by users?  @relation("usersTousers_roles_updated_by", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_88da3fa85d1220b0ac18b08ce47")
  users_usersTousers_roles_user_id    users   @relation("usersTousers_roles_user_id", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_e4435209df12bc1f001e5360174")

  @@id([user_id, role_id], map: "PK_c525e9373d63035b9919e578a9c")
}


enum user_status {
  active
  blocked
  inactive
}

model work_schedules {
  id                               String       @id(map: "PK_work_schedules_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                             String
  active                           Boolean      @default(true)
  organization_id                  String       @db.Uuid
  organization                     organization @relation("work_schedules_organization_idTorganization", fields: [organization_id], references: [id], onDelete: NoAction, map: "FK_work_schedules_organization_id")
  days                             String[]
  start_time                       DateTime     @db.Timetz(5)
  end_time                         DateTime     @db.Timetz(5)
  max_start_time                   DateTime     @db.Timetz(5)
  bonus_price                      Int          @default(0)
  created_at                       DateTime     @default(now()) @db.Timestamptz(5)
  updated_at                       DateTime     @default(now()) @db.Timestamptz(5)
  created_by                       String?      @db.Uuid
  updated_by                       String?      @db.Uuid
  work_schedules_created_byTousers users?       @relation("work_schedules_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_work_schedules_created_by")
  work_schedules_updated_byTousers users?       @relation("work_schedules_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_work_schedules_updated_by")

  users_work_schedules                 users_work_schedules[]
  work_schedule_entries_work_schedules work_schedule_entries[] @relation("work_schedule_entries_work_schedules")
}

model terminals {
  id              String       @id(map: "PK_terminals_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  active          Boolean      @default(true)
  phone           String?
  address         String?
  latitude        Float        @default(0)
  longitude       Float        @default(0)
  external_id     String       @unique
  organization_id String       @db.Uuid
  manager_name    String?
  organization    organization @relation("terminals_organization_idTorganization", fields: [organization_id], references: [id], onDelete: NoAction, map: "FK_terminals_organization_id")

  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)

  users_terminals                       users_terminals[]
}

model organization {
  id                       String                     @id(map: "PK_organization_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String
  external_id              String?
  active                   Boolean                    @default(true)
  system_type              organization_system_type   @default(iiko)
  phone                    String
  iiko_login               String?
  webhook                  String?
  group_id                 String?
  apelsin_login            String?
  apelsin_password         String?
  sender_name              String?
  sender_number            String?
  description              String?
  max_distance             Int                        @default(0)
  max_active_order_count   Int                        @default(0)
  max_order_close_distance Int                        @default(0)
  payment_type             organization_payment_types @default(client)
  support_chat_url         String?
  icon_url                 String?
  allow_yandex_delivery    Boolean                    @default(false)
  created_at               DateTime                   @default(now()) @db.Timestamptz(5)
  updated_at               DateTime                   @default(now()) @db.Timestamptz(5)
  created_by               String?                    @db.Uuid
  updated_by               String?                    @db.Uuid

  work_schedules_organization_idTorganization   work_schedules[]           @relation("work_schedules_organization_idTorganization")
  organization_created_byTousers                users?                     @relation("organization_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_organization_created_by")
  organization_updated_byTousers                users?                     @relation("organization_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_organization_updated_by")
  terminals_organization_idTorganization        terminals[]                @relation("terminals_organization_idTorganization")
  api_tokens_organization                       api_tokens[]
}

model users_terminals {
  user_id     String    @db.Uuid
  terminal_id String    @db.Uuid
  users       users     @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "FK_users_terminals_user_id")
  terminals   terminals @relation(fields: [terminal_id], references: [id], onDelete: NoAction, map: "FK_users_terminals_terminal_id")

  @@id([user_id, terminal_id], map: "PK_users_terminals_id")
}

model users_work_schedules {
  user_id          String         @db.Uuid
  work_schedule_id String         @db.Uuid
  users            users          @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "FK_users_work_schedules_user_id")
  work_schedules   work_schedules @relation(fields: [work_schedule_id], references: [id], onDelete: NoAction, map: "FK_users_work_schedules_work_schedule_id")

  @@id([user_id, work_schedule_id], map: "PK_users_work_schedules_id")
}

model work_schedule_entries {
  id               String                     @id(map: "PK_work_schedule_entries_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String                     @db.Uuid
  work_schedule_id String                     @db.Uuid
  date_start       DateTime                   @db.Timestamptz(5)
  date_finish      DateTime?                  @db.Timestamptz(5)
  duration         Int                        @default(0)
  ip_open          String?
  ip_close         String?
  lat_open         Float                      @default(0)
  lat_close        Float?                     @default(0)
  lon_open         Float                      @default(0)
  lon_close        Float?                     @default(0)
  current_status   work_schedule_entry_status @default(open)
  late             Boolean                    @default(false)

  created_at DateTime @default(now()) @db.Timestamp(5)
  updated_at DateTime @default(now()) @db.Timestamp(5)
  created_by String?  @db.Uuid
  updated_by String?  @db.Uuid

  work_schedule_entries_created_byTousers users? @relation("work_schedule_entries_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_work_schedule_entries_created_by")
  work_schedule_entries_updated_byTousers users? @relation("work_schedule_entries_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_work_schedule_entries_updated_by")

  work_schedule_entries_users users @relation("work_schedule_entries_users", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_work_schedule_entries_user_id")

  work_schedule_entries_work_schedules work_schedules @relation("work_schedule_entries_work_schedules", fields: [work_schedule_id], references: [id], onDelete: NoAction, map: "FK_work_schedule_entries_work_schedule_id")

  @@index([current_status], map: "fki_work_schedule_entries_current_status")
  @@index([user_id], map: "fki_work_schedule_entries_user_id")
}

model api_tokens {
  id              String   @id(map: "PK_api_tokens_id") @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active          Boolean  @default(false)
  token           String   @unique
  organization_id String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamptz(5)
  updated_at      DateTime @default(now()) @db.Timestamptz(5)
  created_by      String?  @db.Uuid
  updated_by      String?  @db.Uuid

  api_tokens_created_byTousers users? @relation("api_tokens_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_api_tokens_created_by")
  api_tokens_updated_byTousers users? @relation("api_tokens_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_api_tokens_updated_by")

  api_tokens_organization organization @relation(fields: [organization_id], references: [id], onDelete: NoAction, map: "FK_api_tokens_organization_id")
}

model brands {
  id         String   @id(map: "PK_brands_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  api_url    String
  logo_path  String?
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)
}

model timesheet {
  id         String   @id(map: "PK_timesheet_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  is_late    Boolean  @default(false)
  date       DateTime @db.Timestamptz(5)
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)

  timesheet_users users @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "FK_timesheet_user_id")
}

model scheduled_reports {
  id         String   @id(map: "PK_scheduled_reports_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  code       String
  cron       String
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)

  scheduled_reports_scheduled_reports_subscriptions scheduled_reports_subscription[]
}

model scheduled_reports_subscription {
  id         String   @id(map: "PK_scheduled_reports_subscription_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  report_id  String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)

  scheduled_reports_subscription_reports scheduled_reports @relation(fields: [report_id], references: [id], onDelete: NoAction, map: "FK_scheduled_reports_subscription_report_id")
  scheduled_reports_subscription_users   users             @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "FK_scheduled_reports_subscription_user_id")
}

enum organization_system_type {
  iiko
  r_keeper
  jowi
}

enum work_schedule_entry_status {
  open
  closed
}


enum organization_payment_types {
  cash
  card
  client
}
