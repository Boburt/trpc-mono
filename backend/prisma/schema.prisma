// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                        = "npx zod-prisma-types"
  output                          = "../src/lib/zod"
  useMultipleFiles                = false
  writeBarrelFiles                = true
  createInputTypes                = true
  createModelTypes                = true
  writeNullishInModelTypes        = true
  addIncludeType                  = true
  createRelationValuesTypes       = true
  createOptionalDefaultValuesType = true
  addInputTypeValidation          = false
}

model Permissions {
  id                                  String              @id(map: "PK_920331560282b8bd21bb02290df") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                                String              @unique(map: "UQ_d090ad82a0e97ce764c06c7b312") @db.VarChar(160)
  description                         String              @db.VarChar(60)
  active                              Boolean             @default(true)
  created_at                          DateTime            @default(now()) @db.Timestamptz(5)
  updated_at                          DateTime            @default(now()) @db.Timestamptz(5)
  created_by                          String?             @db.Uuid
  updated_by                          String?             @db.Uuid
  users_permissions_created_byTousers Users?              @relation("permissions_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_c398f7100db3e0d9b6a6cd6beaf")
  users_permissions_updated_byTousers Users?              @relation("permissions_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_58fae278276b7c2c6dde2bc19a5")
  roles_permissions                   Roles_permissions[]
  users_permissions                   Users_permissions[]

  @@map("permissions")
}

model Roles {
  id                            String              @id(map: "PK_c1433d71a4838793a49dcad46ab") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                          String              @unique(map: "UQ_648e3f5447f725579d7d4ffdfb7") @db.VarChar(50)
  code                          String?             @unique(map: "UQ_0e2c0e1b4b0b0b0b0b0b0b0b0b0") @db.VarChar(50)
  active                        Boolean             @default(true)
  created_at                    DateTime            @default(now()) @db.Timestamptz(5)
  updated_at                    DateTime            @default(now()) @db.Timestamptz(5)
  created_by                    String?             @db.Uuid
  updated_by                    String?             @db.Uuid
  users_roles_created_byTousers Users?              @relation("roles_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_4a39f3095781cdd9d6061afaae5")
  users_roles_updated_byTousers Users?              @relation("roles_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_747b580d73db0ad78963d78b076")
  roles_permissions             Roles_permissions[]
  users_roles                   Users_roles[]

  @@map("roles")
}

model Roles_permissions {
  role_id                                   String      @db.Uuid
  permission_id                             String      @db.Uuid
  created_by                                String?     @db.Uuid
  updated_by                                String?     @db.Uuid
  users_roles_permissions_created_byTousers Users?      @relation("roles_permissions_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_a3f5b9874c55ee69fdd01531e14")
  permissions                               Permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, map: "FK_337aa8dba227a1fe6b73998307b")
  roles                                     Roles       @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "FK_7d2dad9f14eddeb09c256fea719")
  users_roles_permissions_updated_byTousers Users?      @relation("roles_permissions_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_d1ba552f47d08621fdd2bbb0124")

  @@id([role_id, permission_id], map: "PK_0cd11f0b35c4d348c6ebb9b36b7")
  @@map("roles_permissions")
}

model Users {
  id                                                    String                           @id @default(uuid()) @db.Uuid
  phone                                                 String?                          @unique(map: "UQ_a000cca60bcf04454e727699490") @db.VarChar(20)
  email                                                 String?                          @unique(map: "UQ_0e2c0e1b4b5b0b0b0b0b0b0b0b0") @db.VarChar(100)
  login                                                 String                           @unique(map: "UQ_0e2c0e1b3b0b0b0b0b0b0b0b0b0") @db.VarChar(100)
  first_name                                            String?                          @db.VarChar(100)
  last_name                                             String?                          @db.VarChar(100)
  password                                              String                           @db.VarChar
  salt                                                  String?                          @db.VarChar
  is_super_user                                         Boolean                          @default(false)
  status                                                user_status
  card_name                                             String?                          @db.VarChar(100)
  card_number                                           String?                          @db.VarChar(100)
  birth_date                                            DateTime?                        @db.Timestamptz(5)
  car_model                                             String?                          @db.VarChar(100)
  car_number                                            String?                          @db.VarChar(100)
  is_online                                             Boolean                          @default(false)
  latitude                                              Float?                           @default(0)
  longitude                                             Float?                           @default(0)
  fcm_token                                             String?                          @db.VarChar(250)
  wallet_balance                                        Float                            @default(0)
  max_active_order_count                                Int?
  doc_files                                             String[]
  order_start_date                                      DateTime?                        @db.Timestamptz(5)
  app_version                                           String?                          @db.VarChar(100)
  created_at                                            DateTime                         @default(now()) @db.Timestamptz(5)
  updated_at                                            DateTime                         @default(now()) @db.Timestamptz(5)
  api_token                                             String?                          @db.VarChar(250)
  tg_id                                                 String?                          @db.VarChar(250)
  permissions_permissions_created_byTousers             Permissions[]                    @relation("permissions_created_byTousers")
  permissions_permissions_updated_byTousers             Permissions[]                    @relation("permissions_updated_byTousers")
  roles_roles_created_byTousers                         Roles[]                          @relation("roles_created_byTousers")
  roles_roles_updated_byTousers                         Roles[]                          @relation("roles_updated_byTousers")
  roles_permissions_roles_permissions_created_byTousers Roles_permissions[]              @relation("roles_permissions_created_byTousers")
  roles_permissions_roles_permissions_updated_byTousers Roles_permissions[]              @relation("roles_permissions_updated_byTousers")
  users_permissions_usersTousers_permissions_created_by Users_permissions[]              @relation("usersTousers_permissions_created_by")
  users_permissions_usersTousers_permissions_updated_by Users_permissions[]              @relation("usersTousers_permissions_updated_by")
  users_permissions_usersTousers_permissions_user_id    Users_permissions[]              @relation("usersTousers_permissions_user_id")
  users_roles_usersTousers_roles_created_by             Users_roles[]                    @relation("usersTousers_roles_created_by")
  users_roles_usersTousers_roles_updated_by             Users_roles[]                    @relation("usersTousers_roles_updated_by")
  users_roles_usersTousers_roles_user_id                Users_roles[]                    @relation("usersTousers_roles_user_id")
  api_tokens_created_byTousers                          Api_tokens[]                     @relation("api_tokens_created_byTousers")
  api_tokens_updated_byTousers                          Api_tokens[]                     @relation("api_tokens_updated_byTousers")
  scheduled_reports_subscription_users                  Scheduled_reports_subscription[]
  sessions                                              Sessions[]                       @relation("sessions_users")
  assets_created_byTousers                              Assets[]                         @relation("assets_created_byTousers")
  assets_updated_byTousers                              Assets[]                         @relation("assets_updated_byTousers")

  @@index([login], map: "fki_users_login")
  @@map("users")
}

model Sessions {
  id             String   @id @default(uuid()) @db.Uuid
  user_id        String   @db.Uuid
  user_agent     String
  device_name    String
  created_at     DateTime @default(now()) @db.Timestamptz(5)
  updated_at     DateTime @default(now()) @db.Timestamptz(5)
  users_sessions Users    @relation("sessions_users", fields: [user_id], references: [id])

  @@map("sessions")
}

model Users_permissions {
  user_id                                   String      @db.Uuid
  permission_id                             String      @db.Uuid
  created_by                                String?     @db.Uuid
  updated_by                                String?     @db.Uuid
  users_usersTousers_permissions_created_by Users?      @relation("usersTousers_permissions_created_by", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_1139f007de51cfe686c4b2abb43")
  permissions                               Permissions @relation(fields: [permission_id], references: [id], onDelete: NoAction, map: "FK_b09b9a210c60f41ec7b453758e9")
  users_usersTousers_permissions_updated_by Users?      @relation("usersTousers_permissions_updated_by", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_997b44464224900ee2727190813")
  users_usersTousers_permissions_user_id    Users       @relation("usersTousers_permissions_user_id", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_4de7d0b175f702be3be55270023")

  @@id([user_id, permission_id], map: "PK_7f3736984cd8546a1e418005561")
  @@map("users_permissions")
}

model Users_roles {
  user_id                             String  @db.Uuid
  role_id                             String  @db.Uuid
  created_by                          String? @db.Uuid
  updated_by                          String? @db.Uuid
  users_usersTousers_roles_created_by Users?  @relation("usersTousers_roles_created_by", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_471c7c874c2a37052f53d920803")
  roles                               Roles   @relation(fields: [role_id], references: [id], onDelete: NoAction, map: "FK_1cf664021f00b9cc1ff95e17de4")
  users_usersTousers_roles_updated_by Users?  @relation("usersTousers_roles_updated_by", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_88da3fa85d1220b0ac18b08ce47")
  users_usersTousers_roles_user_id    Users   @relation("usersTousers_roles_user_id", fields: [user_id], references: [id], onDelete: NoAction, map: "FK_e4435209df12bc1f001e5360174")

  @@id([user_id, role_id], map: "PK_c525e9373d63035b9919e578a9c")
  @@map("users_roles")
}

enum user_status {
  active
  blocked
  inactive
}

model Api_tokens {
  id         String   @id(map: "PK_api_tokens_id") @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active     Boolean  @default(false)
  token      String   @unique
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)
  created_by String?  @db.Uuid
  updated_by String?  @db.Uuid

  api_tokens_created_byTousers Users? @relation("api_tokens_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_api_tokens_created_by")
  api_tokens_updated_byTousers Users? @relation("api_tokens_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_api_tokens_updated_by")

  @@map("api_tokens")
}

model Scheduled_reports {
  id         String   @id(map: "PK_scheduled_reports_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  code       String
  cron       String
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)

  scheduled_reports_scheduled_reports_subscriptions Scheduled_reports_subscription[]

  @@map("scheduled_reports")
}

model Scheduled_reports_subscription {
  id         String   @id(map: "PK_scheduled_reports_subscription_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  report_id  String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)

  scheduled_reports_subscription_reports Scheduled_reports @relation(fields: [report_id], references: [id], onDelete: NoAction, map: "FK_scheduled_reports_subscription_report_id")
  scheduled_reports_subscription_users   Users             @relation(fields: [user_id], references: [id], onDelete: NoAction, map: "FK_scheduled_reports_subscription_user_id")

  @@map("scheduled_reports_subscription")
}

model Langs {
  id         String   @id(map: "PK_langs_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code       String   @unique
  name       String
  is_default Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(5)
  updated_at DateTime @default(now()) @db.Timestamptz(5)

  @@map("langs")
}

model Categories {
  id               String   @id(map: "PK_categories_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  active           Boolean  @default(true)
  name             String
  description      String?
  code             String   @unique
  parent_id        String?  @db.Uuid
  i18n_name        Json
  i18n_description Json?
  created_at       DateTime @default(now()) @db.Timestamptz(5)
  updated_at       DateTime @default(now()) @db.Timestamptz(5)

  manufacturers_categories ManufacturersCategories[]

  @@map("categories")
}

model ImageSizes {
  id     String @id(map: "PK_image_sizes_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code   String @unique
  width  Int
  height Int

  @@map("image_sizes")
}

model Assets {
  id          String   @id(map: "PK_assets_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  path        String?
  size        Int
  mime_type   String
  parent_id   String?  @db.Uuid
  resize_code String?
  model       String?
  model_id    String?
  code        String?
  created_at  DateTime @default(now()) @db.Timestamptz(5)
  updated_at  DateTime @default(now()) @db.Timestamptz(5)
  created_by  String?  @db.Uuid
  updated_by  String?  @db.Uuid

  assets_created_byTousers Users? @relation("assets_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, map: "FK_assets_created_by")
  assets_updated_byTousers Users? @relation("assets_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, map: "FK_assets_updated_by")

  @@map("assets")
}

model Manufacturers {
  id          String   @id(map: "PK_manufacturers_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  short_name  String
  name        String
  description String?
  city_id     String?  @db.Uuid
  rating      Float    @default(0)
  active      Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(5)
  updated_at  DateTime @default(now()) @db.Timestamptz(5)

  manufacturers_categories ManufacturersCategories[]

  manyfacturers_properties_values_manufacturers_properties ManufacturersPropertiesValues[]

  cities Cities? @relation(fields: [city_id], references: [id], onDelete: NoAction, map: "FK_manufacturers_city_id")

  @@map("manufacturers")
}

model ManufacturersCategories {
  id              String   @id(map: "PK_manufacturers_categories_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  manufacturer_id String   @db.Uuid
  category_id     String   @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamptz(5)
  updated_at      DateTime @default(now()) @db.Timestamptz(5)

  manufacturers_categories_categories    Categories    @relation(fields: [category_id], references: [id], onDelete: NoAction, map: "FK_manufacturers_categories_category_id")
  manufacturers_categories_manufacturers Manufacturers @relation(fields: [manufacturer_id], references: [id], onDelete: NoAction, map: "FK_manufacturers_categories_manufacturer_id")

  @@map("manufacturers_categories")
}

model Cities {
  id          String   @id(map: "PK_city_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String
  description String?
  created_at  DateTime @default(now()) @db.Timestamptz(5)
  updated_at  DateTime @default(now()) @db.Timestamptz(5)

  manufacturers Manufacturers[]

  @@map("cities")
}

model ManufacturersPropertiesCategories {
  id                      String                    @id(map: "PK_manufacturers_properties_categories_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                    String
  code                    String
  i18n_name               Json?
  ManufacturersProperties ManufacturersProperties[]

  @@map("manufacturers_properties_categories")
}

model ManufacturersProperties {
  id              String                         @id(map: "PK_manufacturers_properties_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  code            String
  i18n_name       Json?
  category_id     String                         @db.Uuid
  type            manufacturers_properties_types
  additional_data Json?
  created_at      DateTime                       @default(now()) @db.Timestamptz(5)
  updated_at      DateTime                       @default(now()) @db.Timestamptz(5)

  manufacturers_properties_categories                      ManufacturersPropertiesCategories? @relation(fields: [category_id], references: [id], onDelete: NoAction, map: "FK_manufacturers_properties_category_id")
  manufacturers_properties_values_manufacturers_properties ManufacturersPropertiesValues[]

  @@map("manufacturers_properties")
}

model ManufacturersPropertiesValues {
  id              String @id(map: "PK_manufacturers_properties_values_id") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  property_id     String @db.Uuid
  manufacturer_id String @db.Uuid
  value           String

  manufacturers_properties_values_manufacturers_properties ManufacturersProperties @relation(fields: [property_id], references: [id], onDelete: NoAction, map: "FK_manufacturers_properties_values_property_id")
  manyfacturers_properties_values_manufacturers            Manufacturers           @relation(fields: [manufacturer_id], references: [id], onDelete: NoAction, map: "FK_manufacturers_properties_values_manufacturer_id")

  @@map("manufacturers_properties_values")
}

enum organization_system_type {
  iiko
  r_keeper
  jowi
}

enum work_schedule_entry_status {
  open
  closed
}

enum organization_payment_types {
  cash
  card
  client
}

enum manufacturers_properties_types {
  string
  number
  boolean
  date
  list
}
