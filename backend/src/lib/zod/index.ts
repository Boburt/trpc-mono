import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const PermissionsScalarFieldEnumSchema = z.enum(['id','slug','description','active','created_at','updated_at','created_by','updated_by']);

export const RolesScalarFieldEnumSchema = z.enum(['id','name','code','active','created_at','updated_at','created_by','updated_by']);

export const Roles_permissionsScalarFieldEnumSchema = z.enum(['role_id','permission_id','created_by','updated_by']);

export const UsersScalarFieldEnumSchema = z.enum(['id','phone','email','login','first_name','last_name','password','salt','is_super_user','status','card_name','card_number','birth_date','car_model','car_number','is_online','latitude','longitude','fcm_token','wallet_balance','max_active_order_count','doc_files','order_start_date','app_version','created_at','updated_at','api_token','tg_id']);

export const SessionsScalarFieldEnumSchema = z.enum(['id','user_id','user_agent','device_name','created_at','updated_at']);

export const Users_permissionsScalarFieldEnumSchema = z.enum(['user_id','permission_id','created_by','updated_by']);

export const Users_rolesScalarFieldEnumSchema = z.enum(['user_id','role_id','created_by','updated_by']);

export const Work_schedulesScalarFieldEnumSchema = z.enum(['id','name','active','organization_id','days','start_time','end_time','max_start_time','bonus_price','created_at','updated_at','created_by','updated_by']);

export const TerminalsScalarFieldEnumSchema = z.enum(['id','name','active','phone','address','latitude','longitude','external_id','organization_id','manager_name','created_at','updated_at']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','external_id','active','system_type','phone','iiko_login','webhook','group_id','apelsin_login','apelsin_password','sender_name','sender_number','description','max_distance','max_active_order_count','max_order_close_distance','payment_type','support_chat_url','icon_url','allow_yandex_delivery','created_at','updated_at','created_by','updated_by']);

export const Users_terminalsScalarFieldEnumSchema = z.enum(['user_id','terminal_id']);

export const Users_work_schedulesScalarFieldEnumSchema = z.enum(['user_id','work_schedule_id']);

export const Work_schedule_entriesScalarFieldEnumSchema = z.enum(['id','user_id','work_schedule_id','date_start','date_finish','duration','ip_open','ip_close','lat_open','lat_close','lon_open','lon_close','current_status','late','created_at','updated_at','created_by','updated_by']);

export const Api_tokensScalarFieldEnumSchema = z.enum(['id','active','token','organization_id','created_at','updated_at','created_by','updated_by']);

export const TimesheetScalarFieldEnumSchema = z.enum(['id','user_id','is_late','date','created_at','updated_at']);

export const Scheduled_reportsScalarFieldEnumSchema = z.enum(['id','name','code','cron','created_at','updated_at']);

export const Scheduled_reports_subscriptionScalarFieldEnumSchema = z.enum(['id','report_id','user_id','created_at','updated_at']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const user_statusSchema = z.enum(['active','blocked','inactive']);

export type user_statusType = `${z.infer<typeof user_statusSchema>}`

export const organization_system_typeSchema = z.enum(['iiko','r_keeper','jowi']);

export type organization_system_typeType = `${z.infer<typeof organization_system_typeSchema>}`

export const work_schedule_entry_statusSchema = z.enum(['open','closed']);

export type work_schedule_entry_statusType = `${z.infer<typeof work_schedule_entry_statusSchema>}`

export const organization_payment_typesSchema = z.enum(['cash','card','client']);

export type organization_payment_typesType = `${z.infer<typeof organization_payment_typesSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// PERMISSIONS SCHEMA
/////////////////////////////////////////

export const PermissionsSchema = z.object({
  id: z.string(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Permissions = z.infer<typeof PermissionsSchema>

// PERMISSIONS RELATION SCHEMA
//------------------------------------------------------

export type PermissionsRelations = {
  users_permissions_created_byTousers?: UsersWithRelations | null;
  users_permissions_updated_byTousers?: UsersWithRelations | null;
  roles_permissions: Roles_permissionsWithRelations[];
  users_permissions: Users_permissionsWithRelations[];
};

export type PermissionsWithRelations = z.infer<typeof PermissionsSchema> & PermissionsRelations

export const PermissionsWithRelationsSchema: z.ZodType<PermissionsWithRelations> = PermissionsSchema.merge(z.object({
  users_permissions_created_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  users_permissions_updated_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  roles_permissions: z.lazy(() => Roles_permissionsWithRelationsSchema).array(),
  users_permissions: z.lazy(() => Users_permissionsWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// ROLES SCHEMA
/////////////////////////////////////////

export const RolesSchema = z.object({
  id: z.string(),
  name: z.string(),
  code: z.string().nullish(),
  active: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Roles = z.infer<typeof RolesSchema>

// ROLES RELATION SCHEMA
//------------------------------------------------------

export type RolesRelations = {
  users_roles_created_byTousers?: UsersWithRelations | null;
  users_roles_updated_byTousers?: UsersWithRelations | null;
  roles_permissions: Roles_permissionsWithRelations[];
  users_roles: Users_rolesWithRelations[];
};

export type RolesWithRelations = z.infer<typeof RolesSchema> & RolesRelations

export const RolesWithRelationsSchema: z.ZodType<RolesWithRelations> = RolesSchema.merge(z.object({
  users_roles_created_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  users_roles_updated_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  roles_permissions: z.lazy(() => Roles_permissionsWithRelationsSchema).array(),
  users_roles: z.lazy(() => Users_rolesWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// ROLES PERMISSIONS SCHEMA
/////////////////////////////////////////

export const Roles_permissionsSchema = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Roles_permissions = z.infer<typeof Roles_permissionsSchema>

// ROLES PERMISSIONS RELATION SCHEMA
//------------------------------------------------------

export type Roles_permissionsRelations = {
  users_roles_permissions_created_byTousers?: UsersWithRelations | null;
  permissions: PermissionsWithRelations;
  roles: RolesWithRelations;
  users_roles_permissions_updated_byTousers?: UsersWithRelations | null;
};

export type Roles_permissionsWithRelations = z.infer<typeof Roles_permissionsSchema> & Roles_permissionsRelations

export const Roles_permissionsWithRelationsSchema: z.ZodType<Roles_permissionsWithRelations> = Roles_permissionsSchema.merge(z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  permissions: z.lazy(() => PermissionsWithRelationsSchema),
  roles: z.lazy(() => RolesWithRelationsSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
}))

/////////////////////////////////////////
// USERS SCHEMA
/////////////////////////////////////////

export const UsersSchema = z.object({
  status: user_statusSchema,
  id: z.string().uuid(),
  phone: z.string().nullish(),
  email: z.string().nullish(),
  login: z.string(),
  first_name: z.string().nullish(),
  last_name: z.string().nullish(),
  password: z.string(),
  salt: z.string().nullish(),
  is_super_user: z.boolean(),
  card_name: z.string().nullish(),
  card_number: z.string().nullish(),
  birth_date: z.coerce.date().nullish(),
  car_model: z.string().nullish(),
  car_number: z.string().nullish(),
  is_online: z.boolean(),
  latitude: z.number().nullish(),
  longitude: z.number().nullish(),
  fcm_token: z.string().nullish(),
  wallet_balance: z.number(),
  max_active_order_count: z.number().int().nullish(),
  doc_files: z.string().array(),
  order_start_date: z.coerce.date().nullish(),
  app_version: z.string().nullish(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  api_token: z.string().nullish(),
  tg_id: z.string().nullish(),
})

export type Users = z.infer<typeof UsersSchema>

// USERS RELATION SCHEMA
//------------------------------------------------------

export type UsersRelations = {
  permissions_permissions_created_byTousers: PermissionsWithRelations[];
  permissions_permissions_updated_byTousers: PermissionsWithRelations[];
  roles_roles_created_byTousers: RolesWithRelations[];
  roles_roles_updated_byTousers: RolesWithRelations[];
  roles_permissions_roles_permissions_created_byTousers: Roles_permissionsWithRelations[];
  roles_permissions_roles_permissions_updated_byTousers: Roles_permissionsWithRelations[];
  users_permissions_usersTousers_permissions_created_by: Users_permissionsWithRelations[];
  users_permissions_usersTousers_permissions_updated_by: Users_permissionsWithRelations[];
  users_permissions_usersTousers_permissions_user_id: Users_permissionsWithRelations[];
  users_roles_usersTousers_roles_created_by: Users_rolesWithRelations[];
  users_roles_usersTousers_roles_updated_by: Users_rolesWithRelations[];
  users_roles_usersTousers_roles_user_id: Users_rolesWithRelations[];
  organization_created_byTousers: OrganizationWithRelations[];
  organization_updated_byTousers: OrganizationWithRelations[];
  work_schedules_created_byTousers: Work_schedulesWithRelations[];
  work_schedules_updated_byTousers: Work_schedulesWithRelations[];
  users_terminals: Users_terminalsWithRelations[];
  users_work_schedules: Users_work_schedulesWithRelations[];
  work_schedule_entries_created_byTousers: Work_schedule_entriesWithRelations[];
  work_schedule_entries_updated_byTousers: Work_schedule_entriesWithRelations[];
  work_schedule_entries_users: Work_schedule_entriesWithRelations[];
  api_tokens_created_byTousers: Api_tokensWithRelations[];
  api_tokens_updated_byTousers: Api_tokensWithRelations[];
  timesheet_users: TimesheetWithRelations[];
  scheduled_reports_subscription_users: Scheduled_reports_subscriptionWithRelations[];
  sessions: SessionsWithRelations[];
};

export type UsersWithRelations = z.infer<typeof UsersSchema> & UsersRelations

export const UsersWithRelationsSchema: z.ZodType<UsersWithRelations> = UsersSchema.merge(z.object({
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsWithRelationsSchema).array(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsWithRelationsSchema).array(),
  roles_roles_created_byTousers: z.lazy(() => RolesWithRelationsSchema).array(),
  roles_roles_updated_byTousers: z.lazy(() => RolesWithRelationsSchema).array(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsWithRelationsSchema).array(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsWithRelationsSchema).array(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsWithRelationsSchema).array(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsWithRelationsSchema).array(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsWithRelationsSchema).array(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesWithRelationsSchema).array(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesWithRelationsSchema).array(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesWithRelationsSchema).array(),
  organization_created_byTousers: z.lazy(() => OrganizationWithRelationsSchema).array(),
  organization_updated_byTousers: z.lazy(() => OrganizationWithRelationsSchema).array(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesWithRelationsSchema).array(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesWithRelationsSchema).array(),
  users_terminals: z.lazy(() => Users_terminalsWithRelationsSchema).array(),
  users_work_schedules: z.lazy(() => Users_work_schedulesWithRelationsSchema).array(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesWithRelationsSchema).array(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesWithRelationsSchema).array(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesWithRelationsSchema).array(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensWithRelationsSchema).array(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensWithRelationsSchema).array(),
  timesheet_users: z.lazy(() => TimesheetWithRelationsSchema).array(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionWithRelationsSchema).array(),
  sessions: z.lazy(() => SessionsWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// SESSIONS SCHEMA
/////////////////////////////////////////

export const SessionsSchema = z.object({
  id: z.string().uuid(),
  user_id: z.string(),
  user_agent: z.string(),
  device_name: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type Sessions = z.infer<typeof SessionsSchema>

// SESSIONS RELATION SCHEMA
//------------------------------------------------------

export type SessionsRelations = {
  users_sessions: UsersWithRelations;
};

export type SessionsWithRelations = z.infer<typeof SessionsSchema> & SessionsRelations

export const SessionsWithRelationsSchema: z.ZodType<SessionsWithRelations> = SessionsSchema.merge(z.object({
  users_sessions: z.lazy(() => UsersWithRelationsSchema),
}))

/////////////////////////////////////////
// USERS PERMISSIONS SCHEMA
/////////////////////////////////////////

export const Users_permissionsSchema = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Users_permissions = z.infer<typeof Users_permissionsSchema>

// USERS PERMISSIONS RELATION SCHEMA
//------------------------------------------------------

export type Users_permissionsRelations = {
  users_usersTousers_permissions_created_by?: UsersWithRelations | null;
  permissions: PermissionsWithRelations;
  users_usersTousers_permissions_updated_by?: UsersWithRelations | null;
  users_usersTousers_permissions_user_id: UsersWithRelations;
};

export type Users_permissionsWithRelations = z.infer<typeof Users_permissionsSchema> & Users_permissionsRelations

export const Users_permissionsWithRelationsSchema: z.ZodType<Users_permissionsWithRelations> = Users_permissionsSchema.merge(z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersWithRelationsSchema).nullish(),
  permissions: z.lazy(() => PermissionsWithRelationsSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersWithRelationsSchema).nullish(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersWithRelationsSchema),
}))

/////////////////////////////////////////
// USERS ROLES SCHEMA
/////////////////////////////////////////

export const Users_rolesSchema = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Users_roles = z.infer<typeof Users_rolesSchema>

// USERS ROLES RELATION SCHEMA
//------------------------------------------------------

export type Users_rolesRelations = {
  users_usersTousers_roles_created_by?: UsersWithRelations | null;
  roles: RolesWithRelations;
  users_usersTousers_roles_updated_by?: UsersWithRelations | null;
  users_usersTousers_roles_user_id: UsersWithRelations;
};

export type Users_rolesWithRelations = z.infer<typeof Users_rolesSchema> & Users_rolesRelations

export const Users_rolesWithRelationsSchema: z.ZodType<Users_rolesWithRelations> = Users_rolesSchema.merge(z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersWithRelationsSchema).nullish(),
  roles: z.lazy(() => RolesWithRelationsSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersWithRelationsSchema).nullish(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersWithRelationsSchema),
}))

/////////////////////////////////////////
// WORK SCHEDULES SCHEMA
/////////////////////////////////////////

export const Work_schedulesSchema = z.object({
  id: z.string(),
  name: z.string(),
  active: z.boolean(),
  organization_id: z.string(),
  days: z.string().array(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Work_schedules = z.infer<typeof Work_schedulesSchema>

// WORK SCHEDULES RELATION SCHEMA
//------------------------------------------------------

export type Work_schedulesRelations = {
  organization: OrganizationWithRelations;
  work_schedules_created_byTousers?: UsersWithRelations | null;
  work_schedules_updated_byTousers?: UsersWithRelations | null;
  users_work_schedules: Users_work_schedulesWithRelations[];
  work_schedule_entries_work_schedules: Work_schedule_entriesWithRelations[];
};

export type Work_schedulesWithRelations = z.infer<typeof Work_schedulesSchema> & Work_schedulesRelations

export const Work_schedulesWithRelationsSchema: z.ZodType<Work_schedulesWithRelations> = Work_schedulesSchema.merge(z.object({
  organization: z.lazy(() => OrganizationWithRelationsSchema),
  work_schedules_created_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  work_schedules_updated_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  users_work_schedules: z.lazy(() => Users_work_schedulesWithRelationsSchema).array(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// TERMINALS SCHEMA
/////////////////////////////////////////

export const TerminalsSchema = z.object({
  id: z.string(),
  name: z.string(),
  active: z.boolean(),
  phone: z.string().nullish(),
  address: z.string().nullish(),
  latitude: z.number(),
  longitude: z.number(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().nullish(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type Terminals = z.infer<typeof TerminalsSchema>

// TERMINALS RELATION SCHEMA
//------------------------------------------------------

export type TerminalsRelations = {
  organization: OrganizationWithRelations;
  users_terminals: Users_terminalsWithRelations[];
};

export type TerminalsWithRelations = z.infer<typeof TerminalsSchema> & TerminalsRelations

export const TerminalsWithRelationsSchema: z.ZodType<TerminalsWithRelations> = TerminalsSchema.merge(z.object({
  organization: z.lazy(() => OrganizationWithRelationsSchema),
  users_terminals: z.lazy(() => Users_terminalsWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const OrganizationSchema = z.object({
  system_type: organization_system_typeSchema,
  payment_type: organization_payment_typesSchema,
  id: z.string(),
  name: z.string(),
  external_id: z.string().nullish(),
  active: z.boolean(),
  phone: z.string(),
  iiko_login: z.string().nullish(),
  webhook: z.string().nullish(),
  group_id: z.string().nullish(),
  apelsin_login: z.string().nullish(),
  apelsin_password: z.string().nullish(),
  sender_name: z.string().nullish(),
  sender_number: z.string().nullish(),
  description: z.string().nullish(),
  max_distance: z.number().int(),
  max_active_order_count: z.number().int(),
  max_order_close_distance: z.number().int(),
  support_chat_url: z.string().nullish(),
  icon_url: z.string().nullish(),
  allow_yandex_delivery: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Organization = z.infer<typeof OrganizationSchema>

// ORGANIZATION RELATION SCHEMA
//------------------------------------------------------

export type OrganizationRelations = {
  work_schedules_organization_idTorganization: Work_schedulesWithRelations[];
  organization_created_byTousers?: UsersWithRelations | null;
  organization_updated_byTousers?: UsersWithRelations | null;
  terminals_organization_idTorganization: TerminalsWithRelations[];
  api_tokens_organization: Api_tokensWithRelations[];
};

export type OrganizationWithRelations = z.infer<typeof OrganizationSchema> & OrganizationRelations

export const OrganizationWithRelationsSchema: z.ZodType<OrganizationWithRelations> = OrganizationSchema.merge(z.object({
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesWithRelationsSchema).array(),
  organization_created_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  organization_updated_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsWithRelationsSchema).array(),
  api_tokens_organization: z.lazy(() => Api_tokensWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// USERS TERMINALS SCHEMA
/////////////////////////////////////////

export const Users_terminalsSchema = z.object({
  user_id: z.string(),
  terminal_id: z.string(),
})

export type Users_terminals = z.infer<typeof Users_terminalsSchema>

// USERS TERMINALS RELATION SCHEMA
//------------------------------------------------------

export type Users_terminalsRelations = {
  users: UsersWithRelations;
  terminals: TerminalsWithRelations;
};

export type Users_terminalsWithRelations = z.infer<typeof Users_terminalsSchema> & Users_terminalsRelations

export const Users_terminalsWithRelationsSchema: z.ZodType<Users_terminalsWithRelations> = Users_terminalsSchema.merge(z.object({
  users: z.lazy(() => UsersWithRelationsSchema),
  terminals: z.lazy(() => TerminalsWithRelationsSchema),
}))

/////////////////////////////////////////
// USERS WORK SCHEDULES SCHEMA
/////////////////////////////////////////

export const Users_work_schedulesSchema = z.object({
  user_id: z.string(),
  work_schedule_id: z.string(),
})

export type Users_work_schedules = z.infer<typeof Users_work_schedulesSchema>

// USERS WORK SCHEDULES RELATION SCHEMA
//------------------------------------------------------

export type Users_work_schedulesRelations = {
  users: UsersWithRelations;
  work_schedules: Work_schedulesWithRelations;
};

export type Users_work_schedulesWithRelations = z.infer<typeof Users_work_schedulesSchema> & Users_work_schedulesRelations

export const Users_work_schedulesWithRelationsSchema: z.ZodType<Users_work_schedulesWithRelations> = Users_work_schedulesSchema.merge(z.object({
  users: z.lazy(() => UsersWithRelationsSchema),
  work_schedules: z.lazy(() => Work_schedulesWithRelationsSchema),
}))

/////////////////////////////////////////
// WORK SCHEDULE ENTRIES SCHEMA
/////////////////////////////////////////

export const Work_schedule_entriesSchema = z.object({
  current_status: work_schedule_entry_statusSchema,
  id: z.string(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().nullish(),
  duration: z.number().int(),
  ip_open: z.string().nullish(),
  ip_close: z.string().nullish(),
  lat_open: z.number(),
  lat_close: z.number().nullish(),
  lon_open: z.number(),
  lon_close: z.number().nullish(),
  late: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Work_schedule_entries = z.infer<typeof Work_schedule_entriesSchema>

// WORK SCHEDULE ENTRIES RELATION SCHEMA
//------------------------------------------------------

export type Work_schedule_entriesRelations = {
  work_schedule_entries_created_byTousers?: UsersWithRelations | null;
  work_schedule_entries_updated_byTousers?: UsersWithRelations | null;
  work_schedule_entries_users: UsersWithRelations;
  work_schedule_entries_work_schedules: Work_schedulesWithRelations;
};

export type Work_schedule_entriesWithRelations = z.infer<typeof Work_schedule_entriesSchema> & Work_schedule_entriesRelations

export const Work_schedule_entriesWithRelationsSchema: z.ZodType<Work_schedule_entriesWithRelations> = Work_schedule_entriesSchema.merge(z.object({
  work_schedule_entries_created_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  work_schedule_entries_users: z.lazy(() => UsersWithRelationsSchema),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesWithRelationsSchema),
}))

/////////////////////////////////////////
// API TOKENS SCHEMA
/////////////////////////////////////////

export const Api_tokensSchema = z.object({
  id: z.string(),
  active: z.boolean(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type Api_tokens = z.infer<typeof Api_tokensSchema>

// API TOKENS RELATION SCHEMA
//------------------------------------------------------

export type Api_tokensRelations = {
  api_tokens_created_byTousers?: UsersWithRelations | null;
  api_tokens_updated_byTousers?: UsersWithRelations | null;
  api_tokens_organization: OrganizationWithRelations;
};

export type Api_tokensWithRelations = z.infer<typeof Api_tokensSchema> & Api_tokensRelations

export const Api_tokensWithRelationsSchema: z.ZodType<Api_tokensWithRelations> = Api_tokensSchema.merge(z.object({
  api_tokens_created_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  api_tokens_updated_byTousers: z.lazy(() => UsersWithRelationsSchema).nullish(),
  api_tokens_organization: z.lazy(() => OrganizationWithRelationsSchema),
}))

/////////////////////////////////////////
// TIMESHEET SCHEMA
/////////////////////////////////////////

export const TimesheetSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  is_late: z.boolean(),
  date: z.coerce.date(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type Timesheet = z.infer<typeof TimesheetSchema>

// TIMESHEET RELATION SCHEMA
//------------------------------------------------------

export type TimesheetRelations = {
  timesheet_users: UsersWithRelations;
};

export type TimesheetWithRelations = z.infer<typeof TimesheetSchema> & TimesheetRelations

export const TimesheetWithRelationsSchema: z.ZodType<TimesheetWithRelations> = TimesheetSchema.merge(z.object({
  timesheet_users: z.lazy(() => UsersWithRelationsSchema),
}))

/////////////////////////////////////////
// SCHEDULED REPORTS SCHEMA
/////////////////////////////////////////

export const Scheduled_reportsSchema = z.object({
  id: z.string(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type Scheduled_reports = z.infer<typeof Scheduled_reportsSchema>

// SCHEDULED REPORTS RELATION SCHEMA
//------------------------------------------------------

export type Scheduled_reportsRelations = {
  scheduled_reports_scheduled_reports_subscriptions: Scheduled_reports_subscriptionWithRelations[];
};

export type Scheduled_reportsWithRelations = z.infer<typeof Scheduled_reportsSchema> & Scheduled_reportsRelations

export const Scheduled_reportsWithRelationsSchema: z.ZodType<Scheduled_reportsWithRelations> = Scheduled_reportsSchema.merge(z.object({
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// SCHEDULED REPORTS SUBSCRIPTION SCHEMA
/////////////////////////////////////////

export const Scheduled_reports_subscriptionSchema = z.object({
  id: z.string(),
  report_id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type Scheduled_reports_subscription = z.infer<typeof Scheduled_reports_subscriptionSchema>

// SCHEDULED REPORTS SUBSCRIPTION RELATION SCHEMA
//------------------------------------------------------

export type Scheduled_reports_subscriptionRelations = {
  scheduled_reports_subscription_reports: Scheduled_reportsWithRelations;
  scheduled_reports_subscription_users: UsersWithRelations;
};

export type Scheduled_reports_subscriptionWithRelations = z.infer<typeof Scheduled_reports_subscriptionSchema> & Scheduled_reports_subscriptionRelations

export const Scheduled_reports_subscriptionWithRelationsSchema: z.ZodType<Scheduled_reports_subscriptionWithRelations> = Scheduled_reports_subscriptionSchema.merge(z.object({
  scheduled_reports_subscription_reports: z.lazy(() => Scheduled_reportsWithRelationsSchema),
  scheduled_reports_subscription_users: z.lazy(() => UsersWithRelationsSchema),
}))

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// PERMISSIONS
//------------------------------------------------------

export const PermissionsIncludeSchema: z.ZodType<Prisma.PermissionsInclude> = z.object({
  users_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PermissionsArgsSchema: z.ZodType<Prisma.PermissionsDefaultArgs> = z.object({
  select: z.lazy(() => PermissionsSelectSchema).optional(),
  include: z.lazy(() => PermissionsIncludeSchema).optional(),
}).strict();

export const PermissionsCountOutputTypeArgsSchema: z.ZodType<Prisma.PermissionsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => PermissionsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PermissionsCountOutputTypeSelectSchema: z.ZodType<Prisma.PermissionsCountOutputTypeSelect> = z.object({
  roles_permissions: z.boolean().optional(),
  users_permissions: z.boolean().optional(),
}).strict();

export const PermissionsSelectSchema: z.ZodType<Prisma.PermissionsSelect> = z.object({
  id: z.boolean().optional(),
  slug: z.boolean().optional(),
  description: z.boolean().optional(),
  active: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROLES
//------------------------------------------------------

export const RolesIncludeSchema: z.ZodType<Prisma.RolesInclude> = z.object({
  users_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  users_roles: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RolesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const RolesArgsSchema: z.ZodType<Prisma.RolesDefaultArgs> = z.object({
  select: z.lazy(() => RolesSelectSchema).optional(),
  include: z.lazy(() => RolesIncludeSchema).optional(),
}).strict();

export const RolesCountOutputTypeArgsSchema: z.ZodType<Prisma.RolesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => RolesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const RolesCountOutputTypeSelectSchema: z.ZodType<Prisma.RolesCountOutputTypeSelect> = z.object({
  roles_permissions: z.boolean().optional(),
  users_roles: z.boolean().optional(),
}).strict();

export const RolesSelectSchema: z.ZodType<Prisma.RolesSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  active: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  users_roles: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RolesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROLES PERMISSIONS
//------------------------------------------------------

export const Roles_permissionsIncludeSchema: z.ZodType<Prisma.Roles_permissionsInclude> = z.object({
  users_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => PermissionsArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => RolesArgsSchema)]).optional(),
  users_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Roles_permissionsArgsSchema: z.ZodType<Prisma.Roles_permissionsDefaultArgs> = z.object({
  select: z.lazy(() => Roles_permissionsSelectSchema).optional(),
  include: z.lazy(() => Roles_permissionsIncludeSchema).optional(),
}).strict();

export const Roles_permissionsSelectSchema: z.ZodType<Prisma.Roles_permissionsSelect> = z.object({
  role_id: z.boolean().optional(),
  permission_id: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => PermissionsArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => RolesArgsSchema)]).optional(),
  users_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// USERS
//------------------------------------------------------

export const UsersIncludeSchema: z.ZodType<Prisma.UsersInclude> = z.object({
  permissions_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => PermissionsFindManyArgsSchema)]).optional(),
  permissions_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => PermissionsFindManyArgsSchema)]).optional(),
  roles_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => RolesFindManyArgsSchema)]).optional(),
  roles_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => RolesFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedulesFindManyArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedulesFindManyArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => Users_terminalsFindManyArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => Users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => Api_tokensFindManyArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => Api_tokensFindManyArgsSchema)]).optional(),
  timesheet_users: z.union([z.boolean(),z.lazy(() => TimesheetFindManyArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => Scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UsersArgsSchema: z.ZodType<Prisma.UsersDefaultArgs> = z.object({
  select: z.lazy(() => UsersSelectSchema).optional(),
  include: z.lazy(() => UsersIncludeSchema).optional(),
}).strict();

export const UsersCountOutputTypeArgsSchema: z.ZodType<Prisma.UsersCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UsersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UsersCountOutputTypeSelectSchema: z.ZodType<Prisma.UsersCountOutputTypeSelect> = z.object({
  permissions_permissions_created_byTousers: z.boolean().optional(),
  permissions_permissions_updated_byTousers: z.boolean().optional(),
  roles_roles_created_byTousers: z.boolean().optional(),
  roles_roles_updated_byTousers: z.boolean().optional(),
  roles_permissions_roles_permissions_created_byTousers: z.boolean().optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.boolean().optional(),
  users_permissions_usersTousers_permissions_created_by: z.boolean().optional(),
  users_permissions_usersTousers_permissions_updated_by: z.boolean().optional(),
  users_permissions_usersTousers_permissions_user_id: z.boolean().optional(),
  users_roles_usersTousers_roles_created_by: z.boolean().optional(),
  users_roles_usersTousers_roles_updated_by: z.boolean().optional(),
  users_roles_usersTousers_roles_user_id: z.boolean().optional(),
  organization_created_byTousers: z.boolean().optional(),
  organization_updated_byTousers: z.boolean().optional(),
  work_schedules_created_byTousers: z.boolean().optional(),
  work_schedules_updated_byTousers: z.boolean().optional(),
  users_terminals: z.boolean().optional(),
  users_work_schedules: z.boolean().optional(),
  work_schedule_entries_created_byTousers: z.boolean().optional(),
  work_schedule_entries_updated_byTousers: z.boolean().optional(),
  work_schedule_entries_users: z.boolean().optional(),
  api_tokens_created_byTousers: z.boolean().optional(),
  api_tokens_updated_byTousers: z.boolean().optional(),
  timesheet_users: z.boolean().optional(),
  scheduled_reports_subscription_users: z.boolean().optional(),
  sessions: z.boolean().optional(),
}).strict();

export const UsersSelectSchema: z.ZodType<Prisma.UsersSelect> = z.object({
  id: z.boolean().optional(),
  phone: z.boolean().optional(),
  email: z.boolean().optional(),
  login: z.boolean().optional(),
  first_name: z.boolean().optional(),
  last_name: z.boolean().optional(),
  password: z.boolean().optional(),
  salt: z.boolean().optional(),
  is_super_user: z.boolean().optional(),
  status: z.boolean().optional(),
  card_name: z.boolean().optional(),
  card_number: z.boolean().optional(),
  birth_date: z.boolean().optional(),
  car_model: z.boolean().optional(),
  car_number: z.boolean().optional(),
  is_online: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  fcm_token: z.boolean().optional(),
  wallet_balance: z.boolean().optional(),
  max_active_order_count: z.boolean().optional(),
  doc_files: z.boolean().optional(),
  order_start_date: z.boolean().optional(),
  app_version: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  api_token: z.boolean().optional(),
  tg_id: z.boolean().optional(),
  permissions_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => PermissionsFindManyArgsSchema)]).optional(),
  permissions_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => PermissionsFindManyArgsSchema)]).optional(),
  roles_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => RolesFindManyArgsSchema)]).optional(),
  roles_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => RolesFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => Roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => Users_permissionsFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => Users_rolesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => OrganizationFindManyArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedulesFindManyArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedulesFindManyArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => Users_terminalsFindManyArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => Users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => Api_tokensFindManyArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => Api_tokensFindManyArgsSchema)]).optional(),
  timesheet_users: z.union([z.boolean(),z.lazy(() => TimesheetFindManyArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => Scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SESSIONS
//------------------------------------------------------

export const SessionsIncludeSchema: z.ZodType<Prisma.SessionsInclude> = z.object({
  users_sessions: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const SessionsArgsSchema: z.ZodType<Prisma.SessionsDefaultArgs> = z.object({
  select: z.lazy(() => SessionsSelectSchema).optional(),
  include: z.lazy(() => SessionsIncludeSchema).optional(),
}).strict();

export const SessionsSelectSchema: z.ZodType<Prisma.SessionsSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  user_agent: z.boolean().optional(),
  device_name: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  users_sessions: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// USERS PERMISSIONS
//------------------------------------------------------

export const Users_permissionsIncludeSchema: z.ZodType<Prisma.Users_permissionsInclude> = z.object({
  users_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => PermissionsArgsSchema)]).optional(),
  users_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Users_permissionsArgsSchema: z.ZodType<Prisma.Users_permissionsDefaultArgs> = z.object({
  select: z.lazy(() => Users_permissionsSelectSchema).optional(),
  include: z.lazy(() => Users_permissionsIncludeSchema).optional(),
}).strict();

export const Users_permissionsSelectSchema: z.ZodType<Prisma.Users_permissionsSelect> = z.object({
  user_id: z.boolean().optional(),
  permission_id: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => PermissionsArgsSchema)]).optional(),
  users_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// USERS ROLES
//------------------------------------------------------

export const Users_rolesIncludeSchema: z.ZodType<Prisma.Users_rolesInclude> = z.object({
  users_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => RolesArgsSchema)]).optional(),
  users_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Users_rolesArgsSchema: z.ZodType<Prisma.Users_rolesDefaultArgs> = z.object({
  select: z.lazy(() => Users_rolesSelectSchema).optional(),
  include: z.lazy(() => Users_rolesIncludeSchema).optional(),
}).strict();

export const Users_rolesSelectSchema: z.ZodType<Prisma.Users_rolesSelect> = z.object({
  user_id: z.boolean().optional(),
  role_id: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => RolesArgsSchema)]).optional(),
  users_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// WORK SCHEDULES
//------------------------------------------------------

export const Work_schedulesIncludeSchema: z.ZodType<Prisma.Work_schedulesInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => Users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Work_schedulesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Work_schedulesArgsSchema: z.ZodType<Prisma.Work_schedulesDefaultArgs> = z.object({
  select: z.lazy(() => Work_schedulesSelectSchema).optional(),
  include: z.lazy(() => Work_schedulesIncludeSchema).optional(),
}).strict();

export const Work_schedulesCountOutputTypeArgsSchema: z.ZodType<Prisma.Work_schedulesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => Work_schedulesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Work_schedulesCountOutputTypeSelectSchema: z.ZodType<Prisma.Work_schedulesCountOutputTypeSelect> = z.object({
  users_work_schedules: z.boolean().optional(),
  work_schedule_entries_work_schedules: z.boolean().optional(),
}).strict();

export const Work_schedulesSelectSchema: z.ZodType<Prisma.Work_schedulesSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  active: z.boolean().optional(),
  organization_id: z.boolean().optional(),
  days: z.boolean().optional(),
  start_time: z.boolean().optional(),
  end_time: z.boolean().optional(),
  max_start_time: z.boolean().optional(),
  bonus_price: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => Users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => Work_schedule_entriesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Work_schedulesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TERMINALS
//------------------------------------------------------

export const TerminalsIncludeSchema: z.ZodType<Prisma.TerminalsInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => Users_terminalsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TerminalsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TerminalsArgsSchema: z.ZodType<Prisma.TerminalsDefaultArgs> = z.object({
  select: z.lazy(() => TerminalsSelectSchema).optional(),
  include: z.lazy(() => TerminalsIncludeSchema).optional(),
}).strict();

export const TerminalsCountOutputTypeArgsSchema: z.ZodType<Prisma.TerminalsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => TerminalsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TerminalsCountOutputTypeSelectSchema: z.ZodType<Prisma.TerminalsCountOutputTypeSelect> = z.object({
  users_terminals: z.boolean().optional(),
}).strict();

export const TerminalsSelectSchema: z.ZodType<Prisma.TerminalsSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  active: z.boolean().optional(),
  phone: z.boolean().optional(),
  address: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  external_id: z.boolean().optional(),
  organization_id: z.boolean().optional(),
  manager_name: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => Users_terminalsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TerminalsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const OrganizationIncludeSchema: z.ZodType<Prisma.OrganizationInclude> = z.object({
  work_schedules_organization_idTorganization: z.union([z.boolean(),z.lazy(() => Work_schedulesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  terminals_organization_idTorganization: z.union([z.boolean(),z.lazy(() => TerminalsFindManyArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => Api_tokensFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const OrganizationArgsSchema: z.ZodType<Prisma.OrganizationDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationSelectSchema).optional(),
  include: z.lazy(() => OrganizationIncludeSchema).optional(),
}).strict();

export const OrganizationCountOutputTypeArgsSchema: z.ZodType<Prisma.OrganizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => OrganizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const OrganizationCountOutputTypeSelectSchema: z.ZodType<Prisma.OrganizationCountOutputTypeSelect> = z.object({
  work_schedules_organization_idTorganization: z.boolean().optional(),
  terminals_organization_idTorganization: z.boolean().optional(),
  api_tokens_organization: z.boolean().optional(),
}).strict();

export const OrganizationSelectSchema: z.ZodType<Prisma.OrganizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  external_id: z.boolean().optional(),
  active: z.boolean().optional(),
  system_type: z.boolean().optional(),
  phone: z.boolean().optional(),
  iiko_login: z.boolean().optional(),
  webhook: z.boolean().optional(),
  group_id: z.boolean().optional(),
  apelsin_login: z.boolean().optional(),
  apelsin_password: z.boolean().optional(),
  sender_name: z.boolean().optional(),
  sender_number: z.boolean().optional(),
  description: z.boolean().optional(),
  max_distance: z.boolean().optional(),
  max_active_order_count: z.boolean().optional(),
  max_order_close_distance: z.boolean().optional(),
  payment_type: z.boolean().optional(),
  support_chat_url: z.boolean().optional(),
  icon_url: z.boolean().optional(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  work_schedules_organization_idTorganization: z.union([z.boolean(),z.lazy(() => Work_schedulesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  terminals_organization_idTorganization: z.union([z.boolean(),z.lazy(() => TerminalsFindManyArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => Api_tokensFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USERS TERMINALS
//------------------------------------------------------

export const Users_terminalsIncludeSchema: z.ZodType<Prisma.Users_terminalsInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  terminals: z.union([z.boolean(),z.lazy(() => TerminalsArgsSchema)]).optional(),
}).strict()

export const Users_terminalsArgsSchema: z.ZodType<Prisma.Users_terminalsDefaultArgs> = z.object({
  select: z.lazy(() => Users_terminalsSelectSchema).optional(),
  include: z.lazy(() => Users_terminalsIncludeSchema).optional(),
}).strict();

export const Users_terminalsSelectSchema: z.ZodType<Prisma.Users_terminalsSelect> = z.object({
  user_id: z.boolean().optional(),
  terminal_id: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  terminals: z.union([z.boolean(),z.lazy(() => TerminalsArgsSchema)]).optional(),
}).strict()

// USERS WORK SCHEDULES
//------------------------------------------------------

export const Users_work_schedulesIncludeSchema: z.ZodType<Prisma.Users_work_schedulesInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedules: z.union([z.boolean(),z.lazy(() => Work_schedulesArgsSchema)]).optional(),
}).strict()

export const Users_work_schedulesArgsSchema: z.ZodType<Prisma.Users_work_schedulesDefaultArgs> = z.object({
  select: z.lazy(() => Users_work_schedulesSelectSchema).optional(),
  include: z.lazy(() => Users_work_schedulesIncludeSchema).optional(),
}).strict();

export const Users_work_schedulesSelectSchema: z.ZodType<Prisma.Users_work_schedulesSelect> = z.object({
  user_id: z.boolean().optional(),
  work_schedule_id: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedules: z.union([z.boolean(),z.lazy(() => Work_schedulesArgsSchema)]).optional(),
}).strict()

// WORK SCHEDULE ENTRIES
//------------------------------------------------------

export const Work_schedule_entriesIncludeSchema: z.ZodType<Prisma.Work_schedule_entriesInclude> = z.object({
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => Work_schedulesArgsSchema)]).optional(),
}).strict()

export const Work_schedule_entriesArgsSchema: z.ZodType<Prisma.Work_schedule_entriesDefaultArgs> = z.object({
  select: z.lazy(() => Work_schedule_entriesSelectSchema).optional(),
  include: z.lazy(() => Work_schedule_entriesIncludeSchema).optional(),
}).strict();

export const Work_schedule_entriesSelectSchema: z.ZodType<Prisma.Work_schedule_entriesSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  work_schedule_id: z.boolean().optional(),
  date_start: z.boolean().optional(),
  date_finish: z.boolean().optional(),
  duration: z.boolean().optional(),
  ip_open: z.boolean().optional(),
  ip_close: z.boolean().optional(),
  lat_open: z.boolean().optional(),
  lat_close: z.boolean().optional(),
  lon_open: z.boolean().optional(),
  lon_close: z.boolean().optional(),
  current_status: z.boolean().optional(),
  late: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => Work_schedulesArgsSchema)]).optional(),
}).strict()

// API TOKENS
//------------------------------------------------------

export const Api_tokensIncludeSchema: z.ZodType<Prisma.Api_tokensInclude> = z.object({
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

export const Api_tokensArgsSchema: z.ZodType<Prisma.Api_tokensDefaultArgs> = z.object({
  select: z.lazy(() => Api_tokensSelectSchema).optional(),
  include: z.lazy(() => Api_tokensIncludeSchema).optional(),
}).strict();

export const Api_tokensSelectSchema: z.ZodType<Prisma.Api_tokensSelect> = z.object({
  id: z.boolean().optional(),
  active: z.boolean().optional(),
  token: z.boolean().optional(),
  organization_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => OrganizationArgsSchema)]).optional(),
}).strict()

// TIMESHEET
//------------------------------------------------------

export const TimesheetIncludeSchema: z.ZodType<Prisma.TimesheetInclude> = z.object({
  timesheet_users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const TimesheetArgsSchema: z.ZodType<Prisma.TimesheetDefaultArgs> = z.object({
  select: z.lazy(() => TimesheetSelectSchema).optional(),
  include: z.lazy(() => TimesheetIncludeSchema).optional(),
}).strict();

export const TimesheetSelectSchema: z.ZodType<Prisma.TimesheetSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  is_late: z.boolean().optional(),
  date: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  timesheet_users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// SCHEDULED REPORTS
//------------------------------------------------------

export const Scheduled_reportsIncludeSchema: z.ZodType<Prisma.Scheduled_reportsInclude> = z.object({
  scheduled_reports_scheduled_reports_subscriptions: z.union([z.boolean(),z.lazy(() => Scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Scheduled_reportsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Scheduled_reportsArgsSchema: z.ZodType<Prisma.Scheduled_reportsDefaultArgs> = z.object({
  select: z.lazy(() => Scheduled_reportsSelectSchema).optional(),
  include: z.lazy(() => Scheduled_reportsIncludeSchema).optional(),
}).strict();

export const Scheduled_reportsCountOutputTypeArgsSchema: z.ZodType<Prisma.Scheduled_reportsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => Scheduled_reportsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Scheduled_reportsCountOutputTypeSelectSchema: z.ZodType<Prisma.Scheduled_reportsCountOutputTypeSelect> = z.object({
  scheduled_reports_scheduled_reports_subscriptions: z.boolean().optional(),
}).strict();

export const Scheduled_reportsSelectSchema: z.ZodType<Prisma.Scheduled_reportsSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  cron: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.union([z.boolean(),z.lazy(() => Scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Scheduled_reportsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SCHEDULED REPORTS SUBSCRIPTION
//------------------------------------------------------

export const Scheduled_reports_subscriptionIncludeSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionInclude> = z.object({
  scheduled_reports_subscription_reports: z.union([z.boolean(),z.lazy(() => Scheduled_reportsArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Scheduled_reports_subscriptionArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionDefaultArgs> = z.object({
  select: z.lazy(() => Scheduled_reports_subscriptionSelectSchema).optional(),
  include: z.lazy(() => Scheduled_reports_subscriptionIncludeSchema).optional(),
}).strict();

export const Scheduled_reports_subscriptionSelectSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionSelect> = z.object({
  id: z.boolean().optional(),
  report_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  scheduled_reports_subscription_reports: z.union([z.boolean(),z.lazy(() => Scheduled_reportsArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const PermissionsWhereInputSchema: z.ZodType<Prisma.PermissionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionsWhereInputSchema),z.lazy(() => PermissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionsWhereInputSchema),z.lazy(() => PermissionsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsListRelationFilterSchema).optional()
}).strict();

export const PermissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.PermissionsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const PermissionsWhereUniqueInputSchema: z.ZodType<Prisma.PermissionsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    slug: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => PermissionsWhereInputSchema),z.lazy(() => PermissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionsWhereInputSchema),z.lazy(() => PermissionsWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsListRelationFilterSchema).optional()
}).strict());

export const PermissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.PermissionsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => PermissionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PermissionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PermissionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const PermissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PermissionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => PermissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RolesWhereInputSchema: z.ZodType<Prisma.RolesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolesWhereInputSchema),z.lazy(() => RolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolesWhereInputSchema),z.lazy(() => RolesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_roles_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_roles: z.lazy(() => Users_rolesListRelationFilterSchema).optional()
}).strict();

export const RolesOrderByWithRelationInputSchema: z.ZodType<Prisma.RolesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const RolesWhereUniqueInputSchema: z.ZodType<Prisma.RolesWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    name: z.string(),
    code: z.string()
  }),
  z.object({
    id: z.string(),
    name: z.string(),
  }),
  z.object({
    id: z.string(),
    code: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    name: z.string(),
    code: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => RolesWhereInputSchema),z.lazy(() => RolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolesWhereInputSchema),z.lazy(() => RolesWhereInputSchema).array() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_roles_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_roles: z.lazy(() => Users_rolesListRelationFilterSchema).optional()
}).strict());

export const RolesOrderByWithAggregationInputSchema: z.ZodType<Prisma.RolesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => RolesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => RolesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => RolesMinOrderByAggregateInputSchema).optional()
}).strict();

export const RolesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.RolesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => RolesScalarWhereWithAggregatesInputSchema),z.lazy(() => RolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolesScalarWhereWithAggregatesInputSchema),z.lazy(() => RolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Roles_permissionsWhereInputSchema: z.ZodType<Prisma.Roles_permissionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Roles_permissionsWhereInputSchema),z.lazy(() => Roles_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Roles_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Roles_permissionsWhereInputSchema),z.lazy(() => Roles_permissionsWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => PermissionsWhereInputSchema) ]).optional(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => RolesWhereInputSchema) ]).optional(),
  users_roles_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.Roles_permissionsOrderByWithRelationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_roles_permissions_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  permissions: z.lazy(() => PermissionsOrderByWithRelationInputSchema).optional(),
  roles: z.lazy(() => RolesOrderByWithRelationInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Roles_permissionsWhereUniqueInputSchema: z.ZodType<Prisma.Roles_permissionsWhereUniqueInput> = z.object({
  role_id_permission_id: z.lazy(() => Roles_permissionsRole_idPermission_idCompoundUniqueInputSchema)
})
.and(z.object({
  role_id_permission_id: z.lazy(() => Roles_permissionsRole_idPermission_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => Roles_permissionsWhereInputSchema),z.lazy(() => Roles_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Roles_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Roles_permissionsWhereInputSchema),z.lazy(() => Roles_permissionsWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => PermissionsWhereInputSchema) ]).optional(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => RolesWhereInputSchema) ]).optional(),
  users_roles_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
}).strict());

export const Roles_permissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Roles_permissionsOrderByWithAggregationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => Roles_permissionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Roles_permissionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Roles_permissionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Roles_permissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Roles_permissionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Roles_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Roles_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Roles_permissionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Roles_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Roles_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UsersWhereInputSchema: z.ZodType<Prisma.UsersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UsersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  login: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  first_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  last_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  salt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_super_user: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => Enumuser_statusFilterSchema),z.lazy(() => user_statusSchema) ]).optional(),
  card_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  card_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birth_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  car_model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  car_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_online: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fcm_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wallet_balance: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  doc_files: z.lazy(() => StringNullableListFilterSchema).optional(),
  order_start_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  app_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  api_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tg_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetListRelationFilterSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionsListRelationFilterSchema).optional()
}).strict();

export const UsersOrderByWithRelationInputSchema: z.ZodType<Prisma.UsersOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  login: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  salt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  card_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birth_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_model: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fcm_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doc_files: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  app_version: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tg_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsOrderByRelationAggregateInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsOrderByRelationAggregateInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesOrderByRelationAggregateInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesOrderByRelationAggregateInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesOrderByRelationAggregateInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesOrderByRelationAggregateInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesOrderByRelationAggregateInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationOrderByRelationAggregateInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesOrderByRelationAggregateInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesOrderByRelationAggregateInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsOrderByRelationAggregateInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesOrderByRelationAggregateInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensOrderByRelationAggregateInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensOrderByRelationAggregateInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetOrderByRelationAggregateInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => SessionsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UsersWhereUniqueInputSchema: z.ZodType<Prisma.UsersWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    phone: z.string(),
    email: z.string(),
    login: z.string()
  }),
  z.object({
    id: z.string(),
    phone: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
    phone: z.string(),
    login: z.string(),
  }),
  z.object({
    id: z.string(),
    phone: z.string(),
  }),
  z.object({
    id: z.string(),
    email: z.string(),
    login: z.string(),
  }),
  z.object({
    id: z.string(),
    email: z.string(),
  }),
  z.object({
    id: z.string(),
    login: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    phone: z.string(),
    email: z.string(),
    login: z.string(),
  }),
  z.object({
    phone: z.string(),
    email: z.string(),
  }),
  z.object({
    phone: z.string(),
    login: z.string(),
  }),
  z.object({
    phone: z.string(),
  }),
  z.object({
    email: z.string(),
    login: z.string(),
  }),
  z.object({
    email: z.string(),
  }),
  z.object({
    login: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  phone: z.string().optional(),
  email: z.string().optional(),
  login: z.string().optional(),
  AND: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UsersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  first_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  last_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  salt: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_super_user: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => Enumuser_statusFilterSchema),z.lazy(() => user_statusSchema) ]).optional(),
  card_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  card_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birth_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  car_model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  car_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_online: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fcm_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wallet_balance: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  doc_files: z.lazy(() => StringNullableListFilterSchema).optional(),
  order_start_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  app_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  api_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tg_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetListRelationFilterSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional(),
  sessions: z.lazy(() => SessionsListRelationFilterSchema).optional()
}).strict());

export const UsersOrderByWithAggregationInputSchema: z.ZodType<Prisma.UsersOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  login: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  salt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  card_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birth_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_model: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fcm_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doc_files: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  app_version: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tg_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => UsersCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UsersAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UsersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UsersMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UsersSumOrderByAggregateInputSchema).optional()
}).strict();

export const UsersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UsersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  login: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  first_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  last_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  salt: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  is_super_user: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => Enumuser_statusWithAggregatesFilterSchema),z.lazy(() => user_statusSchema) ]).optional(),
  card_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  card_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  birth_date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  car_model: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  car_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  is_online: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  fcm_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wallet_balance: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  doc_files: z.lazy(() => StringNullableListFilterSchema).optional(),
  order_start_date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  app_version: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  api_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tg_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionsWhereInputSchema: z.ZodType<Prisma.SessionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionsWhereInputSchema),z.lazy(() => SessionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionsWhereInputSchema),z.lazy(() => SessionsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_agent: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  device_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users_sessions: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict();

export const SessionsOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  device_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  users_sessions: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionsWhereUniqueInputSchema: z.ZodType<Prisma.SessionsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => SessionsWhereInputSchema),z.lazy(() => SessionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionsWhereInputSchema),z.lazy(() => SessionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_agent: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  device_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  users_sessions: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict());

export const SessionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  device_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_agent: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  device_name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Users_permissionsWhereInputSchema: z.ZodType<Prisma.Users_permissionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_permissionsWhereInputSchema),z.lazy(() => Users_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_permissionsWhereInputSchema),z.lazy(() => Users_permissionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_permissions_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => PermissionsWhereInputSchema) ]).optional(),
  users_usersTousers_permissions_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_permissions_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict();

export const Users_permissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.Users_permissionsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_usersTousers_permissions_created_by: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  permissions: z.lazy(() => PermissionsOrderByWithRelationInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Users_permissionsWhereUniqueInputSchema: z.ZodType<Prisma.Users_permissionsWhereUniqueInput> = z.object({
  user_id_permission_id: z.lazy(() => Users_permissionsUser_idPermission_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_permission_id: z.lazy(() => Users_permissionsUser_idPermission_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => Users_permissionsWhereInputSchema),z.lazy(() => Users_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_permissionsWhereInputSchema),z.lazy(() => Users_permissionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_permissions_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => PermissionsWhereInputSchema) ]).optional(),
  users_usersTousers_permissions_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_permissions_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict());

export const Users_permissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Users_permissionsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => Users_permissionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Users_permissionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Users_permissionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Users_permissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Users_permissionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Users_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_permissionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Users_rolesWhereInputSchema: z.ZodType<Prisma.Users_rolesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_rolesWhereInputSchema),z.lazy(() => Users_rolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_rolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_rolesWhereInputSchema),z.lazy(() => Users_rolesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_roles_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => RolesWhereInputSchema) ]).optional(),
  users_usersTousers_roles_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_roles_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict();

export const Users_rolesOrderByWithRelationInputSchema: z.ZodType<Prisma.Users_rolesOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_usersTousers_roles_created_by: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  roles: z.lazy(() => RolesOrderByWithRelationInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Users_rolesWhereUniqueInputSchema: z.ZodType<Prisma.Users_rolesWhereUniqueInput> = z.object({
  user_id_role_id: z.lazy(() => Users_rolesUser_idRole_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_role_id: z.lazy(() => Users_rolesUser_idRole_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => Users_rolesWhereInputSchema),z.lazy(() => Users_rolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_rolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_rolesWhereInputSchema),z.lazy(() => Users_rolesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_roles_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => RolesWhereInputSchema) ]).optional(),
  users_usersTousers_roles_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_roles_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict());

export const Users_rolesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Users_rolesOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => Users_rolesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Users_rolesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Users_rolesMinOrderByAggregateInputSchema).optional()
}).strict();

export const Users_rolesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Users_rolesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Users_rolesScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_rolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_rolesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_rolesScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_rolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Work_schedulesWhereInputSchema: z.ZodType<Prisma.Work_schedulesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Work_schedulesWhereInputSchema),z.lazy(() => Work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedulesWhereInputSchema),z.lazy(() => Work_schedulesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  work_schedules_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  work_schedules_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional()
}).strict();

export const Work_schedulesOrderByWithRelationInputSchema: z.ZodType<Prisma.Work_schedulesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const Work_schedulesWhereUniqueInputSchema: z.ZodType<Prisma.Work_schedulesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => Work_schedulesWhereInputSchema),z.lazy(() => Work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedulesWhereInputSchema),z.lazy(() => Work_schedulesWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  work_schedules_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  work_schedules_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional()
}).strict());

export const Work_schedulesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Work_schedulesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => Work_schedulesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Work_schedulesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Work_schedulesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Work_schedulesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Work_schedulesSumOrderByAggregateInputSchema).optional()
}).strict();

export const Work_schedulesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Work_schedulesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => Work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedulesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => Work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TerminalsWhereInputSchema: z.ZodType<Prisma.TerminalsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TerminalsWhereInputSchema),z.lazy(() => TerminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TerminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TerminalsWhereInputSchema),z.lazy(() => TerminalsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  external_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional()
}).strict();

export const TerminalsOrderByWithRelationInputSchema: z.ZodType<Prisma.TerminalsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const TerminalsWhereUniqueInputSchema: z.ZodType<Prisma.TerminalsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    external_id: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    external_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  external_id: z.string().optional(),
  AND: z.union([ z.lazy(() => TerminalsWhereInputSchema),z.lazy(() => TerminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TerminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TerminalsWhereInputSchema),z.lazy(() => TerminalsWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional()
}).strict());

export const TerminalsOrderByWithAggregationInputSchema: z.ZodType<Prisma.TerminalsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TerminalsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => TerminalsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TerminalsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TerminalsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => TerminalsSumOrderByAggregateInputSchema).optional()
}).strict();

export const TerminalsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TerminalsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TerminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => TerminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TerminalsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TerminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => TerminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  external_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const OrganizationWhereInputSchema: z.ZodType<Prisma.OrganizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  organization_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsListRelationFilterSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensListRelationFilterSchema).optional()
}).strict();

export const OrganizationOrderByWithRelationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  webhook: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  group_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesOrderByRelationAggregateInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsOrderByRelationAggregateInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensOrderByRelationAggregateInputSchema).optional()
}).strict();

export const OrganizationWhereUniqueInputSchema: z.ZodType<Prisma.OrganizationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationWhereInputSchema),z.lazy(() => OrganizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  organization_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsListRelationFilterSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensListRelationFilterSchema).optional()
}).strict());

export const OrganizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.OrganizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  webhook: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  group_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => OrganizationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => OrganizationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => OrganizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => OrganizationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => OrganizationSumOrderByAggregateInputSchema).optional()
}).strict();

export const OrganizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.OrganizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema),z.lazy(() => OrganizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeWithAggregatesFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesWithAggregatesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Users_terminalsWhereInputSchema: z.ZodType<Prisma.Users_terminalsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_terminalsWhereInputSchema),z.lazy(() => Users_terminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_terminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_terminalsWhereInputSchema),z.lazy(() => Users_terminalsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  terminals: z.union([ z.lazy(() => TerminalsRelationFilterSchema),z.lazy(() => TerminalsWhereInputSchema) ]).optional(),
}).strict();

export const Users_terminalsOrderByWithRelationInputSchema: z.ZodType<Prisma.Users_terminalsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  terminals: z.lazy(() => TerminalsOrderByWithRelationInputSchema).optional()
}).strict();

export const Users_terminalsWhereUniqueInputSchema: z.ZodType<Prisma.Users_terminalsWhereUniqueInput> = z.object({
  user_id_terminal_id: z.lazy(() => Users_terminalsUser_idTerminal_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_terminal_id: z.lazy(() => Users_terminalsUser_idTerminal_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => Users_terminalsWhereInputSchema),z.lazy(() => Users_terminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_terminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_terminalsWhereInputSchema),z.lazy(() => Users_terminalsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  terminals: z.union([ z.lazy(() => TerminalsRelationFilterSchema),z.lazy(() => TerminalsWhereInputSchema) ]).optional(),
}).strict());

export const Users_terminalsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Users_terminalsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Users_terminalsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Users_terminalsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Users_terminalsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Users_terminalsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Users_terminalsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Users_terminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_terminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_terminalsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_terminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_terminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const Users_work_schedulesWhereInputSchema: z.ZodType<Prisma.Users_work_schedulesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_work_schedulesWhereInputSchema),z.lazy(() => Users_work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_work_schedulesWhereInputSchema),z.lazy(() => Users_work_schedulesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => Work_schedulesWhereInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesOrderByWithRelationInputSchema: z.ZodType<Prisma.Users_work_schedulesOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  work_schedules: z.lazy(() => Work_schedulesOrderByWithRelationInputSchema).optional()
}).strict();

export const Users_work_schedulesWhereUniqueInputSchema: z.ZodType<Prisma.Users_work_schedulesWhereUniqueInput> = z.object({
  user_id_work_schedule_id: z.lazy(() => Users_work_schedulesUser_idWork_schedule_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_work_schedule_id: z.lazy(() => Users_work_schedulesUser_idWork_schedule_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => Users_work_schedulesWhereInputSchema),z.lazy(() => Users_work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_work_schedulesWhereInputSchema),z.lazy(() => Users_work_schedulesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => Work_schedulesWhereInputSchema) ]).optional(),
}).strict());

export const Users_work_schedulesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Users_work_schedulesOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Users_work_schedulesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Users_work_schedulesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Users_work_schedulesMinOrderByAggregateInputSchema).optional()
}).strict();

export const Users_work_schedulesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Users_work_schedulesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Users_work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_work_schedulesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => Users_work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const Work_schedule_entriesWhereInputSchema: z.ZodType<Prisma.Work_schedule_entriesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Work_schedule_entriesWhereInputSchema),z.lazy(() => Work_schedule_entriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedule_entriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedule_entriesWhereInputSchema),z.lazy(() => Work_schedule_entriesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedule_entries_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  work_schedule_entries_work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => Work_schedulesWhereInputSchema) ]).optional(),
}).strict();

export const Work_schedule_entriesOrderByWithRelationInputSchema: z.ZodType<Prisma.Work_schedule_entriesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesOrderByWithRelationInputSchema).optional()
}).strict();

export const Work_schedule_entriesWhereUniqueInputSchema: z.ZodType<Prisma.Work_schedule_entriesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => Work_schedule_entriesWhereInputSchema),z.lazy(() => Work_schedule_entriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedule_entriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedule_entriesWhereInputSchema),z.lazy(() => Work_schedule_entriesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedule_entries_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  work_schedule_entries_work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => Work_schedulesWhereInputSchema) ]).optional(),
}).strict());

export const Work_schedule_entriesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Work_schedule_entriesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => Work_schedule_entriesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Work_schedule_entriesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Work_schedule_entriesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Work_schedule_entriesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Work_schedule_entriesSumOrderByAggregateInputSchema).optional()
}).strict();

export const Work_schedule_entriesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Work_schedule_entriesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereWithAggregatesInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedule_entriesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereWithAggregatesInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusWithAggregatesFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Api_tokensWhereInputSchema: z.ZodType<Prisma.Api_tokensWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Api_tokensWhereInputSchema),z.lazy(() => Api_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Api_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Api_tokensWhereInputSchema),z.lazy(() => Api_tokensWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  api_tokens_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  api_tokens_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  api_tokens_organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict();

export const Api_tokensOrderByWithRelationInputSchema: z.ZodType<Prisma.Api_tokensOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => OrganizationOrderByWithRelationInputSchema).optional()
}).strict();

export const Api_tokensWhereUniqueInputSchema: z.ZodType<Prisma.Api_tokensWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    token: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => Api_tokensWhereInputSchema),z.lazy(() => Api_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Api_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Api_tokensWhereInputSchema),z.lazy(() => Api_tokensWhereInputSchema).array() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  api_tokens_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  api_tokens_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  api_tokens_organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => OrganizationWhereInputSchema) ]).optional(),
}).strict());

export const Api_tokensOrderByWithAggregationInputSchema: z.ZodType<Prisma.Api_tokensOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => Api_tokensCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Api_tokensMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Api_tokensMinOrderByAggregateInputSchema).optional()
}).strict();

export const Api_tokensScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Api_tokensScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Api_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => Api_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Api_tokensScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Api_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => Api_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const TimesheetWhereInputSchema: z.ZodType<Prisma.TimesheetWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimesheetWhereInputSchema),z.lazy(() => TimesheetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimesheetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimesheetWhereInputSchema),z.lazy(() => TimesheetWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  timesheet_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict();

export const TimesheetOrderByWithRelationInputSchema: z.ZodType<Prisma.TimesheetOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  timesheet_users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const TimesheetWhereUniqueInputSchema: z.ZodType<Prisma.TimesheetWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => TimesheetWhereInputSchema),z.lazy(() => TimesheetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimesheetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimesheetWhereInputSchema),z.lazy(() => TimesheetWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  timesheet_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict());

export const TimesheetOrderByWithAggregationInputSchema: z.ZodType<Prisma.TimesheetOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TimesheetCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TimesheetMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TimesheetMinOrderByAggregateInputSchema).optional()
}).strict();

export const TimesheetScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TimesheetScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TimesheetScalarWhereWithAggregatesInputSchema),z.lazy(() => TimesheetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimesheetScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimesheetScalarWhereWithAggregatesInputSchema),z.lazy(() => TimesheetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Scheduled_reportsWhereInputSchema: z.ZodType<Prisma.Scheduled_reportsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Scheduled_reportsWhereInputSchema),z.lazy(() => Scheduled_reportsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Scheduled_reportsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Scheduled_reportsWhereInputSchema),z.lazy(() => Scheduled_reportsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cron: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional()
}).strict();

export const Scheduled_reportsOrderByWithRelationInputSchema: z.ZodType<Prisma.Scheduled_reportsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const Scheduled_reportsWhereUniqueInputSchema: z.ZodType<Prisma.Scheduled_reportsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => Scheduled_reportsWhereInputSchema),z.lazy(() => Scheduled_reportsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Scheduled_reportsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Scheduled_reportsWhereInputSchema),z.lazy(() => Scheduled_reportsWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cron: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional()
}).strict());

export const Scheduled_reportsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Scheduled_reportsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Scheduled_reportsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Scheduled_reportsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Scheduled_reportsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Scheduled_reportsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Scheduled_reportsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Scheduled_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Scheduled_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Scheduled_reportsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Scheduled_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Scheduled_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cron: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionWhereInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_subscription_reports: z.union([ z.lazy(() => Scheduled_reportsRelationFilterSchema),z.lazy(() => Scheduled_reportsWhereInputSchema) ]).optional(),
  scheduled_reports_subscription_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionOrderByWithRelationInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  scheduled_reports_subscription_reports: z.lazy(() => Scheduled_reportsOrderByWithRelationInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionWhereUniqueInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_subscription_reports: z.union([ z.lazy(() => Scheduled_reportsRelationFilterSchema),z.lazy(() => Scheduled_reportsWhereInputSchema) ]).optional(),
  scheduled_reports_subscription_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict());

export const Scheduled_reports_subscriptionOrderByWithAggregationInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Scheduled_reports_subscriptionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Scheduled_reports_subscriptionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Scheduled_reports_subscriptionMinOrderByAggregateInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PermissionsCreateInputSchema: z.ZodType<Prisma.PermissionsCreateInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsUncheckedCreateInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsUpdateInputSchema: z.ZodType<Prisma.PermissionsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsCreateManyInputSchema: z.ZodType<Prisma.PermissionsCreateManyInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const PermissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.PermissionsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PermissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RolesCreateInputSchema: z.ZodType<Prisma.RolesCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesUncheckedCreateInputSchema: z.ZodType<Prisma.RolesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesUpdateInputSchema: z.ZodType<Prisma.RolesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesUncheckedUpdateInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesCreateManyInputSchema: z.ZodType<Prisma.RolesCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const RolesUpdateManyMutationInputSchema: z.ZodType<Prisma.RolesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const RolesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsCreateInputSchema: z.ZodType<Prisma.Roles_permissionsCreateInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  roles: z.lazy(() => RolesCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedCreateInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsUpdateInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsCreateManyInputSchema: z.ZodType<Prisma.Roles_permissionsCreateManyInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyMutationInput> = z.object({
}).strict();

export const Roles_permissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersCreateInputSchema: z.ZodType<Prisma.UsersCreateInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateInputSchema: z.ZodType<Prisma.UsersUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUpdateInputSchema: z.ZodType<Prisma.UsersUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersCreateManyInputSchema: z.ZodType<Prisma.UsersCreateManyInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable()
}).strict();

export const UsersUpdateManyMutationInputSchema: z.ZodType<Prisma.UsersUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionsCreateInputSchema: z.ZodType<Prisma.SessionsCreateInput> = z.object({
  id: z.string().optional(),
  user_agent: z.string(),
  device_name: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_sessions: z.lazy(() => UsersCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const SessionsUncheckedCreateInputSchema: z.ZodType<Prisma.SessionsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  user_agent: z.string(),
  device_name: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const SessionsUpdateInputSchema: z.ZodType<Prisma.SessionsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_agent: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_sessions: z.lazy(() => UsersUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionsUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_agent: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionsCreateManyInputSchema: z.ZodType<Prisma.SessionsCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  user_agent: z.string(),
  device_name: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const SessionsUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_agent: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_agent: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_permissionsCreateInputSchema: z.ZodType<Prisma.Users_permissionsCreateInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const Users_permissionsUncheckedCreateInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsUpdateInputSchema: z.ZodType<Prisma.Users_permissionsUpdateInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const Users_permissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsCreateManyInputSchema: z.ZodType<Prisma.Users_permissionsCreateManyInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyMutationInput> = z.object({
}).strict();

export const Users_permissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesCreateInputSchema: z.ZodType<Prisma.Users_rolesCreateInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  roles: z.lazy(() => RolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const Users_rolesUncheckedCreateInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesUpdateInputSchema: z.ZodType<Prisma.Users_rolesUpdateInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const Users_rolesUncheckedUpdateInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesCreateManyInputSchema: z.ZodType<Prisma.Users_rolesCreateManyInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesUpdateManyMutationInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyMutationInput> = z.object({
}).strict();

export const Users_rolesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedulesCreateInputSchema: z.ZodType<Prisma.Work_schedulesCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedCreateInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesUpdateInputSchema: z.ZodType<Prisma.Work_schedulesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesCreateManyInputSchema: z.ZodType<Prisma.Work_schedulesCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedulesUpdateManyMutationInputSchema: z.ZodType<Prisma.Work_schedulesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Work_schedulesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TerminalsCreateInputSchema: z.ZodType<Prisma.TerminalsCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTerminals_organization_idTorganizationInputSchema),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const TerminalsUncheckedCreateInputSchema: z.ZodType<Prisma.TerminalsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const TerminalsUpdateInputSchema: z.ZodType<Prisma.TerminalsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const TerminalsUncheckedUpdateInputSchema: z.ZodType<Prisma.TerminalsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const TerminalsCreateManyInputSchema: z.ZodType<Prisma.TerminalsCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const TerminalsUpdateManyMutationInputSchema: z.ZodType<Prisma.TerminalsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TerminalsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TerminalsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationCreateInputSchema: z.ZodType<Prisma.OrganizationCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationUpdateInputSchema: z.ZodType<Prisma.OrganizationUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationCreateManyInputSchema: z.ZodType<Prisma.OrganizationCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const OrganizationUpdateManyMutationInputSchema: z.ZodType<Prisma.OrganizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_terminalsCreateInputSchema: z.ZodType<Prisma.Users_terminalsCreateInput> = z.object({
  users: z.lazy(() => UsersCreateNestedOneWithoutUsers_terminalsInputSchema),
  terminals: z.lazy(() => TerminalsCreateNestedOneWithoutUsers_terminalsInputSchema)
}).strict();

export const Users_terminalsUncheckedCreateInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedCreateInput> = z.object({
  user_id: z.string(),
  terminal_id: z.string()
}).strict();

export const Users_terminalsUpdateInputSchema: z.ZodType<Prisma.Users_terminalsUpdateInput> = z.object({
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional(),
  terminals: z.lazy(() => TerminalsUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional()
}).strict();

export const Users_terminalsUncheckedUpdateInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_terminalsCreateManyInputSchema: z.ZodType<Prisma.Users_terminalsCreateManyInput> = z.object({
  user_id: z.string(),
  terminal_id: z.string()
}).strict();

export const Users_terminalsUpdateManyMutationInputSchema: z.ZodType<Prisma.Users_terminalsUpdateManyMutationInput> = z.object({
}).strict();

export const Users_terminalsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesCreateInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateInput> = z.object({
  users: z.lazy(() => UsersCreateNestedOneWithoutUsers_work_schedulesInputSchema),
  work_schedules: z.lazy(() => Work_schedulesCreateNestedOneWithoutUsers_work_schedulesInputSchema)
}).strict();

export const Users_work_schedulesUncheckedCreateInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedCreateInput> = z.object({
  user_id: z.string(),
  work_schedule_id: z.string()
}).strict();

export const Users_work_schedulesUpdateInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateInput> = z.object({
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional(),
  work_schedules: z.lazy(() => Work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional()
}).strict();

export const Users_work_schedulesUncheckedUpdateInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesCreateManyInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateManyInput> = z.object({
  user_id: z.string(),
  work_schedule_id: z.string()
}).strict();

export const Users_work_schedulesUpdateManyMutationInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateManyMutationInput> = z.object({
}).strict();

export const Users_work_schedulesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Work_schedule_entriesCreateInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const Work_schedule_entriesUncheckedCreateInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesUpdateInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedule_entriesUncheckedUpdateInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesCreateManyInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesUpdateManyMutationInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Api_tokensCreateInputSchema: z.ZodType<Prisma.Api_tokensCreateInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => OrganizationCreateNestedOneWithoutApi_tokens_organizationInputSchema)
}).strict();

export const Api_tokensUncheckedCreateInputSchema: z.ZodType<Prisma.Api_tokensUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Api_tokensUpdateInputSchema: z.ZodType<Prisma.Api_tokensUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => UsersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const Api_tokensUncheckedUpdateInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Api_tokensCreateManyInputSchema: z.ZodType<Prisma.Api_tokensCreateManyInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Api_tokensUpdateManyMutationInputSchema: z.ZodType<Prisma.Api_tokensUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Api_tokensUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TimesheetCreateInputSchema: z.ZodType<Prisma.TimesheetCreateInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  timesheet_users: z.lazy(() => UsersCreateNestedOneWithoutTimesheet_usersInputSchema)
}).strict();

export const TimesheetUncheckedCreateInputSchema: z.ZodType<Prisma.TimesheetUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const TimesheetUpdateInputSchema: z.ZodType<Prisma.TimesheetUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  timesheet_users: z.lazy(() => UsersUpdateOneRequiredWithoutTimesheet_usersNestedInputSchema).optional()
}).strict();

export const TimesheetUncheckedUpdateInputSchema: z.ZodType<Prisma.TimesheetUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimesheetCreateManyInputSchema: z.ZodType<Prisma.TimesheetCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const TimesheetUpdateManyMutationInputSchema: z.ZodType<Prisma.TimesheetUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimesheetUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TimesheetUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reportsCreateInputSchema: z.ZodType<Prisma.Scheduled_reportsCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema).optional()
}).strict();

export const Scheduled_reportsUncheckedCreateInputSchema: z.ZodType<Prisma.Scheduled_reportsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema).optional()
}).strict();

export const Scheduled_reportsUpdateInputSchema: z.ZodType<Prisma.Scheduled_reportsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema).optional()
}).strict();

export const Scheduled_reportsUncheckedUpdateInputSchema: z.ZodType<Prisma.Scheduled_reportsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema).optional()
}).strict();

export const Scheduled_reportsCreateManyInputSchema: z.ZodType<Prisma.Scheduled_reportsCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reportsUpdateManyMutationInputSchema: z.ZodType<Prisma.Scheduled_reportsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reportsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Scheduled_reportsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionCreateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_subscription_reports: z.lazy(() => Scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),
  scheduled_reports_subscription_users: z.lazy(() => UsersCreateNestedOneWithoutScheduled_reports_subscription_usersInputSchema)
}).strict();

export const Scheduled_reports_subscriptionUncheckedCreateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reports_subscriptionUpdateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_subscription_reports: z.lazy(() => Scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => UsersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionCreateManyInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateManyInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reports_subscriptionUpdateManyMutationInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UuidFilterSchema: z.ZodType<Prisma.UuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const UuidNullableFilterSchema: z.ZodType<Prisma.UuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UsersNullableRelationFilterSchema: z.ZodType<Prisma.UsersNullableRelationFilter> = z.object({
  is: z.lazy(() => UsersWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UsersWhereInputSchema).optional().nullable()
}).strict();

export const Roles_permissionsListRelationFilterSchema: z.ZodType<Prisma.Roles_permissionsListRelationFilter> = z.object({
  every: z.lazy(() => Roles_permissionsWhereInputSchema).optional(),
  some: z.lazy(() => Roles_permissionsWhereInputSchema).optional(),
  none: z.lazy(() => Roles_permissionsWhereInputSchema).optional()
}).strict();

export const Users_permissionsListRelationFilterSchema: z.ZodType<Prisma.Users_permissionsListRelationFilter> = z.object({
  every: z.lazy(() => Users_permissionsWhereInputSchema).optional(),
  some: z.lazy(() => Users_permissionsWhereInputSchema).optional(),
  none: z.lazy(() => Users_permissionsWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const Roles_permissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Roles_permissionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_permissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Users_permissionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PermissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.PermissionsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidWithAggregatesFilterSchema: z.ZodType<Prisma.UuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const UuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.UuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesListRelationFilterSchema: z.ZodType<Prisma.Users_rolesListRelationFilter> = z.object({
  every: z.lazy(() => Users_rolesWhereInputSchema).optional(),
  some: z.lazy(() => Users_rolesWhereInputSchema).optional(),
  none: z.lazy(() => Users_rolesWhereInputSchema).optional()
}).strict();

export const Users_rolesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Users_rolesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolesCountOrderByAggregateInputSchema: z.ZodType<Prisma.RolesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.RolesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolesMinOrderByAggregateInputSchema: z.ZodType<Prisma.RolesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const PermissionsRelationFilterSchema: z.ZodType<Prisma.PermissionsRelationFilter> = z.object({
  is: z.lazy(() => PermissionsWhereInputSchema).optional(),
  isNot: z.lazy(() => PermissionsWhereInputSchema).optional()
}).strict();

export const RolesRelationFilterSchema: z.ZodType<Prisma.RolesRelationFilter> = z.object({
  is: z.lazy(() => RolesWhereInputSchema).optional(),
  isNot: z.lazy(() => RolesWhereInputSchema).optional()
}).strict();

export const Roles_permissionsRole_idPermission_idCompoundUniqueInputSchema: z.ZodType<Prisma.Roles_permissionsRole_idPermission_idCompoundUniqueInput> = z.object({
  role_id: z.string(),
  permission_id: z.string()
}).strict();

export const Roles_permissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Roles_permissionsCountOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Roles_permissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Roles_permissionsMaxOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Roles_permissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Roles_permissionsMinOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumuser_statusFilterSchema: z.ZodType<Prisma.Enumuser_statusFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const PermissionsListRelationFilterSchema: z.ZodType<Prisma.PermissionsListRelationFilter> = z.object({
  every: z.lazy(() => PermissionsWhereInputSchema).optional(),
  some: z.lazy(() => PermissionsWhereInputSchema).optional(),
  none: z.lazy(() => PermissionsWhereInputSchema).optional()
}).strict();

export const RolesListRelationFilterSchema: z.ZodType<Prisma.RolesListRelationFilter> = z.object({
  every: z.lazy(() => RolesWhereInputSchema).optional(),
  some: z.lazy(() => RolesWhereInputSchema).optional(),
  none: z.lazy(() => RolesWhereInputSchema).optional()
}).strict();

export const OrganizationListRelationFilterSchema: z.ZodType<Prisma.OrganizationListRelationFilter> = z.object({
  every: z.lazy(() => OrganizationWhereInputSchema).optional(),
  some: z.lazy(() => OrganizationWhereInputSchema).optional(),
  none: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const Work_schedulesListRelationFilterSchema: z.ZodType<Prisma.Work_schedulesListRelationFilter> = z.object({
  every: z.lazy(() => Work_schedulesWhereInputSchema).optional(),
  some: z.lazy(() => Work_schedulesWhereInputSchema).optional(),
  none: z.lazy(() => Work_schedulesWhereInputSchema).optional()
}).strict();

export const Users_terminalsListRelationFilterSchema: z.ZodType<Prisma.Users_terminalsListRelationFilter> = z.object({
  every: z.lazy(() => Users_terminalsWhereInputSchema).optional(),
  some: z.lazy(() => Users_terminalsWhereInputSchema).optional(),
  none: z.lazy(() => Users_terminalsWhereInputSchema).optional()
}).strict();

export const Users_work_schedulesListRelationFilterSchema: z.ZodType<Prisma.Users_work_schedulesListRelationFilter> = z.object({
  every: z.lazy(() => Users_work_schedulesWhereInputSchema).optional(),
  some: z.lazy(() => Users_work_schedulesWhereInputSchema).optional(),
  none: z.lazy(() => Users_work_schedulesWhereInputSchema).optional()
}).strict();

export const Work_schedule_entriesListRelationFilterSchema: z.ZodType<Prisma.Work_schedule_entriesListRelationFilter> = z.object({
  every: z.lazy(() => Work_schedule_entriesWhereInputSchema).optional(),
  some: z.lazy(() => Work_schedule_entriesWhereInputSchema).optional(),
  none: z.lazy(() => Work_schedule_entriesWhereInputSchema).optional()
}).strict();

export const Api_tokensListRelationFilterSchema: z.ZodType<Prisma.Api_tokensListRelationFilter> = z.object({
  every: z.lazy(() => Api_tokensWhereInputSchema).optional(),
  some: z.lazy(() => Api_tokensWhereInputSchema).optional(),
  none: z.lazy(() => Api_tokensWhereInputSchema).optional()
}).strict();

export const TimesheetListRelationFilterSchema: z.ZodType<Prisma.TimesheetListRelationFilter> = z.object({
  every: z.lazy(() => TimesheetWhereInputSchema).optional(),
  some: z.lazy(() => TimesheetWhereInputSchema).optional(),
  none: z.lazy(() => TimesheetWhereInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionListRelationFilterSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionListRelationFilter> = z.object({
  every: z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).optional(),
  some: z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).optional(),
  none: z.lazy(() => Scheduled_reports_subscriptionWhereInputSchema).optional()
}).strict();

export const SessionsListRelationFilterSchema: z.ZodType<Prisma.SessionsListRelationFilter> = z.object({
  every: z.lazy(() => SessionsWhereInputSchema).optional(),
  some: z.lazy(() => SessionsWhereInputSchema).optional(),
  none: z.lazy(() => SessionsWhereInputSchema).optional()
}).strict();

export const PermissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PermissionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const RolesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.RolesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.OrganizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedulesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Work_schedulesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_terminalsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Users_terminalsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_work_schedulesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Users_work_schedulesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedule_entriesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Work_schedule_entriesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Api_tokensOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Api_tokensOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimesheetOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TimesheetOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersCountOrderByAggregateInputSchema: z.ZodType<Prisma.UsersCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  login: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.lazy(() => SortOrderSchema).optional(),
  last_name: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  salt: z.lazy(() => SortOrderSchema).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.lazy(() => SortOrderSchema).optional(),
  card_number: z.lazy(() => SortOrderSchema).optional(),
  birth_date: z.lazy(() => SortOrderSchema).optional(),
  car_model: z.lazy(() => SortOrderSchema).optional(),
  car_number: z.lazy(() => SortOrderSchema).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  fcm_token: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  doc_files: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.lazy(() => SortOrderSchema).optional(),
  app_version: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.lazy(() => SortOrderSchema).optional(),
  tg_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UsersAvgOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  login: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.lazy(() => SortOrderSchema).optional(),
  last_name: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  salt: z.lazy(() => SortOrderSchema).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.lazy(() => SortOrderSchema).optional(),
  card_number: z.lazy(() => SortOrderSchema).optional(),
  birth_date: z.lazy(() => SortOrderSchema).optional(),
  car_model: z.lazy(() => SortOrderSchema).optional(),
  car_number: z.lazy(() => SortOrderSchema).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  fcm_token: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.lazy(() => SortOrderSchema).optional(),
  app_version: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.lazy(() => SortOrderSchema).optional(),
  tg_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersMinOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  login: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.lazy(() => SortOrderSchema).optional(),
  last_name: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  salt: z.lazy(() => SortOrderSchema).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.lazy(() => SortOrderSchema).optional(),
  card_number: z.lazy(() => SortOrderSchema).optional(),
  birth_date: z.lazy(() => SortOrderSchema).optional(),
  car_model: z.lazy(() => SortOrderSchema).optional(),
  car_number: z.lazy(() => SortOrderSchema).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  fcm_token: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.lazy(() => SortOrderSchema).optional(),
  app_version: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.lazy(() => SortOrderSchema).optional(),
  tg_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersSumOrderByAggregateInputSchema: z.ZodType<Prisma.UsersSumOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumuser_statusWithAggregatesFilterSchema: z.ZodType<Prisma.Enumuser_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_statusFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const UsersRelationFilterSchema: z.ZodType<Prisma.UsersRelationFilter> = z.object({
  is: z.lazy(() => UsersWhereInputSchema).optional(),
  isNot: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const SessionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  device_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  device_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  user_agent: z.lazy(() => SortOrderSchema).optional(),
  device_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_permissionsUser_idPermission_idCompoundUniqueInputSchema: z.ZodType<Prisma.Users_permissionsUser_idPermission_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  permission_id: z.string()
}).strict();

export const Users_permissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Users_permissionsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_permissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Users_permissionsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_permissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Users_permissionsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_rolesUser_idRole_idCompoundUniqueInputSchema: z.ZodType<Prisma.Users_rolesUser_idRole_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  role_id: z.string()
}).strict();

export const Users_rolesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Users_rolesCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_rolesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Users_rolesMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_rolesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Users_rolesMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const OrganizationRelationFilterSchema: z.ZodType<Prisma.OrganizationRelationFilter> = z.object({
  is: z.lazy(() => OrganizationWhereInputSchema).optional(),
  isNot: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const Work_schedulesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedulesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedulesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedulesAvgOrderByAggregateInput> = z.object({
  bonus_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedulesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedulesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedulesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedulesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedulesSumOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedulesSumOrderByAggregateInput> = z.object({
  bonus_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const TerminalsCountOrderByAggregateInputSchema: z.ZodType<Prisma.TerminalsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TerminalsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.TerminalsAvgOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TerminalsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TerminalsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TerminalsMinOrderByAggregateInputSchema: z.ZodType<Prisma.TerminalsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TerminalsSumOrderByAggregateInputSchema: z.ZodType<Prisma.TerminalsSumOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumorganization_system_typeFilterSchema: z.ZodType<Prisma.Enumorganization_system_typeFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeFilterSchema) ]).optional(),
}).strict();

export const Enumorganization_payment_typesFilterSchema: z.ZodType<Prisma.Enumorganization_payment_typesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesFilterSchema) ]).optional(),
}).strict();

export const TerminalsListRelationFilterSchema: z.ZodType<Prisma.TerminalsListRelationFilter> = z.object({
  every: z.lazy(() => TerminalsWhereInputSchema).optional(),
  some: z.lazy(() => TerminalsWhereInputSchema).optional(),
  none: z.lazy(() => TerminalsWhereInputSchema).optional()
}).strict();

export const TerminalsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TerminalsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.lazy(() => SortOrderSchema).optional(),
  webhook: z.lazy(() => SortOrderSchema).optional(),
  group_id: z.lazy(() => SortOrderSchema).optional(),
  apelsin_login: z.lazy(() => SortOrderSchema).optional(),
  apelsin_password: z.lazy(() => SortOrderSchema).optional(),
  sender_name: z.lazy(() => SortOrderSchema).optional(),
  sender_number: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.lazy(() => SortOrderSchema).optional(),
  icon_url: z.lazy(() => SortOrderSchema).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationAvgOrderByAggregateInput> = z.object({
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.lazy(() => SortOrderSchema).optional(),
  webhook: z.lazy(() => SortOrderSchema).optional(),
  group_id: z.lazy(() => SortOrderSchema).optional(),
  apelsin_login: z.lazy(() => SortOrderSchema).optional(),
  apelsin_password: z.lazy(() => SortOrderSchema).optional(),
  sender_name: z.lazy(() => SortOrderSchema).optional(),
  sender_number: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.lazy(() => SortOrderSchema).optional(),
  icon_url: z.lazy(() => SortOrderSchema).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.lazy(() => SortOrderSchema).optional(),
  webhook: z.lazy(() => SortOrderSchema).optional(),
  group_id: z.lazy(() => SortOrderSchema).optional(),
  apelsin_login: z.lazy(() => SortOrderSchema).optional(),
  apelsin_password: z.lazy(() => SortOrderSchema).optional(),
  sender_name: z.lazy(() => SortOrderSchema).optional(),
  sender_number: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.lazy(() => SortOrderSchema).optional(),
  icon_url: z.lazy(() => SortOrderSchema).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const OrganizationSumOrderByAggregateInputSchema: z.ZodType<Prisma.OrganizationSumOrderByAggregateInput> = z.object({
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumorganization_system_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumorganization_system_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional()
}).strict();

export const Enumorganization_payment_typesWithAggregatesFilterSchema: z.ZodType<Prisma.Enumorganization_payment_typesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional()
}).strict();

export const TerminalsRelationFilterSchema: z.ZodType<Prisma.TerminalsRelationFilter> = z.object({
  is: z.lazy(() => TerminalsWhereInputSchema).optional(),
  isNot: z.lazy(() => TerminalsWhereInputSchema).optional()
}).strict();

export const Users_terminalsUser_idTerminal_idCompoundUniqueInputSchema: z.ZodType<Prisma.Users_terminalsUser_idTerminal_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  terminal_id: z.string()
}).strict();

export const Users_terminalsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Users_terminalsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_terminalsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Users_terminalsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_terminalsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Users_terminalsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedulesRelationFilterSchema: z.ZodType<Prisma.Work_schedulesRelationFilter> = z.object({
  is: z.lazy(() => Work_schedulesWhereInputSchema).optional(),
  isNot: z.lazy(() => Work_schedulesWhereInputSchema).optional()
}).strict();

export const Users_work_schedulesUser_idWork_schedule_idCompoundUniqueInputSchema: z.ZodType<Prisma.Users_work_schedulesUser_idWork_schedule_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  work_schedule_id: z.string()
}).strict();

export const Users_work_schedulesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Users_work_schedulesCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_work_schedulesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Users_work_schedulesMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Users_work_schedulesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Users_work_schedulesMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumwork_schedule_entry_statusFilterSchema: z.ZodType<Prisma.Enumwork_schedule_entry_statusFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema) ]).optional(),
}).strict();

export const Work_schedule_entriesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedule_entriesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.lazy(() => SortOrderSchema).optional(),
  ip_close: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedule_entriesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedule_entriesAvgOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedule_entriesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedule_entriesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.lazy(() => SortOrderSchema).optional(),
  ip_close: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedule_entriesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedule_entriesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.lazy(() => SortOrderSchema).optional(),
  ip_close: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedule_entriesSumOrderByAggregateInputSchema: z.ZodType<Prisma.Work_schedule_entriesSumOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumwork_schedule_entry_statusWithAggregatesFilterSchema: z.ZodType<Prisma.Enumwork_schedule_entry_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional()
}).strict();

export const Api_tokensCountOrderByAggregateInputSchema: z.ZodType<Prisma.Api_tokensCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Api_tokensMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Api_tokensMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Api_tokensMinOrderByAggregateInputSchema: z.ZodType<Prisma.Api_tokensMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimesheetCountOrderByAggregateInputSchema: z.ZodType<Prisma.TimesheetCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimesheetMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TimesheetMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TimesheetMinOrderByAggregateInputSchema: z.ZodType<Prisma.TimesheetMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reportsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Scheduled_reportsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reportsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Scheduled_reportsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reportsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Scheduled_reportsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reportsRelationFilterSchema: z.ZodType<Prisma.Scheduled_reportsRelationFilter> = z.object({
  is: z.lazy(() => Scheduled_reportsWhereInputSchema).optional(),
  isNot: z.lazy(() => Scheduled_reportsWhereInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionCountOrderByAggregateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionMinOrderByAggregateInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutPermissions_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Roles_permissionsCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const UsersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const Roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutRoles_roles_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_roles_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutRoles_roles_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Roles_permissionsCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UsersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutRoles_roles_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_roles_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutRoles_roles_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutRoles_roles_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const Roles_permissionsUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const PermissionsCreateNestedOneWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateNestedOneWithoutRoles_permissionsInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional()
}).strict();

export const RolesCreateNestedOneWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesCreateNestedOneWithoutRoles_permissionsInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => RolesWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]).optional(),
}).strict();

export const PermissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema: z.ZodType<Prisma.PermissionsUpdateOneRequiredWithoutRoles_permissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  upsert: z.lazy(() => PermissionsUpsertWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PermissionsUpdateToOneWithWhereWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutRoles_permissionsInputSchema) ]).optional(),
}).strict();

export const RolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema: z.ZodType<Prisma.RolesUpdateOneRequiredWithoutRoles_permissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  upsert: z.lazy(() => RolesUpsertWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => RolesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RolesUpdateToOneWithWhereWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutRoles_permissionsInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersCreatedoc_filesInputSchema: z.ZodType<Prisma.UsersCreatedoc_filesInput> = z.object({
  set: z.string().array()
}).strict();

export const PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesCreateNestedManyWithoutUsers_roles_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutOrganization_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_terminalsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_work_schedulesCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetCreateNestedManyWithoutTimesheet_usersInput> = z.object({
  create: z.union([ z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionsCreateNestedManyWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsCreateNestedManyWithoutUsers_sessionsInput> = z.object({
  create: z.union([ z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema).array(),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionsCreateManyUsers_sessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInput> = z.object({
  create: z.union([ z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInput> = z.object({
  create: z.union([ z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema).array(),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionsCreateManyUsers_sessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumuser_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumuser_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => user_statusSchema).optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const UsersUpdatedoc_filesInputSchema: z.ZodType<Prisma.UsersUpdatedoc_filesInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionsScalarWhereInputSchema),z.lazy(() => PermissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionsScalarWhereInputSchema),z.lazy(() => PermissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema: z.ZodType<Prisma.RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolesScalarWhereInputSchema),z.lazy(() => RolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema: z.ZodType<Prisma.RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolesScalarWhereInputSchema),z.lazy(() => RolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_terminalsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Users_terminalsUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_terminalsScalarWhereInputSchema),z.lazy(() => Users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_work_schedulesScalarWhereInputSchema),z.lazy(() => Users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema: z.ZodType<Prisma.Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema: z.ZodType<Prisma.TimesheetUpdateManyWithoutTimesheet_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimesheetScalarWhereInputSchema),z.lazy(() => TimesheetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema: z.ZodType<Prisma.SessionsUpdateManyWithoutUsers_sessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema).array(),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsers_sessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionsCreateManyUsers_sessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsers_sessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionsUpdateManyWithWhereWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUpdateManyWithWhereWithoutUsers_sessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionsScalarWhereInputSchema),z.lazy(() => SessionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionsScalarWhereInputSchema),z.lazy(() => PermissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PermissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PermissionsWhereUniqueInputSchema),z.lazy(() => PermissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PermissionsScalarWhereInputSchema),z.lazy(() => PermissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolesScalarWhereInputSchema),z.lazy(() => RolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => RolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => RolesWhereUniqueInputSchema),z.lazy(() => RolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => RolesScalarWhereInputSchema),z.lazy(() => RolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Roles_permissionsWhereUniqueInputSchema),z.lazy(() => Roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_permissionsWhereUniqueInputSchema),z.lazy(() => Users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_rolesWhereUniqueInputSchema),z.lazy(() => Users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => OrganizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => OrganizationWhereUniqueInputSchema),z.lazy(() => OrganizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_terminalsScalarWhereInputSchema),z.lazy(() => Users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_work_schedulesScalarWhereInputSchema),z.lazy(() => Users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema: z.ZodType<Prisma.TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TimesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TimesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TimesheetWhereUniqueInputSchema),z.lazy(() => TimesheetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TimesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TimesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TimesheetScalarWhereInputSchema),z.lazy(() => TimesheetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema).array(),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsCreateOrConnectWithoutUsers_sessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUpsertWithWhereUniqueWithoutUsers_sessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionsCreateManyUsers_sessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionsWhereUniqueInputSchema),z.lazy(() => SessionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUpdateWithWhereUniqueWithoutUsers_sessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionsUpdateManyWithWhereWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUpdateManyWithWhereWithoutUsers_sessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionsScalarWhereInputSchema),z.lazy(() => SessionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutSessionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutSessionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UsersUpdateWithoutSessionsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const PermissionsCreateNestedOneWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateNestedOneWithoutUsers_permissionsInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]).optional(),
}).strict();

export const PermissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema: z.ZodType<Prisma.PermissionsUpdateOneRequiredWithoutUsers_permissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PermissionsCreateOrConnectWithoutUsers_permissionsInputSchema).optional(),
  upsert: z.lazy(() => PermissionsUpsertWithoutUsers_permissionsInputSchema).optional(),
  connect: z.lazy(() => PermissionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PermissionsUpdateToOneWithWhereWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUpdateWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutUsers_permissionsInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const RolesCreateNestedOneWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesCreateNestedOneWithoutUsers_rolesInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_rolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutUsers_rolesInputSchema).optional(),
  connect: z.lazy(() => RolesWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]).optional(),
}).strict();

export const RolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema: z.ZodType<Prisma.RolesUpdateOneRequiredWithoutUsers_rolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_rolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => RolesCreateOrConnectWithoutUsers_rolesInputSchema).optional(),
  upsert: z.lazy(() => RolesUpsertWithoutUsers_rolesInputSchema).optional(),
  connect: z.lazy(() => RolesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => RolesUpdateToOneWithWhereWithoutUsers_rolesInputSchema),z.lazy(() => RolesUpdateWithoutUsers_rolesInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutUsers_rolesInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_roles_usersTousers_roles_user_idInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]).optional(),
}).strict();

export const Work_schedulesCreatedaysInputSchema: z.ZodType<Prisma.Work_schedulesCreatedaysInput> = z.object({
  set: z.string().array()
}).strict();

export const OrganizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutWork_schedules_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutWork_schedules_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateNestedManyWithoutWork_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUpdatedaysInputSchema: z.ZodType<Prisma.Work_schedulesUpdatedaysInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const OrganizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutWork_schedules_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutWork_schedules_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutWork_schedules_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutWork_schedules_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateManyWithoutWork_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_work_schedulesScalarWhereInputSchema),z.lazy(() => Users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),z.lazy(() => Users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_work_schedulesScalarWhereInputSchema),z.lazy(() => Users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const OrganizationCreateNestedOneWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutTerminals_organization_idTorganizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTerminals_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const Users_terminalsCreateNestedManyWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsCreateNestedManyWithoutTerminalsInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Users_terminalsUncheckedCreateNestedManyWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedCreateNestedManyWithoutTerminalsInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutTerminals_organization_idTorganizationInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutTerminals_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUpdateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema) ]).optional(),
}).strict();

export const Users_terminalsUpdateManyWithoutTerminalsNestedInputSchema: z.ZodType<Prisma.Users_terminalsUpdateManyWithoutTerminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_terminalsScalarWhereInputSchema),z.lazy(() => Users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Users_terminalsWhereUniqueInputSchema),z.lazy(() => Users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Users_terminalsScalarWhereInputSchema),z.lazy(() => Users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutOrganization_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutOrganization_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutOrganization_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const TerminalsCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TerminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensCreateNestedManyWithoutApi_tokens_organizationInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TerminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TerminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumorganization_system_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumorganization_system_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => organization_system_typeSchema).optional()
}).strict();

export const Enumorganization_payment_typesFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumorganization_payment_typesFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => organization_payment_typesSchema).optional()
}).strict();

export const Work_schedulesUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Work_schedulesUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UsersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutOrganization_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutOrganization_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutOrganization_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutOrganization_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutOrganization_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const TerminalsUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.TerminalsUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TerminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TerminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TerminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TerminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TerminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TerminalsUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => TerminalsUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TerminalsScalarWhereInputSchema),z.lazy(() => TerminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema: z.ZodType<Prisma.Api_tokensUpdateManyWithoutApi_tokens_organizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Work_schedulesWhereUniqueInputSchema),z.lazy(() => Work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TerminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.TerminalsUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => TerminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TerminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TerminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TerminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TerminalsWhereUniqueInputSchema),z.lazy(() => TerminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TerminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => TerminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TerminalsUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => TerminalsUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TerminalsScalarWhereInputSchema),z.lazy(() => TerminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Api_tokensWhereUniqueInputSchema),z.lazy(() => Api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_terminalsInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const TerminalsCreateNestedOneWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsCreateNestedOneWithoutUsers_terminalsInput> = z.object({
  create: z.union([ z.lazy(() => TerminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TerminalsCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => TerminalsWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutUsers_terminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_terminalsInputSchema) ]).optional(),
}).strict();

export const TerminalsUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema: z.ZodType<Prisma.TerminalsUpdateOneRequiredWithoutUsers_terminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TerminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TerminalsCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  upsert: z.lazy(() => TerminalsUpsertWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => TerminalsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TerminalsUpdateToOneWithWhereWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUncheckedUpdateWithoutUsers_terminalsInputSchema) ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUsers_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Work_schedulesCreateNestedOneWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesCreateNestedOneWithoutUsers_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Work_schedulesCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => Work_schedulesWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutUsers_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]).optional(),
}).strict();

export const Work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema: z.ZodType<Prisma.Work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Work_schedulesCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  upsert: z.lazy(() => Work_schedulesUpsertWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => Work_schedulesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutWork_schedule_entries_usersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => Work_schedulesWhereUniqueInputSchema).optional()
}).strict();

export const Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumwork_schedule_entry_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => work_schedule_entry_statusSchema).optional()
}).strict();

export const UsersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutWork_schedule_entries_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]).optional(),
}).strict();

export const Work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema: z.ZodType<Prisma.Work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).optional(),
  upsert: z.lazy(() => Work_schedulesUpsertWithoutWork_schedule_entries_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => Work_schedulesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Work_schedulesUpdateToOneWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutApi_tokens_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutApi_tokens_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const OrganizationCreateNestedOneWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationCreateNestedOneWithoutApi_tokens_organizationInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutApi_tokens_organizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutApi_tokens_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutApi_tokens_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutApi_tokens_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => UsersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const OrganizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema: z.ZodType<Prisma.OrganizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => OrganizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => OrganizationCreateOrConnectWithoutApi_tokens_organizationInputSchema).optional(),
  upsert: z.lazy(() => OrganizationUpsertWithoutApi_tokens_organizationInputSchema).optional(),
  connect: z.lazy(() => OrganizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => OrganizationUpdateToOneWithWhereWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]).optional(),
}).strict();

export const UsersCreateNestedOneWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutTimesheet_usersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutTimesheet_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutTimesheet_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const UsersUpdateOneRequiredWithoutTimesheet_usersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutTimesheet_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutTimesheet_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutTimesheet_usersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutTimesheet_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutTimesheet_usersInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_reportsInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_reportsInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema).optional(),
  connect: z.lazy(() => Scheduled_reportsWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutScheduled_reports_subscription_usersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInputSchema: z.ZodType<Prisma.Scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema).optional(),
  upsert: z.lazy(() => Scheduled_reportsUpsertWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema).optional(),
  connect: z.lazy(() => Scheduled_reportsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Scheduled_reportsUpdateToOneWithWhereWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateToOneWithWhereWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]).optional(),
}).strict();

export const NestedUuidFilterSchema: z.ZodType<Prisma.NestedUuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableFilterSchema: z.ZodType<Prisma.NestedUuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedUuidWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedUuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedEnumuser_statusFilterSchema: z.ZodType<Prisma.NestedEnumuser_statusFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumuser_statusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumuser_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_statusFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedEnumorganization_system_typeFilterSchema: z.ZodType<Prisma.NestedEnumorganization_system_typeFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumorganization_payment_typesFilterSchema: z.ZodType<Prisma.NestedEnumorganization_payment_typesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesFilterSchema) ]).optional(),
}).strict();

export const NestedEnumorganization_system_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumorganization_system_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional()
}).strict();

export const NestedEnumorganization_payment_typesWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumorganization_payment_typesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional()
}).strict();

export const NestedEnumwork_schedule_entry_statusFilterSchema: z.ZodType<Prisma.NestedEnumwork_schedule_entry_statusFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumwork_schedule_entry_statusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumwork_schedule_entry_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional()
}).strict();

export const UsersCreateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutPermissions_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
}).strict();

export const UsersCreateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsCreateWithoutPermissionsInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  roles: z.lazy(() => RolesCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateWithoutPermissionsInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const Roles_permissionsCreateManyPermissionsInputEnvelopeSchema: z.ZodType<Prisma.Roles_permissionsCreateManyPermissionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Roles_permissionsCreateManyPermissionsInputSchema),z.lazy(() => Roles_permissionsCreateManyPermissionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_permissionsCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsCreateWithoutPermissionsInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const Users_permissionsUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateWithoutPermissionsInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const Users_permissionsCreateManyPermissionsInputEnvelopeSchema: z.ZodType<Prisma.Users_permissionsCreateManyPermissionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_permissionsCreateManyPermissionsInputSchema),z.lazy(() => Users_permissionsCreateManyPermissionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UsersUpsertWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutPermissions_permissions_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutPermissions_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const Roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema) ]),
}).strict();

export const Roles_permissionsScalarWhereInputSchema: z.ZodType<Prisma.Roles_permissionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Roles_permissionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Roles_permissionsScalarWhereInputSchema),z.lazy(() => Roles_permissionsScalarWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUpsertWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const Users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const Users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => Users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateManyMutationInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema) ]),
}).strict();

export const Users_permissionsScalarWhereInputSchema: z.ZodType<Prisma.Users_permissionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_permissionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_permissionsScalarWhereInputSchema),z.lazy(() => Users_permissionsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UsersCreateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutRoles_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]),
}).strict();

export const UsersCreateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutRoles_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsCreateWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsCreateWithoutRolesInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateWithoutRolesInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const Roles_permissionsCreateManyRolesInputEnvelopeSchema: z.ZodType<Prisma.Roles_permissionsCreateManyRolesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Roles_permissionsCreateManyRolesInputSchema),z.lazy(() => Roles_permissionsCreateManyRolesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_rolesCreateWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesCreateWithoutRolesInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const Users_rolesUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateWithoutRolesInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const Users_rolesCreateManyRolesInputEnvelopeSchema: z.ZodType<Prisma.Users_rolesCreateManyRolesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_rolesCreateManyRolesInputSchema),z.lazy(() => Users_rolesCreateManyRolesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UsersUpsertWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutRoles_roles_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutRoles_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutRoles_roles_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutRoles_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const Roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUpsertWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutRolesInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => Roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutRolesInputSchema) ]),
}).strict();

export const Users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUpsertWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const Users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateWithoutRolesInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const Users_rolesUpdateManyWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => Users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateManyMutationInputSchema),z.lazy(() => Users_rolesUncheckedUpdateManyWithoutRolesInputSchema) ]),
}).strict();

export const Users_rolesScalarWhereInputSchema: z.ZodType<Prisma.Users_rolesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_rolesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_rolesScalarWhereInputSchema),z.lazy(() => Users_rolesScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UsersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const PermissionsCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsUncheckedCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsCreateOrConnectWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateOrConnectWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const RolesCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesUncheckedCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesUncheckedCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_roles: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesCreateOrConnectWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesCreateOrConnectWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const UsersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpsertWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const PermissionsUpsertWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpsertWithoutRoles_permissionsInput> = z.object({
  update: z.union([ z.lazy(() => PermissionsUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
  where: z.lazy(() => PermissionsWhereInputSchema).optional()
}).strict();

export const PermissionsUpdateToOneWithWhereWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpdateToOneWithWhereWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => PermissionsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PermissionsUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const PermissionsUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsUncheckedUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const RolesUpsertWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesUpsertWithoutRoles_permissionsInput> = z.object({
  update: z.union([ z.lazy(() => RolesUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
  create: z.union([ z.lazy(() => RolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
  where: z.lazy(() => RolesWhereInputSchema).optional()
}).strict();

export const RolesUpdateToOneWithWhereWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesUpdateToOneWithWhereWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => RolesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RolesUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const RolesUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesUncheckedUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_roles: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const PermissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.PermissionsCreateManyUsers_permissions_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PermissionsCreateManyUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsCreateManyUsers_permissions_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const PermissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.PermissionsCreateManyUsers_permissions_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => PermissionsCreateManyUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsCreateManyUsers_permissions_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RolesCreateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesCreateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedCreateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesCreateOrConnectWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const RolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.RolesCreateManyUsers_roles_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RolesCreateManyUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesCreateManyUsers_roles_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const RolesCreateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesCreateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesCreateOrConnectWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const RolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.RolesCreateManyUsers_roles_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => RolesCreateManyUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesCreateManyUsers_roles_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  roles: z.lazy(() => RolesCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  roles: z.lazy(() => RolesCreateNestedOneWithoutRoles_permissionsInputSchema)
}).strict();

export const Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema: z.ZodType<Prisma.Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema: z.ZodType<Prisma.Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  permissions: z.lazy(() => PermissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional()
}).strict();

export const Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema: z.ZodType<Prisma.Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  roles: z.lazy(() => RolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const Users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema: z.ZodType<Prisma.Users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_created_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  roles: z.lazy(() => RolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_user_id: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema: z.ZodType<Prisma.Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  roles: z.lazy(() => RolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional()
}).strict();

export const Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const Users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema: z.ZodType<Prisma.Users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesCreateManyUsers_usersTousers_roles_user_idInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const OrganizationCreateManyOrganization_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyOrganization_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationCreateManyOrganization_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const OrganizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.OrganizationCreateManyOrganization_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => OrganizationCreateManyOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationCreateManyOrganization_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Work_schedulesCreateManyWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesCreateManyWork_schedules_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Work_schedulesCreateManyWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesCreateManyWork_schedules_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_terminalsCreateWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsCreateWithoutUsersInput> = z.object({
  terminals: z.lazy(() => TerminalsCreateNestedOneWithoutUsers_terminalsInputSchema)
}).strict();

export const Users_terminalsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedCreateWithoutUsersInput> = z.object({
  terminal_id: z.string()
}).strict();

export const Users_terminalsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_terminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Users_terminalsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.Users_terminalsCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_terminalsCreateManyUsersInputSchema),z.lazy(() => Users_terminalsCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Users_work_schedulesCreateWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateWithoutUsersInput> = z.object({
  work_schedules: z.lazy(() => Work_schedulesCreateNestedOneWithoutUsers_work_schedulesInputSchema)
}).strict();

export const Users_work_schedulesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedCreateWithoutUsersInput> = z.object({
  work_schedule_id: z.string()
}).strict();

export const Users_work_schedulesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Users_work_schedulesCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.Users_work_schedulesCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_work_schedulesCreateManyUsersInputSchema),z.lazy(() => Users_work_schedulesCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_usersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => OrganizationCreateNestedOneWithoutApi_tokens_organizationInputSchema)
}).strict();

export const Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const Api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Api_tokensCreateManyApi_tokens_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Api_tokensCreateManyApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensCreateManyApi_tokens_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => OrganizationCreateNestedOneWithoutApi_tokens_organizationInputSchema)
}).strict();

export const Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const Api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.Api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Api_tokensCreateManyApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensCreateManyApi_tokens_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TimesheetCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUncheckedCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const TimesheetCreateOrConnectWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetCreateOrConnectWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => TimesheetWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const TimesheetCreateManyTimesheet_usersInputEnvelopeSchema: z.ZodType<Prisma.TimesheetCreateManyTimesheet_usersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TimesheetCreateManyTimesheet_usersInputSchema),z.lazy(() => TimesheetCreateManyTimesheet_usersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_subscription_reports: z.lazy(() => Scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema)
}).strict();

export const Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionsCreateWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsCreateWithoutUsers_sessionsInput> = z.object({
  id: z.string().optional(),
  user_agent: z.string(),
  device_name: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const SessionsUncheckedCreateWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUncheckedCreateWithoutUsers_sessionsInput> = z.object({
  id: z.string().optional(),
  user_agent: z.string(),
  device_name: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const SessionsCreateOrConnectWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsCreateOrConnectWithoutUsers_sessionsInput> = z.object({
  where: z.lazy(() => SessionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema) ]),
}).strict();

export const SessionsCreateManyUsers_sessionsInputEnvelopeSchema: z.ZodType<Prisma.SessionsCreateManyUsers_sessionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionsCreateManyUsers_sessionsInputSchema),z.lazy(() => SessionsCreateManyUsers_sessionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PermissionsUpdateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PermissionsUpdateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const PermissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PermissionsUpdateManyMutationInputSchema),z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const PermissionsScalarWhereInputSchema: z.ZodType<Prisma.PermissionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PermissionsScalarWhereInputSchema),z.lazy(() => PermissionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PermissionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PermissionsScalarWhereInputSchema),z.lazy(() => PermissionsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PermissionsUpdateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PermissionsUpdateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const PermissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => PermissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PermissionsUpdateManyMutationInputSchema),z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const RolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RolesUpdateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutUsers_roles_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const RolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RolesUpdateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const RolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => RolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RolesUpdateManyMutationInputSchema),z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const RolesScalarWhereInputSchema: z.ZodType<Prisma.RolesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => RolesScalarWhereInputSchema),z.lazy(() => RolesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => RolesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => RolesScalarWhereInputSchema),z.lazy(() => RolesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const RolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => RolesUpdateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const RolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => RolesUpdateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const RolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => RolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => RolesUpdateManyMutationInputSchema),z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => Roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => Users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateManyMutationInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => Users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateManyMutationInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => Users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => Users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => Users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_permissionsUpdateManyMutationInputSchema),z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => Users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateManyMutationInputSchema),z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => Users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateManyMutationInputSchema),z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => Users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => Users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => Users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_rolesUpdateManyMutationInputSchema),z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const OrganizationScalarWhereInputSchema: z.ZodType<Prisma.OrganizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => OrganizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => OrganizationScalarWhereInputSchema),z.lazy(() => OrganizationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const OrganizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const OrganizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const OrganizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => OrganizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => OrganizationUpdateManyMutationInputSchema),z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Work_schedulesUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Work_schedulesUpdateManyMutationInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesScalarWhereInputSchema: z.ZodType<Prisma.Work_schedulesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedulesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedulesScalarWhereInputSchema),z.lazy(() => Work_schedulesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Work_schedulesUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Work_schedulesUpdateManyMutationInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const Users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_terminalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_terminalsUpdateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_terminalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_terminalsUpdateWithoutUsersInputSchema),z.lazy(() => Users_terminalsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const Users_terminalsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_terminalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_terminalsUpdateManyMutationInputSchema),z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const Users_terminalsScalarWhereInputSchema: z.ZodType<Prisma.Users_terminalsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_terminalsScalarWhereInputSchema),z.lazy(() => Users_terminalsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_terminalsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_terminalsScalarWhereInputSchema),z.lazy(() => Users_terminalsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const Users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_work_schedulesUpdateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_work_schedulesUpdateWithoutUsersInputSchema),z.lazy(() => Users_work_schedulesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const Users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => Users_work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_work_schedulesUpdateManyMutationInputSchema),z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const Users_work_schedulesScalarWhereInputSchema: z.ZodType<Prisma.Users_work_schedulesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Users_work_schedulesScalarWhereInputSchema),z.lazy(() => Users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Users_work_schedulesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Users_work_schedulesScalarWhereInputSchema),z.lazy(() => Users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesScalarWhereInputSchema: z.ZodType<Prisma.Work_schedule_entriesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),z.lazy(() => Work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Api_tokensUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const Api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Api_tokensUpdateManyMutationInputSchema),z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const Api_tokensScalarWhereInputSchema: z.ZodType<Prisma.Api_tokensScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Api_tokensScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Api_tokensScalarWhereInputSchema),z.lazy(() => Api_tokensScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Api_tokensUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => Api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const Api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => Api_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Api_tokensUpdateManyMutationInputSchema),z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const TimesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUpsertWithWhereUniqueWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => TimesheetWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TimesheetUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
  create: z.union([ z.lazy(() => TimesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const TimesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUpdateWithWhereUniqueWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => TimesheetWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TimesheetUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => TimesheetUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const TimesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUpdateManyWithWhereWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => TimesheetScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TimesheetUpdateManyMutationInputSchema),z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const TimesheetScalarWhereInputSchema: z.ZodType<Prisma.TimesheetScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TimesheetScalarWhereInputSchema),z.lazy(() => TimesheetScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TimesheetScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TimesheetScalarWhereInputSchema),z.lazy(() => TimesheetScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateManyMutationInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const Scheduled_reports_subscriptionScalarWhereInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SessionsUpsertWithWhereUniqueWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUpsertWithWhereUniqueWithoutUsers_sessionsInput> = z.object({
  where: z.lazy(() => SessionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionsUpdateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedUpdateWithoutUsers_sessionsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionsCreateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedCreateWithoutUsers_sessionsInputSchema) ]),
}).strict();

export const SessionsUpdateWithWhereUniqueWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUpdateWithWhereUniqueWithoutUsers_sessionsInput> = z.object({
  where: z.lazy(() => SessionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionsUpdateWithoutUsers_sessionsInputSchema),z.lazy(() => SessionsUncheckedUpdateWithoutUsers_sessionsInputSchema) ]),
}).strict();

export const SessionsUpdateManyWithWhereWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUpdateManyWithWhereWithoutUsers_sessionsInput> = z.object({
  where: z.lazy(() => SessionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionsUpdateManyMutationInputSchema),z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsInputSchema) ]),
}).strict();

export const SessionsScalarWhereInputSchema: z.ZodType<Prisma.SessionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionsScalarWhereInputSchema),z.lazy(() => SessionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionsScalarWhereInputSchema),z.lazy(() => SessionsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_agent: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  device_name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UsersCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersCreateWithoutSessionsInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutSessionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UsersUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutSessionsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutSessionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutSessionsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UsersUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const UsersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const PermissionsCreateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateWithoutUsers_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsUncheckedCreateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedCreateWithoutUsers_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const PermissionsCreateOrConnectWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsCreateOrConnectWithoutUsers_permissionsInput> = z.object({
  where: z.lazy(() => PermissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]),
}).strict();

export const UsersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const UsersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const UsersUpsertWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const PermissionsUpsertWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpsertWithoutUsers_permissionsInput> = z.object({
  update: z.union([ z.lazy(() => PermissionsUpdateWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutUsers_permissionsInputSchema) ]),
  create: z.union([ z.lazy(() => PermissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]),
  where: z.lazy(() => PermissionsWhereInputSchema).optional()
}).strict();

export const PermissionsUpdateToOneWithWhereWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpdateToOneWithWhereWithoutUsers_permissionsInput> = z.object({
  where: z.lazy(() => PermissionsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => PermissionsUpdateWithoutUsers_permissionsInputSchema),z.lazy(() => PermissionsUncheckedUpdateWithoutUsers_permissionsInputSchema) ]),
}).strict();

export const PermissionsUpdateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsUpdateWithoutUsers_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsUncheckedUpdateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateWithoutUsers_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const RolesCreateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesCreateWithoutUsers_rolesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesUncheckedCreateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesUncheckedCreateWithoutUsers_rolesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const RolesCreateOrConnectWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesCreateOrConnectWithoutUsers_rolesInput> = z.object({
  where: z.lazy(() => RolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_rolesInputSchema) ]),
}).strict();

export const UsersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const UsersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const UsersUpsertWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const RolesUpsertWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesUpsertWithoutUsers_rolesInput> = z.object({
  update: z.union([ z.lazy(() => RolesUpdateWithoutUsers_rolesInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutUsers_rolesInputSchema) ]),
  create: z.union([ z.lazy(() => RolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => RolesUncheckedCreateWithoutUsers_rolesInputSchema) ]),
  where: z.lazy(() => RolesWhereInputSchema).optional()
}).strict();

export const RolesUpdateToOneWithWhereWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesUpdateToOneWithWhereWithoutUsers_rolesInput> = z.object({
  where: z.lazy(() => RolesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => RolesUpdateWithoutUsers_rolesInputSchema),z.lazy(() => RolesUncheckedUpdateWithoutUsers_rolesInputSchema) ]),
}).strict();

export const RolesUpdateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesUpdateWithoutUsers_rolesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesUncheckedUpdateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateWithoutUsers_rolesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const OrganizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
}).strict();

export const UsersCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const UsersCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const Users_work_schedulesCreateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateWithoutWork_schedulesInput> = z.object({
  users: z.lazy(() => UsersCreateNestedOneWithoutUsers_work_schedulesInputSchema)
}).strict();

export const Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedCreateWithoutWork_schedulesInput> = z.object({
  user_id: z.string()
}).strict();

export const Users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateOrConnectWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema) ]),
}).strict();

export const Users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema: z.ZodType<Prisma.Users_work_schedulesCreateManyWork_schedulesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_work_schedulesCreateManyWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesCreateManyWork_schedulesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema)
}).strict();

export const Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization_created_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutWork_schedules_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutWork_schedules_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const Users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_work_schedulesUpdateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedUpdateWithoutWork_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => Users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema) ]),
}).strict();

export const Users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => Users_work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_work_schedulesUpdateWithoutWork_schedulesInputSchema),z.lazy(() => Users_work_schedulesUncheckedUpdateWithoutWork_schedulesInputSchema) ]),
}).strict();

export const Users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => Users_work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_work_schedulesUpdateManyMutationInputSchema),z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutTerminals_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]),
}).strict();

export const Users_terminalsCreateWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsCreateWithoutTerminalsInput> = z.object({
  users: z.lazy(() => UsersCreateNestedOneWithoutUsers_terminalsInputSchema)
}).strict();

export const Users_terminalsUncheckedCreateWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedCreateWithoutTerminalsInput> = z.object({
  user_id: z.string()
}).strict();

export const Users_terminalsCreateOrConnectWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsCreateOrConnectWithoutTerminalsInput> = z.object({
  where: z.lazy(() => Users_terminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema) ]),
}).strict();

export const Users_terminalsCreateManyTerminalsInputEnvelopeSchema: z.ZodType<Prisma.Users_terminalsCreateManyTerminalsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Users_terminalsCreateManyTerminalsInputSchema),z.lazy(() => Users_terminalsCreateManyTerminalsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const OrganizationUpsertWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutTerminals_organization_idTorganizationInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutTerminals_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const Users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUpsertWithWhereUniqueWithoutTerminalsInput> = z.object({
  where: z.lazy(() => Users_terminalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Users_terminalsUpdateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedUpdateWithoutTerminalsInputSchema) ]),
  create: z.union([ z.lazy(() => Users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedCreateWithoutTerminalsInputSchema) ]),
}).strict();

export const Users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUpdateWithWhereUniqueWithoutTerminalsInput> = z.object({
  where: z.lazy(() => Users_terminalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Users_terminalsUpdateWithoutTerminalsInputSchema),z.lazy(() => Users_terminalsUncheckedUpdateWithoutTerminalsInputSchema) ]),
}).strict();

export const Users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUpdateManyWithWhereWithoutTerminalsInput> = z.object({
  where: z.lazy(() => Users_terminalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Users_terminalsUpdateManyMutationInputSchema),z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutTerminalsInputSchema) ]),
}).strict();

export const Work_schedulesCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Work_schedulesCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.Work_schedulesCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Work_schedulesCreateManyOrganizationInputSchema),z.lazy(() => Work_schedulesCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UsersCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const UsersCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const TerminalsCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const TerminalsUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const TerminalsCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TerminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const TerminalsCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.TerminalsCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => TerminalsCreateManyOrganizationInputSchema),z.lazy(() => TerminalsCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Api_tokensCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema).optional()
}).strict();

export const Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUncheckedCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensCreateOrConnectWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const Api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema: z.ZodType<Prisma.Api_tokensCreateManyApi_tokens_organizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Api_tokensCreateManyApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensCreateManyApi_tokens_organizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const Work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Work_schedulesUpdateWithoutOrganizationInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const Work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => Work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Work_schedulesUpdateManyMutationInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const UsersUpsertWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutOrganization_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutOrganization_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const TerminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TerminalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TerminalsUpdateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => TerminalsCreateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const TerminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TerminalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TerminalsUpdateWithoutOrganizationInputSchema),z.lazy(() => TerminalsUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const TerminalsUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => TerminalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TerminalsUpdateManyMutationInputSchema),z.lazy(() => TerminalsUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const TerminalsScalarWhereInputSchema: z.ZodType<Prisma.TerminalsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TerminalsScalarWhereInputSchema),z.lazy(() => TerminalsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TerminalsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TerminalsScalarWhereInputSchema),z.lazy(() => TerminalsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  external_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Api_tokensUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
  create: z.union([ z.lazy(() => Api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => Api_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Api_tokensUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => Api_tokensUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const Api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => Api_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Api_tokensUpdateManyMutationInputSchema),z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const UsersCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const TerminalsCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutTerminals_organization_idTorganizationInputSchema)
}).strict();

export const TerminalsUncheckedCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsUncheckedCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const TerminalsCreateOrConnectWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsCreateOrConnectWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => TerminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TerminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const UsersUpsertWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_terminalsInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const TerminalsUpsertWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsUpsertWithoutUsers_terminalsInput> = z.object({
  update: z.union([ z.lazy(() => TerminalsUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
  create: z.union([ z.lazy(() => TerminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
  where: z.lazy(() => TerminalsWhereInputSchema).optional()
}).strict();

export const TerminalsUpdateToOneWithWhereWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsUpdateToOneWithWhereWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => TerminalsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => TerminalsUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => TerminalsUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const TerminalsUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInputSchema).optional()
}).strict();

export const TerminalsUncheckedUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.TerminalsUncheckedUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UsersCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const Work_schedulesCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesCreateOrConnectWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesCreateOrConnectWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const UsersUpsertWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUsers_work_schedulesInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const Work_schedulesUpsertWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUpsertWithoutUsers_work_schedulesInput> = z.object({
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
  where: z.lazy(() => Work_schedulesWhereInputSchema).optional()
}).strict();

export const Work_schedulesUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUpdateToOneWithWhereWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Work_schedulesUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const Work_schedulesUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const UsersCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const UsersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const UsersCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const Work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => OrganizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional()
}).strict();

export const Work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const UsersUpsertWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutWork_schedule_entries_usersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const Work_schedulesUpsertWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUpsertWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  update: z.union([ z.lazy(() => Work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => Work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
  where: z.lazy(() => Work_schedulesWhereInputSchema).optional()
}).strict();

export const Work_schedulesUpdateToOneWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUpdateToOneWithWhereWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => Work_schedulesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => Work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const Work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional()
}).strict();

export const UsersCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const UsersCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const OrganizationCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationUncheckedCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const OrganizationCreateOrConnectWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationCreateOrConnectWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const UsersUpsertWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutApi_tokens_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutApi_tokens_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const OrganizationUpsertWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationUpsertWithoutApi_tokens_organizationInput> = z.object({
  update: z.union([ z.lazy(() => OrganizationUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
  create: z.union([ z.lazy(() => OrganizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
  where: z.lazy(() => OrganizationWhereInputSchema).optional()
}).strict();

export const OrganizationUpdateToOneWithWhereWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationUpdateToOneWithWhereWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => OrganizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => OrganizationUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => OrganizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const OrganizationUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const UsersCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const UsersUpsertWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutTimesheet_usersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_subscription_users: z.lazy(() => UsersCreateNestedOneWithoutScheduled_reports_subscription_usersInputSchema)
}).strict();

export const Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => Scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => Scheduled_reports_subscriptionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Scheduled_reports_subscriptionUpdateManyMutationInputSchema),z.lazy(() => Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const Scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  where: z.lazy(() => Scheduled_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
}).strict();

export const UsersCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  login: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string(),
  salt: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedCreateNestedManyWithoutUsers_sessionsInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const Scheduled_reportsUpsertWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsUpsertWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  update: z.union([ z.lazy(() => Scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
  create: z.union([ z.lazy(() => Scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
  where: z.lazy(() => Scheduled_reportsWhereInputSchema).optional()
}).strict();

export const Scheduled_reportsUpdateToOneWithWhereWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsUpdateToOneWithWhereWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  where: z.lazy(() => Scheduled_reportsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => Scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => Scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
}).strict();

export const Scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.Scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UsersUpsertWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutScheduled_reports_subscription_usersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
  where: z.lazy(() => UsersWhereInputSchema).optional()
}).strict();

export const UsersUpdateToOneWithWhereWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersUpdateToOneWithWhereWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => UsersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UsersUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  login: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  salt: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => UsersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  sessions: z.lazy(() => SessionsUncheckedUpdateManyWithoutUsers_sessionsNestedInputSchema).optional()
}).strict();

export const Roles_permissionsCreateManyPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsCreateManyPermissionsInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateManyPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsCreateManyPermissionsInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithoutPermissionsInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateWithoutPermissionsInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutPermissionsInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithoutPermissionsInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const Users_permissionsUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateWithoutPermissionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutPermissionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsCreateManyRolesInputSchema: z.ZodType<Prisma.Roles_permissionsCreateManyRolesInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateManyRolesInputSchema: z.ZodType<Prisma.Users_rolesCreateManyRolesInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithoutRolesInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateWithoutRolesInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutRolesInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutRolesInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithoutRolesInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const Users_rolesUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateWithoutRolesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutRolesInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutRolesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PermissionsCreateManyUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateManyUsers_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const PermissionsCreateManyUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsCreateManyUsers_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const RolesCreateManyUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesCreateManyUsers_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const RolesCreateManyUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesCreateManyUsers_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateManyUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsCreateManyUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateManyUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesCreateManyUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateManyUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesCreateManyUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const Users_rolesCreateManyUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesCreateManyUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const OrganizationCreateManyOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateManyOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const OrganizationCreateManyOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationCreateManyOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().optional(),
  max_active_order_count: z.number().optional(),
  max_order_close_distance: z.number().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const Work_schedulesCreateManyWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateManyWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedulesCreateManyWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesCreateManyWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const Users_terminalsCreateManyUsersInputSchema: z.ZodType<Prisma.Users_terminalsCreateManyUsersInput> = z.object({
  terminal_id: z.string()
}).strict();

export const Users_work_schedulesCreateManyUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateManyUsersInput> = z.object({
  work_schedule_id: z.string()
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Api_tokensCreateManyApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateManyApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Api_tokensCreateManyApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensCreateManyApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const TimesheetCreateManyTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetCreateManyTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const SessionsCreateManyUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsCreateManyUsers_sessionsInput> = z.object({
  id: z.string().optional(),
  user_agent: z.string(),
  device_name: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const PermissionsUpdateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpdateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PermissionsUpdateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUpdateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.PermissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RolesUpdateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUpdateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesUncheckedUpdateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const RolesUpdateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUpdateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => Roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => Users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.RolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => UsersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional()
}).strict();

export const Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.Roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  permissions: z.lazy(() => PermissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional()
}).strict();

export const Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.Users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  roles: z.lazy(() => RolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => UsersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional()
}).strict();

export const Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.Users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const OrganizationUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => UsersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.OrganizationUncheckedUpdateManyWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedulesUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedulesUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_terminalsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUpdateWithoutUsersInput> = z.object({
  terminals: z.lazy(() => TerminalsUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional()
}).strict();

export const Users_terminalsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateWithoutUsersInput> = z.object({
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_terminalsUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateManyWithoutUsersInput> = z.object({
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateWithoutUsersInput> = z.object({
  work_schedules: z.lazy(() => Work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional()
}).strict();

export const Users_work_schedulesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateWithoutUsersInput> = z.object({
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateManyWithoutUsersInput> = z.object({
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Api_tokensUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const Api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Api_tokensUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => UsersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => OrganizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const Api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TimesheetUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimesheetUncheckedUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUncheckedUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const TimesheetUncheckedUpdateManyWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.TimesheetUncheckedUpdateManyWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_subscription_reports: z.lazy(() => Scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionsUpdateWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUpdateWithoutUsers_sessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_agent: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionsUncheckedUpdateWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateWithoutUsers_sessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_agent: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionsUncheckedUpdateManyWithoutUsers_sessionsInputSchema: z.ZodType<Prisma.SessionsUncheckedUpdateManyWithoutUsers_sessionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_agent: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  device_name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesCreateManyWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesCreateManyWork_schedulesInput> = z.object({
  user_id: z.string()
}).strict();

export const Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Users_work_schedulesUpdateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUpdateWithoutWork_schedulesInput> = z.object({
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional()
}).strict();

export const Users_work_schedulesUncheckedUpdateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateWithoutWork_schedulesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesInputSchema: z.ZodType<Prisma.Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => UsersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional()
}).strict();

export const Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Users_terminalsCreateManyTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsCreateManyTerminalsInput> = z.object({
  user_id: z.string()
}).strict();

export const Users_terminalsUpdateWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUpdateWithoutTerminalsInput> = z.object({
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional()
}).strict();

export const Users_terminalsUncheckedUpdateWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateWithoutTerminalsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Users_terminalsUncheckedUpdateManyWithoutTerminalsInputSchema: z.ZodType<Prisma.Users_terminalsUncheckedUpdateManyWithoutTerminalsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Work_schedulesCreateManyOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => Work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const TerminalsCreateManyOrganizationInputSchema: z.ZodType<Prisma.TerminalsCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Api_tokensCreateManyApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensCreateManyApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const Work_schedulesUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_created_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const Work_schedulesUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.Work_schedulesUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => Work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TerminalsUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_terminals: z.lazy(() => Users_terminalsUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const TerminalsUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_terminals: z.lazy(() => Users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const TerminalsUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.TerminalsUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Api_tokensUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => UsersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => UsersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema).optional()
}).strict();

export const Api_tokensUncheckedUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.Api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_subscription_users: z.lazy(() => UsersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const PermissionsFindFirstArgsSchema: z.ZodType<Prisma.PermissionsFindFirstArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  where: PermissionsWhereInputSchema.optional(),
  orderBy: z.union([ PermissionsOrderByWithRelationInputSchema.array(),PermissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionsScalarFieldEnumSchema,PermissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PermissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PermissionsFindFirstOrThrowArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  where: PermissionsWhereInputSchema.optional(),
  orderBy: z.union([ PermissionsOrderByWithRelationInputSchema.array(),PermissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionsScalarFieldEnumSchema,PermissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PermissionsFindManyArgsSchema: z.ZodType<Prisma.PermissionsFindManyArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  where: PermissionsWhereInputSchema.optional(),
  orderBy: z.union([ PermissionsOrderByWithRelationInputSchema.array(),PermissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionsScalarFieldEnumSchema,PermissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const PermissionsAggregateArgsSchema: z.ZodType<Prisma.PermissionsAggregateArgs> = z.object({
  where: PermissionsWhereInputSchema.optional(),
  orderBy: z.union([ PermissionsOrderByWithRelationInputSchema.array(),PermissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: PermissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PermissionsGroupByArgsSchema: z.ZodType<Prisma.PermissionsGroupByArgs> = z.object({
  where: PermissionsWhereInputSchema.optional(),
  orderBy: z.union([ PermissionsOrderByWithAggregationInputSchema.array(),PermissionsOrderByWithAggregationInputSchema ]).optional(),
  by: PermissionsScalarFieldEnumSchema.array(),
  having: PermissionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const PermissionsFindUniqueArgsSchema: z.ZodType<Prisma.PermissionsFindUniqueArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  where: PermissionsWhereUniqueInputSchema,
}).strict()

export const PermissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PermissionsFindUniqueOrThrowArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  where: PermissionsWhereUniqueInputSchema,
}).strict()

export const RolesFindFirstArgsSchema: z.ZodType<Prisma.RolesFindFirstArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  where: RolesWhereInputSchema.optional(),
  orderBy: z.union([ RolesOrderByWithRelationInputSchema.array(),RolesOrderByWithRelationInputSchema ]).optional(),
  cursor: RolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolesScalarFieldEnumSchema,RolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RolesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.RolesFindFirstOrThrowArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  where: RolesWhereInputSchema.optional(),
  orderBy: z.union([ RolesOrderByWithRelationInputSchema.array(),RolesOrderByWithRelationInputSchema ]).optional(),
  cursor: RolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolesScalarFieldEnumSchema,RolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RolesFindManyArgsSchema: z.ZodType<Prisma.RolesFindManyArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  where: RolesWhereInputSchema.optional(),
  orderBy: z.union([ RolesOrderByWithRelationInputSchema.array(),RolesOrderByWithRelationInputSchema ]).optional(),
  cursor: RolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolesScalarFieldEnumSchema,RolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const RolesAggregateArgsSchema: z.ZodType<Prisma.RolesAggregateArgs> = z.object({
  where: RolesWhereInputSchema.optional(),
  orderBy: z.union([ RolesOrderByWithRelationInputSchema.array(),RolesOrderByWithRelationInputSchema ]).optional(),
  cursor: RolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RolesGroupByArgsSchema: z.ZodType<Prisma.RolesGroupByArgs> = z.object({
  where: RolesWhereInputSchema.optional(),
  orderBy: z.union([ RolesOrderByWithAggregationInputSchema.array(),RolesOrderByWithAggregationInputSchema ]).optional(),
  by: RolesScalarFieldEnumSchema.array(),
  having: RolesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const RolesFindUniqueArgsSchema: z.ZodType<Prisma.RolesFindUniqueArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  where: RolesWhereUniqueInputSchema,
}).strict()

export const RolesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.RolesFindUniqueOrThrowArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  where: RolesWhereUniqueInputSchema,
}).strict()

export const Roles_permissionsFindFirstArgsSchema: z.ZodType<Prisma.Roles_permissionsFindFirstArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  where: Roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Roles_permissionsOrderByWithRelationInputSchema.array(),Roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Roles_permissionsScalarFieldEnumSchema,Roles_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Roles_permissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Roles_permissionsFindFirstOrThrowArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  where: Roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Roles_permissionsOrderByWithRelationInputSchema.array(),Roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Roles_permissionsScalarFieldEnumSchema,Roles_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Roles_permissionsFindManyArgsSchema: z.ZodType<Prisma.Roles_permissionsFindManyArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  where: Roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Roles_permissionsOrderByWithRelationInputSchema.array(),Roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Roles_permissionsScalarFieldEnumSchema,Roles_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Roles_permissionsAggregateArgsSchema: z.ZodType<Prisma.Roles_permissionsAggregateArgs> = z.object({
  where: Roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Roles_permissionsOrderByWithRelationInputSchema.array(),Roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Roles_permissionsGroupByArgsSchema: z.ZodType<Prisma.Roles_permissionsGroupByArgs> = z.object({
  where: Roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Roles_permissionsOrderByWithAggregationInputSchema.array(),Roles_permissionsOrderByWithAggregationInputSchema ]).optional(),
  by: Roles_permissionsScalarFieldEnumSchema.array(),
  having: Roles_permissionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Roles_permissionsFindUniqueArgsSchema: z.ZodType<Prisma.Roles_permissionsFindUniqueArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  where: Roles_permissionsWhereUniqueInputSchema,
}).strict()

export const Roles_permissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Roles_permissionsFindUniqueOrThrowArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  where: Roles_permissionsWhereUniqueInputSchema,
}).strict()

export const UsersFindFirstArgsSchema: z.ZodType<Prisma.UsersFindFirstArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UsersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UsersFindFirstOrThrowArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UsersFindManyArgsSchema: z.ZodType<Prisma.UsersFindManyArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const UsersAggregateArgsSchema: z.ZodType<Prisma.UsersAggregateArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UsersGroupByArgsSchema: z.ZodType<Prisma.UsersGroupByArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithAggregationInputSchema.array(),UsersOrderByWithAggregationInputSchema ]).optional(),
  by: UsersScalarFieldEnumSchema.array(),
  having: UsersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const UsersFindUniqueArgsSchema: z.ZodType<Prisma.UsersFindUniqueArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict()

export const UsersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UsersFindUniqueOrThrowArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict()

export const SessionsFindFirstArgsSchema: z.ZodType<Prisma.SessionsFindFirstArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  where: SessionsWhereInputSchema.optional(),
  orderBy: z.union([ SessionsOrderByWithRelationInputSchema.array(),SessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionsScalarFieldEnumSchema,SessionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionsFindFirstOrThrowArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  where: SessionsWhereInputSchema.optional(),
  orderBy: z.union([ SessionsOrderByWithRelationInputSchema.array(),SessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionsScalarFieldEnumSchema,SessionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionsFindManyArgsSchema: z.ZodType<Prisma.SessionsFindManyArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  where: SessionsWhereInputSchema.optional(),
  orderBy: z.union([ SessionsOrderByWithRelationInputSchema.array(),SessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionsScalarFieldEnumSchema,SessionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const SessionsAggregateArgsSchema: z.ZodType<Prisma.SessionsAggregateArgs> = z.object({
  where: SessionsWhereInputSchema.optional(),
  orderBy: z.union([ SessionsOrderByWithRelationInputSchema.array(),SessionsOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionsGroupByArgsSchema: z.ZodType<Prisma.SessionsGroupByArgs> = z.object({
  where: SessionsWhereInputSchema.optional(),
  orderBy: z.union([ SessionsOrderByWithAggregationInputSchema.array(),SessionsOrderByWithAggregationInputSchema ]).optional(),
  by: SessionsScalarFieldEnumSchema.array(),
  having: SessionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const SessionsFindUniqueArgsSchema: z.ZodType<Prisma.SessionsFindUniqueArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  where: SessionsWhereUniqueInputSchema,
}).strict()

export const SessionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionsFindUniqueOrThrowArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  where: SessionsWhereUniqueInputSchema,
}).strict()

export const Users_permissionsFindFirstArgsSchema: z.ZodType<Prisma.Users_permissionsFindFirstArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  where: Users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Users_permissionsOrderByWithRelationInputSchema.array(),Users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_permissionsScalarFieldEnumSchema,Users_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_permissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Users_permissionsFindFirstOrThrowArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  where: Users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Users_permissionsOrderByWithRelationInputSchema.array(),Users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_permissionsScalarFieldEnumSchema,Users_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_permissionsFindManyArgsSchema: z.ZodType<Prisma.Users_permissionsFindManyArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  where: Users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Users_permissionsOrderByWithRelationInputSchema.array(),Users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_permissionsScalarFieldEnumSchema,Users_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_permissionsAggregateArgsSchema: z.ZodType<Prisma.Users_permissionsAggregateArgs> = z.object({
  where: Users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Users_permissionsOrderByWithRelationInputSchema.array(),Users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_permissionsGroupByArgsSchema: z.ZodType<Prisma.Users_permissionsGroupByArgs> = z.object({
  where: Users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ Users_permissionsOrderByWithAggregationInputSchema.array(),Users_permissionsOrderByWithAggregationInputSchema ]).optional(),
  by: Users_permissionsScalarFieldEnumSchema.array(),
  having: Users_permissionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_permissionsFindUniqueArgsSchema: z.ZodType<Prisma.Users_permissionsFindUniqueArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  where: Users_permissionsWhereUniqueInputSchema,
}).strict()

export const Users_permissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Users_permissionsFindUniqueOrThrowArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  where: Users_permissionsWhereUniqueInputSchema,
}).strict()

export const Users_rolesFindFirstArgsSchema: z.ZodType<Prisma.Users_rolesFindFirstArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  where: Users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ Users_rolesOrderByWithRelationInputSchema.array(),Users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_rolesScalarFieldEnumSchema,Users_rolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_rolesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Users_rolesFindFirstOrThrowArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  where: Users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ Users_rolesOrderByWithRelationInputSchema.array(),Users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_rolesScalarFieldEnumSchema,Users_rolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_rolesFindManyArgsSchema: z.ZodType<Prisma.Users_rolesFindManyArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  where: Users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ Users_rolesOrderByWithRelationInputSchema.array(),Users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_rolesScalarFieldEnumSchema,Users_rolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_rolesAggregateArgsSchema: z.ZodType<Prisma.Users_rolesAggregateArgs> = z.object({
  where: Users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ Users_rolesOrderByWithRelationInputSchema.array(),Users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_rolesGroupByArgsSchema: z.ZodType<Prisma.Users_rolesGroupByArgs> = z.object({
  where: Users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ Users_rolesOrderByWithAggregationInputSchema.array(),Users_rolesOrderByWithAggregationInputSchema ]).optional(),
  by: Users_rolesScalarFieldEnumSchema.array(),
  having: Users_rolesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_rolesFindUniqueArgsSchema: z.ZodType<Prisma.Users_rolesFindUniqueArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  where: Users_rolesWhereUniqueInputSchema,
}).strict()

export const Users_rolesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Users_rolesFindUniqueOrThrowArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  where: Users_rolesWhereUniqueInputSchema,
}).strict()

export const Work_schedulesFindFirstArgsSchema: z.ZodType<Prisma.Work_schedulesFindFirstArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  where: Work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedulesOrderByWithRelationInputSchema.array(),Work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedulesScalarFieldEnumSchema,Work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Work_schedulesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Work_schedulesFindFirstOrThrowArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  where: Work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedulesOrderByWithRelationInputSchema.array(),Work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedulesScalarFieldEnumSchema,Work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Work_schedulesFindManyArgsSchema: z.ZodType<Prisma.Work_schedulesFindManyArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  where: Work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedulesOrderByWithRelationInputSchema.array(),Work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedulesScalarFieldEnumSchema,Work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Work_schedulesAggregateArgsSchema: z.ZodType<Prisma.Work_schedulesAggregateArgs> = z.object({
  where: Work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedulesOrderByWithRelationInputSchema.array(),Work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Work_schedulesGroupByArgsSchema: z.ZodType<Prisma.Work_schedulesGroupByArgs> = z.object({
  where: Work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedulesOrderByWithAggregationInputSchema.array(),Work_schedulesOrderByWithAggregationInputSchema ]).optional(),
  by: Work_schedulesScalarFieldEnumSchema.array(),
  having: Work_schedulesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Work_schedulesFindUniqueArgsSchema: z.ZodType<Prisma.Work_schedulesFindUniqueArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  where: Work_schedulesWhereUniqueInputSchema,
}).strict()

export const Work_schedulesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Work_schedulesFindUniqueOrThrowArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  where: Work_schedulesWhereUniqueInputSchema,
}).strict()

export const TerminalsFindFirstArgsSchema: z.ZodType<Prisma.TerminalsFindFirstArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  where: TerminalsWhereInputSchema.optional(),
  orderBy: z.union([ TerminalsOrderByWithRelationInputSchema.array(),TerminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: TerminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TerminalsScalarFieldEnumSchema,TerminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TerminalsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TerminalsFindFirstOrThrowArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  where: TerminalsWhereInputSchema.optional(),
  orderBy: z.union([ TerminalsOrderByWithRelationInputSchema.array(),TerminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: TerminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TerminalsScalarFieldEnumSchema,TerminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TerminalsFindManyArgsSchema: z.ZodType<Prisma.TerminalsFindManyArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  where: TerminalsWhereInputSchema.optional(),
  orderBy: z.union([ TerminalsOrderByWithRelationInputSchema.array(),TerminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: TerminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TerminalsScalarFieldEnumSchema,TerminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TerminalsAggregateArgsSchema: z.ZodType<Prisma.TerminalsAggregateArgs> = z.object({
  where: TerminalsWhereInputSchema.optional(),
  orderBy: z.union([ TerminalsOrderByWithRelationInputSchema.array(),TerminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: TerminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const TerminalsGroupByArgsSchema: z.ZodType<Prisma.TerminalsGroupByArgs> = z.object({
  where: TerminalsWhereInputSchema.optional(),
  orderBy: z.union([ TerminalsOrderByWithAggregationInputSchema.array(),TerminalsOrderByWithAggregationInputSchema ]).optional(),
  by: TerminalsScalarFieldEnumSchema.array(),
  having: TerminalsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const TerminalsFindUniqueArgsSchema: z.ZodType<Prisma.TerminalsFindUniqueArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  where: TerminalsWhereUniqueInputSchema,
}).strict()

export const TerminalsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TerminalsFindUniqueOrThrowArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  where: TerminalsWhereUniqueInputSchema,
}).strict()

export const OrganizationFindFirstArgsSchema: z.ZodType<Prisma.OrganizationFindFirstArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindFirstOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationFindManyArgsSchema: z.ZodType<Prisma.OrganizationFindManyArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const OrganizationAggregateArgsSchema: z.ZodType<Prisma.OrganizationAggregateArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithRelationInputSchema.array(),OrganizationOrderByWithRelationInputSchema ]).optional(),
  cursor: OrganizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationGroupByArgsSchema: z.ZodType<Prisma.OrganizationGroupByArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
  orderBy: z.union([ OrganizationOrderByWithAggregationInputSchema.array(),OrganizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: OrganizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const OrganizationFindUniqueArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.OrganizationFindUniqueOrThrowArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const Users_terminalsFindFirstArgsSchema: z.ZodType<Prisma.Users_terminalsFindFirstArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  where: Users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ Users_terminalsOrderByWithRelationInputSchema.array(),Users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_terminalsScalarFieldEnumSchema,Users_terminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_terminalsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Users_terminalsFindFirstOrThrowArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  where: Users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ Users_terminalsOrderByWithRelationInputSchema.array(),Users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_terminalsScalarFieldEnumSchema,Users_terminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_terminalsFindManyArgsSchema: z.ZodType<Prisma.Users_terminalsFindManyArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  where: Users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ Users_terminalsOrderByWithRelationInputSchema.array(),Users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_terminalsScalarFieldEnumSchema,Users_terminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_terminalsAggregateArgsSchema: z.ZodType<Prisma.Users_terminalsAggregateArgs> = z.object({
  where: Users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ Users_terminalsOrderByWithRelationInputSchema.array(),Users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_terminalsGroupByArgsSchema: z.ZodType<Prisma.Users_terminalsGroupByArgs> = z.object({
  where: Users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ Users_terminalsOrderByWithAggregationInputSchema.array(),Users_terminalsOrderByWithAggregationInputSchema ]).optional(),
  by: Users_terminalsScalarFieldEnumSchema.array(),
  having: Users_terminalsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_terminalsFindUniqueArgsSchema: z.ZodType<Prisma.Users_terminalsFindUniqueArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  where: Users_terminalsWhereUniqueInputSchema,
}).strict()

export const Users_terminalsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Users_terminalsFindUniqueOrThrowArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  where: Users_terminalsWhereUniqueInputSchema,
}).strict()

export const Users_work_schedulesFindFirstArgsSchema: z.ZodType<Prisma.Users_work_schedulesFindFirstArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  where: Users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Users_work_schedulesOrderByWithRelationInputSchema.array(),Users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_work_schedulesScalarFieldEnumSchema,Users_work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_work_schedulesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Users_work_schedulesFindFirstOrThrowArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  where: Users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Users_work_schedulesOrderByWithRelationInputSchema.array(),Users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_work_schedulesScalarFieldEnumSchema,Users_work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_work_schedulesFindManyArgsSchema: z.ZodType<Prisma.Users_work_schedulesFindManyArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  where: Users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Users_work_schedulesOrderByWithRelationInputSchema.array(),Users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_work_schedulesScalarFieldEnumSchema,Users_work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Users_work_schedulesAggregateArgsSchema: z.ZodType<Prisma.Users_work_schedulesAggregateArgs> = z.object({
  where: Users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Users_work_schedulesOrderByWithRelationInputSchema.array(),Users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: Users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_work_schedulesGroupByArgsSchema: z.ZodType<Prisma.Users_work_schedulesGroupByArgs> = z.object({
  where: Users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ Users_work_schedulesOrderByWithAggregationInputSchema.array(),Users_work_schedulesOrderByWithAggregationInputSchema ]).optional(),
  by: Users_work_schedulesScalarFieldEnumSchema.array(),
  having: Users_work_schedulesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Users_work_schedulesFindUniqueArgsSchema: z.ZodType<Prisma.Users_work_schedulesFindUniqueArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  where: Users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const Users_work_schedulesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Users_work_schedulesFindUniqueOrThrowArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  where: Users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const Work_schedule_entriesFindFirstArgsSchema: z.ZodType<Prisma.Work_schedule_entriesFindFirstArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  where: Work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedule_entriesOrderByWithRelationInputSchema.array(),Work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedule_entriesScalarFieldEnumSchema,Work_schedule_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Work_schedule_entriesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Work_schedule_entriesFindFirstOrThrowArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  where: Work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedule_entriesOrderByWithRelationInputSchema.array(),Work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedule_entriesScalarFieldEnumSchema,Work_schedule_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Work_schedule_entriesFindManyArgsSchema: z.ZodType<Prisma.Work_schedule_entriesFindManyArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  where: Work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedule_entriesOrderByWithRelationInputSchema.array(),Work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedule_entriesScalarFieldEnumSchema,Work_schedule_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Work_schedule_entriesAggregateArgsSchema: z.ZodType<Prisma.Work_schedule_entriesAggregateArgs> = z.object({
  where: Work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedule_entriesOrderByWithRelationInputSchema.array(),Work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: Work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Work_schedule_entriesGroupByArgsSchema: z.ZodType<Prisma.Work_schedule_entriesGroupByArgs> = z.object({
  where: Work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ Work_schedule_entriesOrderByWithAggregationInputSchema.array(),Work_schedule_entriesOrderByWithAggregationInputSchema ]).optional(),
  by: Work_schedule_entriesScalarFieldEnumSchema.array(),
  having: Work_schedule_entriesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Work_schedule_entriesFindUniqueArgsSchema: z.ZodType<Prisma.Work_schedule_entriesFindUniqueArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  where: Work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const Work_schedule_entriesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Work_schedule_entriesFindUniqueOrThrowArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  where: Work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const Api_tokensFindFirstArgsSchema: z.ZodType<Prisma.Api_tokensFindFirstArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  where: Api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ Api_tokensOrderByWithRelationInputSchema.array(),Api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: Api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Api_tokensScalarFieldEnumSchema,Api_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Api_tokensFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Api_tokensFindFirstOrThrowArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  where: Api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ Api_tokensOrderByWithRelationInputSchema.array(),Api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: Api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Api_tokensScalarFieldEnumSchema,Api_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Api_tokensFindManyArgsSchema: z.ZodType<Prisma.Api_tokensFindManyArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  where: Api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ Api_tokensOrderByWithRelationInputSchema.array(),Api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: Api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Api_tokensScalarFieldEnumSchema,Api_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Api_tokensAggregateArgsSchema: z.ZodType<Prisma.Api_tokensAggregateArgs> = z.object({
  where: Api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ Api_tokensOrderByWithRelationInputSchema.array(),Api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: Api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Api_tokensGroupByArgsSchema: z.ZodType<Prisma.Api_tokensGroupByArgs> = z.object({
  where: Api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ Api_tokensOrderByWithAggregationInputSchema.array(),Api_tokensOrderByWithAggregationInputSchema ]).optional(),
  by: Api_tokensScalarFieldEnumSchema.array(),
  having: Api_tokensScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Api_tokensFindUniqueArgsSchema: z.ZodType<Prisma.Api_tokensFindUniqueArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  where: Api_tokensWhereUniqueInputSchema,
}).strict()

export const Api_tokensFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Api_tokensFindUniqueOrThrowArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  where: Api_tokensWhereUniqueInputSchema,
}).strict()

export const TimesheetFindFirstArgsSchema: z.ZodType<Prisma.TimesheetFindFirstArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  where: TimesheetWhereInputSchema.optional(),
  orderBy: z.union([ TimesheetOrderByWithRelationInputSchema.array(),TimesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: TimesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimesheetScalarFieldEnumSchema,TimesheetScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TimesheetFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TimesheetFindFirstOrThrowArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  where: TimesheetWhereInputSchema.optional(),
  orderBy: z.union([ TimesheetOrderByWithRelationInputSchema.array(),TimesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: TimesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimesheetScalarFieldEnumSchema,TimesheetScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TimesheetFindManyArgsSchema: z.ZodType<Prisma.TimesheetFindManyArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  where: TimesheetWhereInputSchema.optional(),
  orderBy: z.union([ TimesheetOrderByWithRelationInputSchema.array(),TimesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: TimesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimesheetScalarFieldEnumSchema,TimesheetScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const TimesheetAggregateArgsSchema: z.ZodType<Prisma.TimesheetAggregateArgs> = z.object({
  where: TimesheetWhereInputSchema.optional(),
  orderBy: z.union([ TimesheetOrderByWithRelationInputSchema.array(),TimesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: TimesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const TimesheetGroupByArgsSchema: z.ZodType<Prisma.TimesheetGroupByArgs> = z.object({
  where: TimesheetWhereInputSchema.optional(),
  orderBy: z.union([ TimesheetOrderByWithAggregationInputSchema.array(),TimesheetOrderByWithAggregationInputSchema ]).optional(),
  by: TimesheetScalarFieldEnumSchema.array(),
  having: TimesheetScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const TimesheetFindUniqueArgsSchema: z.ZodType<Prisma.TimesheetFindUniqueArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  where: TimesheetWhereUniqueInputSchema,
}).strict()

export const TimesheetFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TimesheetFindUniqueOrThrowArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  where: TimesheetWhereUniqueInputSchema,
}).strict()

export const Scheduled_reportsFindFirstArgsSchema: z.ZodType<Prisma.Scheduled_reportsFindFirstArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  where: Scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reportsOrderByWithRelationInputSchema.array(),Scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reportsScalarFieldEnumSchema,Scheduled_reportsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Scheduled_reportsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Scheduled_reportsFindFirstOrThrowArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  where: Scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reportsOrderByWithRelationInputSchema.array(),Scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reportsScalarFieldEnumSchema,Scheduled_reportsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Scheduled_reportsFindManyArgsSchema: z.ZodType<Prisma.Scheduled_reportsFindManyArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  where: Scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reportsOrderByWithRelationInputSchema.array(),Scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reportsScalarFieldEnumSchema,Scheduled_reportsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Scheduled_reportsAggregateArgsSchema: z.ZodType<Prisma.Scheduled_reportsAggregateArgs> = z.object({
  where: Scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reportsOrderByWithRelationInputSchema.array(),Scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Scheduled_reportsGroupByArgsSchema: z.ZodType<Prisma.Scheduled_reportsGroupByArgs> = z.object({
  where: Scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reportsOrderByWithAggregationInputSchema.array(),Scheduled_reportsOrderByWithAggregationInputSchema ]).optional(),
  by: Scheduled_reportsScalarFieldEnumSchema.array(),
  having: Scheduled_reportsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Scheduled_reportsFindUniqueArgsSchema: z.ZodType<Prisma.Scheduled_reportsFindUniqueArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  where: Scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const Scheduled_reportsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Scheduled_reportsFindUniqueOrThrowArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  where: Scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const Scheduled_reports_subscriptionFindFirstArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionFindFirstArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  where: Scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),Scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reports_subscriptionScalarFieldEnumSchema,Scheduled_reports_subscriptionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Scheduled_reports_subscriptionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionFindFirstOrThrowArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  where: Scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),Scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reports_subscriptionScalarFieldEnumSchema,Scheduled_reports_subscriptionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Scheduled_reports_subscriptionFindManyArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionFindManyArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  where: Scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),Scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reports_subscriptionScalarFieldEnumSchema,Scheduled_reports_subscriptionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const Scheduled_reports_subscriptionAggregateArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionAggregateArgs> = z.object({
  where: Scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),Scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: Scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Scheduled_reports_subscriptionGroupByArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionGroupByArgs> = z.object({
  where: Scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ Scheduled_reports_subscriptionOrderByWithAggregationInputSchema.array(),Scheduled_reports_subscriptionOrderByWithAggregationInputSchema ]).optional(),
  by: Scheduled_reports_subscriptionScalarFieldEnumSchema.array(),
  having: Scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const Scheduled_reports_subscriptionFindUniqueArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionFindUniqueArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  where: Scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const Scheduled_reports_subscriptionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionFindUniqueOrThrowArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  where: Scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const PermissionsCreateArgsSchema: z.ZodType<Prisma.PermissionsCreateArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  data: z.union([ PermissionsCreateInputSchema,PermissionsUncheckedCreateInputSchema ]),
}).strict()

export const PermissionsUpsertArgsSchema: z.ZodType<Prisma.PermissionsUpsertArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  where: PermissionsWhereUniqueInputSchema,
  create: z.union([ PermissionsCreateInputSchema,PermissionsUncheckedCreateInputSchema ]),
  update: z.union([ PermissionsUpdateInputSchema,PermissionsUncheckedUpdateInputSchema ]),
}).strict()

export const PermissionsCreateManyArgsSchema: z.ZodType<Prisma.PermissionsCreateManyArgs> = z.object({
  data: z.union([ PermissionsCreateManyInputSchema,PermissionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const PermissionsDeleteArgsSchema: z.ZodType<Prisma.PermissionsDeleteArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  where: PermissionsWhereUniqueInputSchema,
}).strict()

export const PermissionsUpdateArgsSchema: z.ZodType<Prisma.PermissionsUpdateArgs> = z.object({
  select: PermissionsSelectSchema.optional(),
  include: PermissionsIncludeSchema.optional(),
  data: z.union([ PermissionsUpdateInputSchema,PermissionsUncheckedUpdateInputSchema ]),
  where: PermissionsWhereUniqueInputSchema,
}).strict()

export const PermissionsUpdateManyArgsSchema: z.ZodType<Prisma.PermissionsUpdateManyArgs> = z.object({
  data: z.union([ PermissionsUpdateManyMutationInputSchema,PermissionsUncheckedUpdateManyInputSchema ]),
  where: PermissionsWhereInputSchema.optional(),
}).strict()

export const PermissionsDeleteManyArgsSchema: z.ZodType<Prisma.PermissionsDeleteManyArgs> = z.object({
  where: PermissionsWhereInputSchema.optional(),
}).strict()

export const RolesCreateArgsSchema: z.ZodType<Prisma.RolesCreateArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  data: z.union([ RolesCreateInputSchema,RolesUncheckedCreateInputSchema ]),
}).strict()

export const RolesUpsertArgsSchema: z.ZodType<Prisma.RolesUpsertArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  where: RolesWhereUniqueInputSchema,
  create: z.union([ RolesCreateInputSchema,RolesUncheckedCreateInputSchema ]),
  update: z.union([ RolesUpdateInputSchema,RolesUncheckedUpdateInputSchema ]),
}).strict()

export const RolesCreateManyArgsSchema: z.ZodType<Prisma.RolesCreateManyArgs> = z.object({
  data: z.union([ RolesCreateManyInputSchema,RolesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const RolesDeleteArgsSchema: z.ZodType<Prisma.RolesDeleteArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  where: RolesWhereUniqueInputSchema,
}).strict()

export const RolesUpdateArgsSchema: z.ZodType<Prisma.RolesUpdateArgs> = z.object({
  select: RolesSelectSchema.optional(),
  include: RolesIncludeSchema.optional(),
  data: z.union([ RolesUpdateInputSchema,RolesUncheckedUpdateInputSchema ]),
  where: RolesWhereUniqueInputSchema,
}).strict()

export const RolesUpdateManyArgsSchema: z.ZodType<Prisma.RolesUpdateManyArgs> = z.object({
  data: z.union([ RolesUpdateManyMutationInputSchema,RolesUncheckedUpdateManyInputSchema ]),
  where: RolesWhereInputSchema.optional(),
}).strict()

export const RolesDeleteManyArgsSchema: z.ZodType<Prisma.RolesDeleteManyArgs> = z.object({
  where: RolesWhereInputSchema.optional(),
}).strict()

export const Roles_permissionsCreateArgsSchema: z.ZodType<Prisma.Roles_permissionsCreateArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  data: z.union([ Roles_permissionsCreateInputSchema,Roles_permissionsUncheckedCreateInputSchema ]),
}).strict()

export const Roles_permissionsUpsertArgsSchema: z.ZodType<Prisma.Roles_permissionsUpsertArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  where: Roles_permissionsWhereUniqueInputSchema,
  create: z.union([ Roles_permissionsCreateInputSchema,Roles_permissionsUncheckedCreateInputSchema ]),
  update: z.union([ Roles_permissionsUpdateInputSchema,Roles_permissionsUncheckedUpdateInputSchema ]),
}).strict()

export const Roles_permissionsCreateManyArgsSchema: z.ZodType<Prisma.Roles_permissionsCreateManyArgs> = z.object({
  data: z.union([ Roles_permissionsCreateManyInputSchema,Roles_permissionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Roles_permissionsDeleteArgsSchema: z.ZodType<Prisma.Roles_permissionsDeleteArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  where: Roles_permissionsWhereUniqueInputSchema,
}).strict()

export const Roles_permissionsUpdateArgsSchema: z.ZodType<Prisma.Roles_permissionsUpdateArgs> = z.object({
  select: Roles_permissionsSelectSchema.optional(),
  include: Roles_permissionsIncludeSchema.optional(),
  data: z.union([ Roles_permissionsUpdateInputSchema,Roles_permissionsUncheckedUpdateInputSchema ]),
  where: Roles_permissionsWhereUniqueInputSchema,
}).strict()

export const Roles_permissionsUpdateManyArgsSchema: z.ZodType<Prisma.Roles_permissionsUpdateManyArgs> = z.object({
  data: z.union([ Roles_permissionsUpdateManyMutationInputSchema,Roles_permissionsUncheckedUpdateManyInputSchema ]),
  where: Roles_permissionsWhereInputSchema.optional(),
}).strict()

export const Roles_permissionsDeleteManyArgsSchema: z.ZodType<Prisma.Roles_permissionsDeleteManyArgs> = z.object({
  where: Roles_permissionsWhereInputSchema.optional(),
}).strict()

export const UsersCreateArgsSchema: z.ZodType<Prisma.UsersCreateArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  data: z.union([ UsersCreateInputSchema,UsersUncheckedCreateInputSchema ]),
}).strict()

export const UsersUpsertArgsSchema: z.ZodType<Prisma.UsersUpsertArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
  create: z.union([ UsersCreateInputSchema,UsersUncheckedCreateInputSchema ]),
  update: z.union([ UsersUpdateInputSchema,UsersUncheckedUpdateInputSchema ]),
}).strict()

export const UsersCreateManyArgsSchema: z.ZodType<Prisma.UsersCreateManyArgs> = z.object({
  data: z.union([ UsersCreateManyInputSchema,UsersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const UsersDeleteArgsSchema: z.ZodType<Prisma.UsersDeleteArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict()

export const UsersUpdateArgsSchema: z.ZodType<Prisma.UsersUpdateArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  data: z.union([ UsersUpdateInputSchema,UsersUncheckedUpdateInputSchema ]),
  where: UsersWhereUniqueInputSchema,
}).strict()

export const UsersUpdateManyArgsSchema: z.ZodType<Prisma.UsersUpdateManyArgs> = z.object({
  data: z.union([ UsersUpdateManyMutationInputSchema,UsersUncheckedUpdateManyInputSchema ]),
  where: UsersWhereInputSchema.optional(),
}).strict()

export const UsersDeleteManyArgsSchema: z.ZodType<Prisma.UsersDeleteManyArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
}).strict()

export const SessionsCreateArgsSchema: z.ZodType<Prisma.SessionsCreateArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  data: z.union([ SessionsCreateInputSchema,SessionsUncheckedCreateInputSchema ]),
}).strict()

export const SessionsUpsertArgsSchema: z.ZodType<Prisma.SessionsUpsertArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  where: SessionsWhereUniqueInputSchema,
  create: z.union([ SessionsCreateInputSchema,SessionsUncheckedCreateInputSchema ]),
  update: z.union([ SessionsUpdateInputSchema,SessionsUncheckedUpdateInputSchema ]),
}).strict()

export const SessionsCreateManyArgsSchema: z.ZodType<Prisma.SessionsCreateManyArgs> = z.object({
  data: z.union([ SessionsCreateManyInputSchema,SessionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const SessionsDeleteArgsSchema: z.ZodType<Prisma.SessionsDeleteArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  where: SessionsWhereUniqueInputSchema,
}).strict()

export const SessionsUpdateArgsSchema: z.ZodType<Prisma.SessionsUpdateArgs> = z.object({
  select: SessionsSelectSchema.optional(),
  include: SessionsIncludeSchema.optional(),
  data: z.union([ SessionsUpdateInputSchema,SessionsUncheckedUpdateInputSchema ]),
  where: SessionsWhereUniqueInputSchema,
}).strict()

export const SessionsUpdateManyArgsSchema: z.ZodType<Prisma.SessionsUpdateManyArgs> = z.object({
  data: z.union([ SessionsUpdateManyMutationInputSchema,SessionsUncheckedUpdateManyInputSchema ]),
  where: SessionsWhereInputSchema.optional(),
}).strict()

export const SessionsDeleteManyArgsSchema: z.ZodType<Prisma.SessionsDeleteManyArgs> = z.object({
  where: SessionsWhereInputSchema.optional(),
}).strict()

export const Users_permissionsCreateArgsSchema: z.ZodType<Prisma.Users_permissionsCreateArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  data: z.union([ Users_permissionsCreateInputSchema,Users_permissionsUncheckedCreateInputSchema ]),
}).strict()

export const Users_permissionsUpsertArgsSchema: z.ZodType<Prisma.Users_permissionsUpsertArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  where: Users_permissionsWhereUniqueInputSchema,
  create: z.union([ Users_permissionsCreateInputSchema,Users_permissionsUncheckedCreateInputSchema ]),
  update: z.union([ Users_permissionsUpdateInputSchema,Users_permissionsUncheckedUpdateInputSchema ]),
}).strict()

export const Users_permissionsCreateManyArgsSchema: z.ZodType<Prisma.Users_permissionsCreateManyArgs> = z.object({
  data: z.union([ Users_permissionsCreateManyInputSchema,Users_permissionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Users_permissionsDeleteArgsSchema: z.ZodType<Prisma.Users_permissionsDeleteArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  where: Users_permissionsWhereUniqueInputSchema,
}).strict()

export const Users_permissionsUpdateArgsSchema: z.ZodType<Prisma.Users_permissionsUpdateArgs> = z.object({
  select: Users_permissionsSelectSchema.optional(),
  include: Users_permissionsIncludeSchema.optional(),
  data: z.union([ Users_permissionsUpdateInputSchema,Users_permissionsUncheckedUpdateInputSchema ]),
  where: Users_permissionsWhereUniqueInputSchema,
}).strict()

export const Users_permissionsUpdateManyArgsSchema: z.ZodType<Prisma.Users_permissionsUpdateManyArgs> = z.object({
  data: z.union([ Users_permissionsUpdateManyMutationInputSchema,Users_permissionsUncheckedUpdateManyInputSchema ]),
  where: Users_permissionsWhereInputSchema.optional(),
}).strict()

export const Users_permissionsDeleteManyArgsSchema: z.ZodType<Prisma.Users_permissionsDeleteManyArgs> = z.object({
  where: Users_permissionsWhereInputSchema.optional(),
}).strict()

export const Users_rolesCreateArgsSchema: z.ZodType<Prisma.Users_rolesCreateArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  data: z.union([ Users_rolesCreateInputSchema,Users_rolesUncheckedCreateInputSchema ]),
}).strict()

export const Users_rolesUpsertArgsSchema: z.ZodType<Prisma.Users_rolesUpsertArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  where: Users_rolesWhereUniqueInputSchema,
  create: z.union([ Users_rolesCreateInputSchema,Users_rolesUncheckedCreateInputSchema ]),
  update: z.union([ Users_rolesUpdateInputSchema,Users_rolesUncheckedUpdateInputSchema ]),
}).strict()

export const Users_rolesCreateManyArgsSchema: z.ZodType<Prisma.Users_rolesCreateManyArgs> = z.object({
  data: z.union([ Users_rolesCreateManyInputSchema,Users_rolesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Users_rolesDeleteArgsSchema: z.ZodType<Prisma.Users_rolesDeleteArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  where: Users_rolesWhereUniqueInputSchema,
}).strict()

export const Users_rolesUpdateArgsSchema: z.ZodType<Prisma.Users_rolesUpdateArgs> = z.object({
  select: Users_rolesSelectSchema.optional(),
  include: Users_rolesIncludeSchema.optional(),
  data: z.union([ Users_rolesUpdateInputSchema,Users_rolesUncheckedUpdateInputSchema ]),
  where: Users_rolesWhereUniqueInputSchema,
}).strict()

export const Users_rolesUpdateManyArgsSchema: z.ZodType<Prisma.Users_rolesUpdateManyArgs> = z.object({
  data: z.union([ Users_rolesUpdateManyMutationInputSchema,Users_rolesUncheckedUpdateManyInputSchema ]),
  where: Users_rolesWhereInputSchema.optional(),
}).strict()

export const Users_rolesDeleteManyArgsSchema: z.ZodType<Prisma.Users_rolesDeleteManyArgs> = z.object({
  where: Users_rolesWhereInputSchema.optional(),
}).strict()

export const Work_schedulesCreateArgsSchema: z.ZodType<Prisma.Work_schedulesCreateArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  data: z.union([ Work_schedulesCreateInputSchema,Work_schedulesUncheckedCreateInputSchema ]),
}).strict()

export const Work_schedulesUpsertArgsSchema: z.ZodType<Prisma.Work_schedulesUpsertArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  where: Work_schedulesWhereUniqueInputSchema,
  create: z.union([ Work_schedulesCreateInputSchema,Work_schedulesUncheckedCreateInputSchema ]),
  update: z.union([ Work_schedulesUpdateInputSchema,Work_schedulesUncheckedUpdateInputSchema ]),
}).strict()

export const Work_schedulesCreateManyArgsSchema: z.ZodType<Prisma.Work_schedulesCreateManyArgs> = z.object({
  data: z.union([ Work_schedulesCreateManyInputSchema,Work_schedulesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Work_schedulesDeleteArgsSchema: z.ZodType<Prisma.Work_schedulesDeleteArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  where: Work_schedulesWhereUniqueInputSchema,
}).strict()

export const Work_schedulesUpdateArgsSchema: z.ZodType<Prisma.Work_schedulesUpdateArgs> = z.object({
  select: Work_schedulesSelectSchema.optional(),
  include: Work_schedulesIncludeSchema.optional(),
  data: z.union([ Work_schedulesUpdateInputSchema,Work_schedulesUncheckedUpdateInputSchema ]),
  where: Work_schedulesWhereUniqueInputSchema,
}).strict()

export const Work_schedulesUpdateManyArgsSchema: z.ZodType<Prisma.Work_schedulesUpdateManyArgs> = z.object({
  data: z.union([ Work_schedulesUpdateManyMutationInputSchema,Work_schedulesUncheckedUpdateManyInputSchema ]),
  where: Work_schedulesWhereInputSchema.optional(),
}).strict()

export const Work_schedulesDeleteManyArgsSchema: z.ZodType<Prisma.Work_schedulesDeleteManyArgs> = z.object({
  where: Work_schedulesWhereInputSchema.optional(),
}).strict()

export const TerminalsCreateArgsSchema: z.ZodType<Prisma.TerminalsCreateArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  data: z.union([ TerminalsCreateInputSchema,TerminalsUncheckedCreateInputSchema ]),
}).strict()

export const TerminalsUpsertArgsSchema: z.ZodType<Prisma.TerminalsUpsertArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  where: TerminalsWhereUniqueInputSchema,
  create: z.union([ TerminalsCreateInputSchema,TerminalsUncheckedCreateInputSchema ]),
  update: z.union([ TerminalsUpdateInputSchema,TerminalsUncheckedUpdateInputSchema ]),
}).strict()

export const TerminalsCreateManyArgsSchema: z.ZodType<Prisma.TerminalsCreateManyArgs> = z.object({
  data: z.union([ TerminalsCreateManyInputSchema,TerminalsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const TerminalsDeleteArgsSchema: z.ZodType<Prisma.TerminalsDeleteArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  where: TerminalsWhereUniqueInputSchema,
}).strict()

export const TerminalsUpdateArgsSchema: z.ZodType<Prisma.TerminalsUpdateArgs> = z.object({
  select: TerminalsSelectSchema.optional(),
  include: TerminalsIncludeSchema.optional(),
  data: z.union([ TerminalsUpdateInputSchema,TerminalsUncheckedUpdateInputSchema ]),
  where: TerminalsWhereUniqueInputSchema,
}).strict()

export const TerminalsUpdateManyArgsSchema: z.ZodType<Prisma.TerminalsUpdateManyArgs> = z.object({
  data: z.union([ TerminalsUpdateManyMutationInputSchema,TerminalsUncheckedUpdateManyInputSchema ]),
  where: TerminalsWhereInputSchema.optional(),
}).strict()

export const TerminalsDeleteManyArgsSchema: z.ZodType<Prisma.TerminalsDeleteManyArgs> = z.object({
  where: TerminalsWhereInputSchema.optional(),
}).strict()

export const OrganizationCreateArgsSchema: z.ZodType<Prisma.OrganizationCreateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
}).strict()

export const OrganizationUpsertArgsSchema: z.ZodType<Prisma.OrganizationUpsertArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
  create: z.union([ OrganizationCreateInputSchema,OrganizationUncheckedCreateInputSchema ]),
  update: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
}).strict()

export const OrganizationCreateManyArgsSchema: z.ZodType<Prisma.OrganizationCreateManyArgs> = z.object({
  data: z.union([ OrganizationCreateManyInputSchema,OrganizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const OrganizationDeleteArgsSchema: z.ZodType<Prisma.OrganizationDeleteArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateArgsSchema: z.ZodType<Prisma.OrganizationUpdateArgs> = z.object({
  select: OrganizationSelectSchema.optional(),
  include: OrganizationIncludeSchema.optional(),
  data: z.union([ OrganizationUpdateInputSchema,OrganizationUncheckedUpdateInputSchema ]),
  where: OrganizationWhereUniqueInputSchema,
}).strict()

export const OrganizationUpdateManyArgsSchema: z.ZodType<Prisma.OrganizationUpdateManyArgs> = z.object({
  data: z.union([ OrganizationUpdateManyMutationInputSchema,OrganizationUncheckedUpdateManyInputSchema ]),
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const OrganizationDeleteManyArgsSchema: z.ZodType<Prisma.OrganizationDeleteManyArgs> = z.object({
  where: OrganizationWhereInputSchema.optional(),
}).strict()

export const Users_terminalsCreateArgsSchema: z.ZodType<Prisma.Users_terminalsCreateArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  data: z.union([ Users_terminalsCreateInputSchema,Users_terminalsUncheckedCreateInputSchema ]),
}).strict()

export const Users_terminalsUpsertArgsSchema: z.ZodType<Prisma.Users_terminalsUpsertArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  where: Users_terminalsWhereUniqueInputSchema,
  create: z.union([ Users_terminalsCreateInputSchema,Users_terminalsUncheckedCreateInputSchema ]),
  update: z.union([ Users_terminalsUpdateInputSchema,Users_terminalsUncheckedUpdateInputSchema ]),
}).strict()

export const Users_terminalsCreateManyArgsSchema: z.ZodType<Prisma.Users_terminalsCreateManyArgs> = z.object({
  data: z.union([ Users_terminalsCreateManyInputSchema,Users_terminalsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Users_terminalsDeleteArgsSchema: z.ZodType<Prisma.Users_terminalsDeleteArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  where: Users_terminalsWhereUniqueInputSchema,
}).strict()

export const Users_terminalsUpdateArgsSchema: z.ZodType<Prisma.Users_terminalsUpdateArgs> = z.object({
  select: Users_terminalsSelectSchema.optional(),
  include: Users_terminalsIncludeSchema.optional(),
  data: z.union([ Users_terminalsUpdateInputSchema,Users_terminalsUncheckedUpdateInputSchema ]),
  where: Users_terminalsWhereUniqueInputSchema,
}).strict()

export const Users_terminalsUpdateManyArgsSchema: z.ZodType<Prisma.Users_terminalsUpdateManyArgs> = z.object({
  data: z.union([ Users_terminalsUpdateManyMutationInputSchema,Users_terminalsUncheckedUpdateManyInputSchema ]),
  where: Users_terminalsWhereInputSchema.optional(),
}).strict()

export const Users_terminalsDeleteManyArgsSchema: z.ZodType<Prisma.Users_terminalsDeleteManyArgs> = z.object({
  where: Users_terminalsWhereInputSchema.optional(),
}).strict()

export const Users_work_schedulesCreateArgsSchema: z.ZodType<Prisma.Users_work_schedulesCreateArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  data: z.union([ Users_work_schedulesCreateInputSchema,Users_work_schedulesUncheckedCreateInputSchema ]),
}).strict()

export const Users_work_schedulesUpsertArgsSchema: z.ZodType<Prisma.Users_work_schedulesUpsertArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  where: Users_work_schedulesWhereUniqueInputSchema,
  create: z.union([ Users_work_schedulesCreateInputSchema,Users_work_schedulesUncheckedCreateInputSchema ]),
  update: z.union([ Users_work_schedulesUpdateInputSchema,Users_work_schedulesUncheckedUpdateInputSchema ]),
}).strict()

export const Users_work_schedulesCreateManyArgsSchema: z.ZodType<Prisma.Users_work_schedulesCreateManyArgs> = z.object({
  data: z.union([ Users_work_schedulesCreateManyInputSchema,Users_work_schedulesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Users_work_schedulesDeleteArgsSchema: z.ZodType<Prisma.Users_work_schedulesDeleteArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  where: Users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const Users_work_schedulesUpdateArgsSchema: z.ZodType<Prisma.Users_work_schedulesUpdateArgs> = z.object({
  select: Users_work_schedulesSelectSchema.optional(),
  include: Users_work_schedulesIncludeSchema.optional(),
  data: z.union([ Users_work_schedulesUpdateInputSchema,Users_work_schedulesUncheckedUpdateInputSchema ]),
  where: Users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const Users_work_schedulesUpdateManyArgsSchema: z.ZodType<Prisma.Users_work_schedulesUpdateManyArgs> = z.object({
  data: z.union([ Users_work_schedulesUpdateManyMutationInputSchema,Users_work_schedulesUncheckedUpdateManyInputSchema ]),
  where: Users_work_schedulesWhereInputSchema.optional(),
}).strict()

export const Users_work_schedulesDeleteManyArgsSchema: z.ZodType<Prisma.Users_work_schedulesDeleteManyArgs> = z.object({
  where: Users_work_schedulesWhereInputSchema.optional(),
}).strict()

export const Work_schedule_entriesCreateArgsSchema: z.ZodType<Prisma.Work_schedule_entriesCreateArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  data: z.union([ Work_schedule_entriesCreateInputSchema,Work_schedule_entriesUncheckedCreateInputSchema ]),
}).strict()

export const Work_schedule_entriesUpsertArgsSchema: z.ZodType<Prisma.Work_schedule_entriesUpsertArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  where: Work_schedule_entriesWhereUniqueInputSchema,
  create: z.union([ Work_schedule_entriesCreateInputSchema,Work_schedule_entriesUncheckedCreateInputSchema ]),
  update: z.union([ Work_schedule_entriesUpdateInputSchema,Work_schedule_entriesUncheckedUpdateInputSchema ]),
}).strict()

export const Work_schedule_entriesCreateManyArgsSchema: z.ZodType<Prisma.Work_schedule_entriesCreateManyArgs> = z.object({
  data: z.union([ Work_schedule_entriesCreateManyInputSchema,Work_schedule_entriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Work_schedule_entriesDeleteArgsSchema: z.ZodType<Prisma.Work_schedule_entriesDeleteArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  where: Work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const Work_schedule_entriesUpdateArgsSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateArgs> = z.object({
  select: Work_schedule_entriesSelectSchema.optional(),
  include: Work_schedule_entriesIncludeSchema.optional(),
  data: z.union([ Work_schedule_entriesUpdateInputSchema,Work_schedule_entriesUncheckedUpdateInputSchema ]),
  where: Work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const Work_schedule_entriesUpdateManyArgsSchema: z.ZodType<Prisma.Work_schedule_entriesUpdateManyArgs> = z.object({
  data: z.union([ Work_schedule_entriesUpdateManyMutationInputSchema,Work_schedule_entriesUncheckedUpdateManyInputSchema ]),
  where: Work_schedule_entriesWhereInputSchema.optional(),
}).strict()

export const Work_schedule_entriesDeleteManyArgsSchema: z.ZodType<Prisma.Work_schedule_entriesDeleteManyArgs> = z.object({
  where: Work_schedule_entriesWhereInputSchema.optional(),
}).strict()

export const Api_tokensCreateArgsSchema: z.ZodType<Prisma.Api_tokensCreateArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  data: z.union([ Api_tokensCreateInputSchema,Api_tokensUncheckedCreateInputSchema ]),
}).strict()

export const Api_tokensUpsertArgsSchema: z.ZodType<Prisma.Api_tokensUpsertArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  where: Api_tokensWhereUniqueInputSchema,
  create: z.union([ Api_tokensCreateInputSchema,Api_tokensUncheckedCreateInputSchema ]),
  update: z.union([ Api_tokensUpdateInputSchema,Api_tokensUncheckedUpdateInputSchema ]),
}).strict()

export const Api_tokensCreateManyArgsSchema: z.ZodType<Prisma.Api_tokensCreateManyArgs> = z.object({
  data: z.union([ Api_tokensCreateManyInputSchema,Api_tokensCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Api_tokensDeleteArgsSchema: z.ZodType<Prisma.Api_tokensDeleteArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  where: Api_tokensWhereUniqueInputSchema,
}).strict()

export const Api_tokensUpdateArgsSchema: z.ZodType<Prisma.Api_tokensUpdateArgs> = z.object({
  select: Api_tokensSelectSchema.optional(),
  include: Api_tokensIncludeSchema.optional(),
  data: z.union([ Api_tokensUpdateInputSchema,Api_tokensUncheckedUpdateInputSchema ]),
  where: Api_tokensWhereUniqueInputSchema,
}).strict()

export const Api_tokensUpdateManyArgsSchema: z.ZodType<Prisma.Api_tokensUpdateManyArgs> = z.object({
  data: z.union([ Api_tokensUpdateManyMutationInputSchema,Api_tokensUncheckedUpdateManyInputSchema ]),
  where: Api_tokensWhereInputSchema.optional(),
}).strict()

export const Api_tokensDeleteManyArgsSchema: z.ZodType<Prisma.Api_tokensDeleteManyArgs> = z.object({
  where: Api_tokensWhereInputSchema.optional(),
}).strict()

export const TimesheetCreateArgsSchema: z.ZodType<Prisma.TimesheetCreateArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  data: z.union([ TimesheetCreateInputSchema,TimesheetUncheckedCreateInputSchema ]),
}).strict()

export const TimesheetUpsertArgsSchema: z.ZodType<Prisma.TimesheetUpsertArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  where: TimesheetWhereUniqueInputSchema,
  create: z.union([ TimesheetCreateInputSchema,TimesheetUncheckedCreateInputSchema ]),
  update: z.union([ TimesheetUpdateInputSchema,TimesheetUncheckedUpdateInputSchema ]),
}).strict()

export const TimesheetCreateManyArgsSchema: z.ZodType<Prisma.TimesheetCreateManyArgs> = z.object({
  data: z.union([ TimesheetCreateManyInputSchema,TimesheetCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const TimesheetDeleteArgsSchema: z.ZodType<Prisma.TimesheetDeleteArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  where: TimesheetWhereUniqueInputSchema,
}).strict()

export const TimesheetUpdateArgsSchema: z.ZodType<Prisma.TimesheetUpdateArgs> = z.object({
  select: TimesheetSelectSchema.optional(),
  include: TimesheetIncludeSchema.optional(),
  data: z.union([ TimesheetUpdateInputSchema,TimesheetUncheckedUpdateInputSchema ]),
  where: TimesheetWhereUniqueInputSchema,
}).strict()

export const TimesheetUpdateManyArgsSchema: z.ZodType<Prisma.TimesheetUpdateManyArgs> = z.object({
  data: z.union([ TimesheetUpdateManyMutationInputSchema,TimesheetUncheckedUpdateManyInputSchema ]),
  where: TimesheetWhereInputSchema.optional(),
}).strict()

export const TimesheetDeleteManyArgsSchema: z.ZodType<Prisma.TimesheetDeleteManyArgs> = z.object({
  where: TimesheetWhereInputSchema.optional(),
}).strict()

export const Scheduled_reportsCreateArgsSchema: z.ZodType<Prisma.Scheduled_reportsCreateArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  data: z.union([ Scheduled_reportsCreateInputSchema,Scheduled_reportsUncheckedCreateInputSchema ]),
}).strict()

export const Scheduled_reportsUpsertArgsSchema: z.ZodType<Prisma.Scheduled_reportsUpsertArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  where: Scheduled_reportsWhereUniqueInputSchema,
  create: z.union([ Scheduled_reportsCreateInputSchema,Scheduled_reportsUncheckedCreateInputSchema ]),
  update: z.union([ Scheduled_reportsUpdateInputSchema,Scheduled_reportsUncheckedUpdateInputSchema ]),
}).strict()

export const Scheduled_reportsCreateManyArgsSchema: z.ZodType<Prisma.Scheduled_reportsCreateManyArgs> = z.object({
  data: z.union([ Scheduled_reportsCreateManyInputSchema,Scheduled_reportsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Scheduled_reportsDeleteArgsSchema: z.ZodType<Prisma.Scheduled_reportsDeleteArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  where: Scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const Scheduled_reportsUpdateArgsSchema: z.ZodType<Prisma.Scheduled_reportsUpdateArgs> = z.object({
  select: Scheduled_reportsSelectSchema.optional(),
  include: Scheduled_reportsIncludeSchema.optional(),
  data: z.union([ Scheduled_reportsUpdateInputSchema,Scheduled_reportsUncheckedUpdateInputSchema ]),
  where: Scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const Scheduled_reportsUpdateManyArgsSchema: z.ZodType<Prisma.Scheduled_reportsUpdateManyArgs> = z.object({
  data: z.union([ Scheduled_reportsUpdateManyMutationInputSchema,Scheduled_reportsUncheckedUpdateManyInputSchema ]),
  where: Scheduled_reportsWhereInputSchema.optional(),
}).strict()

export const Scheduled_reportsDeleteManyArgsSchema: z.ZodType<Prisma.Scheduled_reportsDeleteManyArgs> = z.object({
  where: Scheduled_reportsWhereInputSchema.optional(),
}).strict()

export const Scheduled_reports_subscriptionCreateArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  data: z.union([ Scheduled_reports_subscriptionCreateInputSchema,Scheduled_reports_subscriptionUncheckedCreateInputSchema ]),
}).strict()

export const Scheduled_reports_subscriptionUpsertArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpsertArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  where: Scheduled_reports_subscriptionWhereUniqueInputSchema,
  create: z.union([ Scheduled_reports_subscriptionCreateInputSchema,Scheduled_reports_subscriptionUncheckedCreateInputSchema ]),
  update: z.union([ Scheduled_reports_subscriptionUpdateInputSchema,Scheduled_reports_subscriptionUncheckedUpdateInputSchema ]),
}).strict()

export const Scheduled_reports_subscriptionCreateManyArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionCreateManyArgs> = z.object({
  data: z.union([ Scheduled_reports_subscriptionCreateManyInputSchema,Scheduled_reports_subscriptionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const Scheduled_reports_subscriptionDeleteArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionDeleteArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  where: Scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const Scheduled_reports_subscriptionUpdateArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateArgs> = z.object({
  select: Scheduled_reports_subscriptionSelectSchema.optional(),
  include: Scheduled_reports_subscriptionIncludeSchema.optional(),
  data: z.union([ Scheduled_reports_subscriptionUpdateInputSchema,Scheduled_reports_subscriptionUncheckedUpdateInputSchema ]),
  where: Scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const Scheduled_reports_subscriptionUpdateManyArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionUpdateManyArgs> = z.object({
  data: z.union([ Scheduled_reports_subscriptionUpdateManyMutationInputSchema,Scheduled_reports_subscriptionUncheckedUpdateManyInputSchema ]),
  where: Scheduled_reports_subscriptionWhereInputSchema.optional(),
}).strict()

export const Scheduled_reports_subscriptionDeleteManyArgsSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionDeleteManyArgs> = z.object({
  where: Scheduled_reports_subscriptionWhereInputSchema.optional(),
}).strict()