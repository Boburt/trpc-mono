import { z } from 'zod';
import type { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const PermissionsScalarFieldEnumSchema = z.enum(['id','slug','description','active','created_at','updated_at','created_by','updated_by']);

export const RolesScalarFieldEnumSchema = z.enum(['id','name','code','active','created_at','updated_at','created_by','updated_by']);

export const Roles_permissionsScalarFieldEnumSchema = z.enum(['role_id','permission_id','created_by','updated_by']);

export const UsersScalarFieldEnumSchema = z.enum(['id','phone','first_name','last_name','password','is_super_user','status','card_name','card_number','birth_date','car_model','car_number','is_online','latitude','longitude','fcm_token','wallet_balance','max_active_order_count','doc_files','order_start_date','app_version','created_at','updated_at','api_token','tg_id']);

export const Users_permissionsScalarFieldEnumSchema = z.enum(['user_id','permission_id','created_by','updated_by']);

export const Users_rolesScalarFieldEnumSchema = z.enum(['user_id','role_id','created_by','updated_by']);

export const Work_schedulesScalarFieldEnumSchema = z.enum(['id','name','active','organization_id','days','start_time','end_time','max_start_time','bonus_price','created_at','updated_at','created_by','updated_by']);

export const TerminalsScalarFieldEnumSchema = z.enum(['id','name','active','phone','address','latitude','longitude','external_id','organization_id','manager_name','created_at','updated_at']);

export const OrganizationScalarFieldEnumSchema = z.enum(['id','name','external_id','active','system_type','phone','iiko_login','webhook','group_id','apelsin_login','apelsin_password','sender_name','sender_number','description','max_distance','max_active_order_count','max_order_close_distance','payment_type','support_chat_url','icon_url','allow_yandex_delivery','created_at','updated_at','created_by','updated_by']);

export const Users_terminalsScalarFieldEnumSchema = z.enum(['user_id','terminal_id']);

export const Users_work_schedulesScalarFieldEnumSchema = z.enum(['user_id','work_schedule_id']);

export const Work_schedule_entriesScalarFieldEnumSchema = z.enum(['id','user_id','work_schedule_id','date_start','date_finish','duration','ip_open','ip_close','lat_open','lat_close','lon_open','lon_close','current_status','late','created_at','updated_at','created_by','updated_by']);

export const Api_tokensScalarFieldEnumSchema = z.enum(['id','active','token','organization_id','created_at','updated_at','created_by','updated_by']);

export const TimesheetScalarFieldEnumSchema = z.enum(['id','user_id','is_late','date','created_at','updated_at']);

export const Scheduled_reportsScalarFieldEnumSchema = z.enum(['id','name','code','cron','created_at','updated_at']);

export const Scheduled_reports_subscriptionScalarFieldEnumSchema = z.enum(['id','report_id','user_id','created_at','updated_at']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const NullsOrderSchema = z.enum(['first','last']);

export const user_statusSchema = z.enum(['active','blocked','inactive']);

export type user_statusType = `${z.infer<typeof user_statusSchema>}`

export const organization_system_typeSchema = z.enum(['iiko','r_keeper','jowi']);

export type organization_system_typeType = `${z.infer<typeof organization_system_typeSchema>}`

export const work_schedule_entry_statusSchema = z.enum(['open','closed']);

export type work_schedule_entry_statusType = `${z.infer<typeof work_schedule_entry_statusSchema>}`

export const organization_payment_typesSchema = z.enum(['cash','card','client']);

export type organization_payment_typesType = `${z.infer<typeof organization_payment_typesSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// PERMISSIONS SCHEMA
/////////////////////////////////////////

export const permissionsSchema = z.object({
  id: z.string(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type permissions = z.infer<typeof permissionsSchema>

// PERMISSIONS RELATION SCHEMA
//------------------------------------------------------

export type permissionsRelations = {
  users_permissions_created_byTousers?: usersWithRelations | null;
  users_permissions_updated_byTousers?: usersWithRelations | null;
  roles_permissions: roles_permissionsWithRelations[];
  users_permissions: users_permissionsWithRelations[];
};

export type permissionsWithRelations = z.infer<typeof permissionsSchema> & permissionsRelations

export const permissionsWithRelationsSchema: z.ZodType<permissionsWithRelations> = permissionsSchema.merge(z.object({
  users_permissions_created_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  users_permissions_updated_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  roles_permissions: z.lazy(() => roles_permissionsWithRelationsSchema).array(),
  users_permissions: z.lazy(() => users_permissionsWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// ROLES SCHEMA
/////////////////////////////////////////

export const rolesSchema = z.object({
  id: z.string(),
  name: z.string(),
  code: z.string().nullish(),
  active: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type roles = z.infer<typeof rolesSchema>

// ROLES RELATION SCHEMA
//------------------------------------------------------

export type rolesRelations = {
  users_roles_created_byTousers?: usersWithRelations | null;
  users_roles_updated_byTousers?: usersWithRelations | null;
  roles_permissions: roles_permissionsWithRelations[];
  users_roles: users_rolesWithRelations[];
};

export type rolesWithRelations = z.infer<typeof rolesSchema> & rolesRelations

export const rolesWithRelationsSchema: z.ZodType<rolesWithRelations> = rolesSchema.merge(z.object({
  users_roles_created_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  users_roles_updated_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  roles_permissions: z.lazy(() => roles_permissionsWithRelationsSchema).array(),
  users_roles: z.lazy(() => users_rolesWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// ROLES PERMISSIONS SCHEMA
/////////////////////////////////////////

export const roles_permissionsSchema = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type roles_permissions = z.infer<typeof roles_permissionsSchema>

// ROLES PERMISSIONS RELATION SCHEMA
//------------------------------------------------------

export type roles_permissionsRelations = {
  users_roles_permissions_created_byTousers?: usersWithRelations | null;
  permissions: permissionsWithRelations;
  roles: rolesWithRelations;
  users_roles_permissions_updated_byTousers?: usersWithRelations | null;
};

export type roles_permissionsWithRelations = z.infer<typeof roles_permissionsSchema> & roles_permissionsRelations

export const roles_permissionsWithRelationsSchema: z.ZodType<roles_permissionsWithRelations> = roles_permissionsSchema.merge(z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  permissions: z.lazy(() => permissionsWithRelationsSchema),
  roles: z.lazy(() => rolesWithRelationsSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
}))

/////////////////////////////////////////
// USERS SCHEMA
/////////////////////////////////////////

export const usersSchema = z.object({
  status: user_statusSchema,
  id: z.string(),
  phone: z.string(),
  first_name: z.string().nullish(),
  last_name: z.string().nullish(),
  password: z.string().nullish(),
  is_super_user: z.boolean(),
  card_name: z.string().nullish(),
  card_number: z.string().nullish(),
  birth_date: z.coerce.date().nullish(),
  car_model: z.string().nullish(),
  car_number: z.string().nullish(),
  is_online: z.boolean(),
  latitude: z.number().nullish(),
  longitude: z.number().nullish(),
  fcm_token: z.string().nullish(),
  wallet_balance: z.number(),
  max_active_order_count: z.number().int().nullish(),
  doc_files: z.string().array(),
  order_start_date: z.coerce.date().nullish(),
  app_version: z.string().nullish(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  api_token: z.string().nullish(),
  tg_id: z.string().nullish(),
})

export type users = z.infer<typeof usersSchema>

// USERS RELATION SCHEMA
//------------------------------------------------------

export type usersRelations = {
  permissions_permissions_created_byTousers: permissionsWithRelations[];
  permissions_permissions_updated_byTousers: permissionsWithRelations[];
  roles_roles_created_byTousers: rolesWithRelations[];
  roles_roles_updated_byTousers: rolesWithRelations[];
  roles_permissions_roles_permissions_created_byTousers: roles_permissionsWithRelations[];
  roles_permissions_roles_permissions_updated_byTousers: roles_permissionsWithRelations[];
  users_permissions_usersTousers_permissions_created_by: users_permissionsWithRelations[];
  users_permissions_usersTousers_permissions_updated_by: users_permissionsWithRelations[];
  users_permissions_usersTousers_permissions_user_id: users_permissionsWithRelations[];
  users_roles_usersTousers_roles_created_by: users_rolesWithRelations[];
  users_roles_usersTousers_roles_updated_by: users_rolesWithRelations[];
  users_roles_usersTousers_roles_user_id: users_rolesWithRelations[];
  organization_created_byTousers: organizationWithRelations[];
  organization_updated_byTousers: organizationWithRelations[];
  work_schedules_created_byTousers: work_schedulesWithRelations[];
  work_schedules_updated_byTousers: work_schedulesWithRelations[];
  users_terminals: users_terminalsWithRelations[];
  users_work_schedules: users_work_schedulesWithRelations[];
  work_schedule_entries_created_byTousers: work_schedule_entriesWithRelations[];
  work_schedule_entries_updated_byTousers: work_schedule_entriesWithRelations[];
  work_schedule_entries_users: work_schedule_entriesWithRelations[];
  api_tokens_created_byTousers: api_tokensWithRelations[];
  api_tokens_updated_byTousers: api_tokensWithRelations[];
  timesheet_users: timesheetWithRelations[];
  scheduled_reports_subscription_users: scheduled_reports_subscriptionWithRelations[];
};

export type usersWithRelations = z.infer<typeof usersSchema> & usersRelations

export const usersWithRelationsSchema: z.ZodType<usersWithRelations> = usersSchema.merge(z.object({
  permissions_permissions_created_byTousers: z.lazy(() => permissionsWithRelationsSchema).array(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsWithRelationsSchema).array(),
  roles_roles_created_byTousers: z.lazy(() => rolesWithRelationsSchema).array(),
  roles_roles_updated_byTousers: z.lazy(() => rolesWithRelationsSchema).array(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsWithRelationsSchema).array(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsWithRelationsSchema).array(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsWithRelationsSchema).array(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsWithRelationsSchema).array(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsWithRelationsSchema).array(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesWithRelationsSchema).array(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesWithRelationsSchema).array(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesWithRelationsSchema).array(),
  organization_created_byTousers: z.lazy(() => organizationWithRelationsSchema).array(),
  organization_updated_byTousers: z.lazy(() => organizationWithRelationsSchema).array(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesWithRelationsSchema).array(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesWithRelationsSchema).array(),
  users_terminals: z.lazy(() => users_terminalsWithRelationsSchema).array(),
  users_work_schedules: z.lazy(() => users_work_schedulesWithRelationsSchema).array(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesWithRelationsSchema).array(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesWithRelationsSchema).array(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesWithRelationsSchema).array(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensWithRelationsSchema).array(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensWithRelationsSchema).array(),
  timesheet_users: z.lazy(() => timesheetWithRelationsSchema).array(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// USERS PERMISSIONS SCHEMA
/////////////////////////////////////////

export const users_permissionsSchema = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type users_permissions = z.infer<typeof users_permissionsSchema>

// USERS PERMISSIONS RELATION SCHEMA
//------------------------------------------------------

export type users_permissionsRelations = {
  users_usersTousers_permissions_created_by?: usersWithRelations | null;
  permissions: permissionsWithRelations;
  users_usersTousers_permissions_updated_by?: usersWithRelations | null;
  users_usersTousers_permissions_user_id: usersWithRelations;
};

export type users_permissionsWithRelations = z.infer<typeof users_permissionsSchema> & users_permissionsRelations

export const users_permissionsWithRelationsSchema: z.ZodType<users_permissionsWithRelations> = users_permissionsSchema.merge(z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersWithRelationsSchema).nullish(),
  permissions: z.lazy(() => permissionsWithRelationsSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersWithRelationsSchema).nullish(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersWithRelationsSchema),
}))

/////////////////////////////////////////
// USERS ROLES SCHEMA
/////////////////////////////////////////

export const users_rolesSchema = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type users_roles = z.infer<typeof users_rolesSchema>

// USERS ROLES RELATION SCHEMA
//------------------------------------------------------

export type users_rolesRelations = {
  users_usersTousers_roles_created_by?: usersWithRelations | null;
  roles: rolesWithRelations;
  users_usersTousers_roles_updated_by?: usersWithRelations | null;
  users_usersTousers_roles_user_id: usersWithRelations;
};

export type users_rolesWithRelations = z.infer<typeof users_rolesSchema> & users_rolesRelations

export const users_rolesWithRelationsSchema: z.ZodType<users_rolesWithRelations> = users_rolesSchema.merge(z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersWithRelationsSchema).nullish(),
  roles: z.lazy(() => rolesWithRelationsSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => usersWithRelationsSchema).nullish(),
  users_usersTousers_roles_user_id: z.lazy(() => usersWithRelationsSchema),
}))

/////////////////////////////////////////
// WORK SCHEDULES SCHEMA
/////////////////////////////////////////

export const work_schedulesSchema = z.object({
  id: z.string(),
  name: z.string(),
  active: z.boolean(),
  organization_id: z.string(),
  days: z.string().array(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type work_schedules = z.infer<typeof work_schedulesSchema>

// WORK SCHEDULES RELATION SCHEMA
//------------------------------------------------------

export type work_schedulesRelations = {
  organization: organizationWithRelations;
  work_schedules_created_byTousers?: usersWithRelations | null;
  work_schedules_updated_byTousers?: usersWithRelations | null;
  users_work_schedules: users_work_schedulesWithRelations[];
  work_schedule_entries_work_schedules: work_schedule_entriesWithRelations[];
};

export type work_schedulesWithRelations = z.infer<typeof work_schedulesSchema> & work_schedulesRelations

export const work_schedulesWithRelationsSchema: z.ZodType<work_schedulesWithRelations> = work_schedulesSchema.merge(z.object({
  organization: z.lazy(() => organizationWithRelationsSchema),
  work_schedules_created_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  work_schedules_updated_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  users_work_schedules: z.lazy(() => users_work_schedulesWithRelationsSchema).array(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// TERMINALS SCHEMA
/////////////////////////////////////////

export const terminalsSchema = z.object({
  id: z.string(),
  name: z.string(),
  active: z.boolean(),
  phone: z.string().nullish(),
  address: z.string().nullish(),
  latitude: z.number(),
  longitude: z.number(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().nullish(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type terminals = z.infer<typeof terminalsSchema>

// TERMINALS RELATION SCHEMA
//------------------------------------------------------

export type terminalsRelations = {
  organization: organizationWithRelations;
  users_terminals: users_terminalsWithRelations[];
};

export type terminalsWithRelations = z.infer<typeof terminalsSchema> & terminalsRelations

export const terminalsWithRelationsSchema: z.ZodType<terminalsWithRelations> = terminalsSchema.merge(z.object({
  organization: z.lazy(() => organizationWithRelationsSchema),
  users_terminals: z.lazy(() => users_terminalsWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// ORGANIZATION SCHEMA
/////////////////////////////////////////

export const organizationSchema = z.object({
  system_type: organization_system_typeSchema,
  payment_type: organization_payment_typesSchema,
  id: z.string(),
  name: z.string(),
  external_id: z.string().nullish(),
  active: z.boolean(),
  phone: z.string(),
  iiko_login: z.string().nullish(),
  webhook: z.string().nullish(),
  group_id: z.string().nullish(),
  apelsin_login: z.string().nullish(),
  apelsin_password: z.string().nullish(),
  sender_name: z.string().nullish(),
  sender_number: z.string().nullish(),
  description: z.string().nullish(),
  max_distance: z.number().int(),
  max_active_order_count: z.number().int(),
  max_order_close_distance: z.number().int(),
  support_chat_url: z.string().nullish(),
  icon_url: z.string().nullish(),
  allow_yandex_delivery: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type organization = z.infer<typeof organizationSchema>

// ORGANIZATION RELATION SCHEMA
//------------------------------------------------------

export type organizationRelations = {
  work_schedules_organization_idTorganization: work_schedulesWithRelations[];
  organization_created_byTousers?: usersWithRelations | null;
  organization_updated_byTousers?: usersWithRelations | null;
  terminals_organization_idTorganization: terminalsWithRelations[];
  api_tokens_organization: api_tokensWithRelations[];
};

export type organizationWithRelations = z.infer<typeof organizationSchema> & organizationRelations

export const organizationWithRelationsSchema: z.ZodType<organizationWithRelations> = organizationSchema.merge(z.object({
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesWithRelationsSchema).array(),
  organization_created_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  organization_updated_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  terminals_organization_idTorganization: z.lazy(() => terminalsWithRelationsSchema).array(),
  api_tokens_organization: z.lazy(() => api_tokensWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// USERS TERMINALS SCHEMA
/////////////////////////////////////////

export const users_terminalsSchema = z.object({
  user_id: z.string(),
  terminal_id: z.string(),
})

export type users_terminals = z.infer<typeof users_terminalsSchema>

// USERS TERMINALS RELATION SCHEMA
//------------------------------------------------------

export type users_terminalsRelations = {
  users: usersWithRelations;
  terminals: terminalsWithRelations;
};

export type users_terminalsWithRelations = z.infer<typeof users_terminalsSchema> & users_terminalsRelations

export const users_terminalsWithRelationsSchema: z.ZodType<users_terminalsWithRelations> = users_terminalsSchema.merge(z.object({
  users: z.lazy(() => usersWithRelationsSchema),
  terminals: z.lazy(() => terminalsWithRelationsSchema),
}))

/////////////////////////////////////////
// USERS WORK SCHEDULES SCHEMA
/////////////////////////////////////////

export const users_work_schedulesSchema = z.object({
  user_id: z.string(),
  work_schedule_id: z.string(),
})

export type users_work_schedules = z.infer<typeof users_work_schedulesSchema>

// USERS WORK SCHEDULES RELATION SCHEMA
//------------------------------------------------------

export type users_work_schedulesRelations = {
  users: usersWithRelations;
  work_schedules: work_schedulesWithRelations;
};

export type users_work_schedulesWithRelations = z.infer<typeof users_work_schedulesSchema> & users_work_schedulesRelations

export const users_work_schedulesWithRelationsSchema: z.ZodType<users_work_schedulesWithRelations> = users_work_schedulesSchema.merge(z.object({
  users: z.lazy(() => usersWithRelationsSchema),
  work_schedules: z.lazy(() => work_schedulesWithRelationsSchema),
}))

/////////////////////////////////////////
// WORK SCHEDULE ENTRIES SCHEMA
/////////////////////////////////////////

export const work_schedule_entriesSchema = z.object({
  current_status: work_schedule_entry_statusSchema,
  id: z.string(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().nullish(),
  duration: z.number().int(),
  ip_open: z.string().nullish(),
  ip_close: z.string().nullish(),
  lat_open: z.number(),
  lat_close: z.number().nullish(),
  lon_open: z.number(),
  lon_close: z.number().nullish(),
  late: z.boolean(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type work_schedule_entries = z.infer<typeof work_schedule_entriesSchema>

// WORK SCHEDULE ENTRIES RELATION SCHEMA
//------------------------------------------------------

export type work_schedule_entriesRelations = {
  work_schedule_entries_created_byTousers?: usersWithRelations | null;
  work_schedule_entries_updated_byTousers?: usersWithRelations | null;
  work_schedule_entries_users: usersWithRelations;
  work_schedule_entries_work_schedules: work_schedulesWithRelations;
};

export type work_schedule_entriesWithRelations = z.infer<typeof work_schedule_entriesSchema> & work_schedule_entriesRelations

export const work_schedule_entriesWithRelationsSchema: z.ZodType<work_schedule_entriesWithRelations> = work_schedule_entriesSchema.merge(z.object({
  work_schedule_entries_created_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  work_schedule_entries_users: z.lazy(() => usersWithRelationsSchema),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesWithRelationsSchema),
}))

/////////////////////////////////////////
// API TOKENS SCHEMA
/////////////////////////////////////////

export const api_tokensSchema = z.object({
  id: z.string(),
  active: z.boolean(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  created_by: z.string().nullish(),
  updated_by: z.string().nullish(),
})

export type api_tokens = z.infer<typeof api_tokensSchema>

// API TOKENS RELATION SCHEMA
//------------------------------------------------------

export type api_tokensRelations = {
  api_tokens_created_byTousers?: usersWithRelations | null;
  api_tokens_updated_byTousers?: usersWithRelations | null;
  api_tokens_organization: organizationWithRelations;
};

export type api_tokensWithRelations = z.infer<typeof api_tokensSchema> & api_tokensRelations

export const api_tokensWithRelationsSchema: z.ZodType<api_tokensWithRelations> = api_tokensSchema.merge(z.object({
  api_tokens_created_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  api_tokens_updated_byTousers: z.lazy(() => usersWithRelationsSchema).nullish(),
  api_tokens_organization: z.lazy(() => organizationWithRelationsSchema),
}))

/////////////////////////////////////////
// TIMESHEET SCHEMA
/////////////////////////////////////////

export const timesheetSchema = z.object({
  id: z.string(),
  user_id: z.string(),
  is_late: z.boolean(),
  date: z.coerce.date(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type timesheet = z.infer<typeof timesheetSchema>

// TIMESHEET RELATION SCHEMA
//------------------------------------------------------

export type timesheetRelations = {
  timesheet_users: usersWithRelations;
};

export type timesheetWithRelations = z.infer<typeof timesheetSchema> & timesheetRelations

export const timesheetWithRelationsSchema: z.ZodType<timesheetWithRelations> = timesheetSchema.merge(z.object({
  timesheet_users: z.lazy(() => usersWithRelationsSchema),
}))

/////////////////////////////////////////
// SCHEDULED REPORTS SCHEMA
/////////////////////////////////////////

export const scheduled_reportsSchema = z.object({
  id: z.string(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type scheduled_reports = z.infer<typeof scheduled_reportsSchema>

// SCHEDULED REPORTS RELATION SCHEMA
//------------------------------------------------------

export type scheduled_reportsRelations = {
  scheduled_reports_scheduled_reports_subscriptions: scheduled_reports_subscriptionWithRelations[];
};

export type scheduled_reportsWithRelations = z.infer<typeof scheduled_reportsSchema> & scheduled_reportsRelations

export const scheduled_reportsWithRelationsSchema: z.ZodType<scheduled_reportsWithRelations> = scheduled_reportsSchema.merge(z.object({
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => scheduled_reports_subscriptionWithRelationsSchema).array(),
}))

/////////////////////////////////////////
// SCHEDULED REPORTS SUBSCRIPTION SCHEMA
/////////////////////////////////////////

export const scheduled_reports_subscriptionSchema = z.object({
  id: z.string(),
  report_id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type scheduled_reports_subscription = z.infer<typeof scheduled_reports_subscriptionSchema>

// SCHEDULED REPORTS SUBSCRIPTION RELATION SCHEMA
//------------------------------------------------------

export type scheduled_reports_subscriptionRelations = {
  scheduled_reports_subscription_reports: scheduled_reportsWithRelations;
  scheduled_reports_subscription_users: usersWithRelations;
};

export type scheduled_reports_subscriptionWithRelations = z.infer<typeof scheduled_reports_subscriptionSchema> & scheduled_reports_subscriptionRelations

export const scheduled_reports_subscriptionWithRelationsSchema: z.ZodType<scheduled_reports_subscriptionWithRelations> = scheduled_reports_subscriptionSchema.merge(z.object({
  scheduled_reports_subscription_reports: z.lazy(() => scheduled_reportsWithRelationsSchema),
  scheduled_reports_subscription_users: z.lazy(() => usersWithRelationsSchema),
}))

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// PERMISSIONS
//------------------------------------------------------

export const permissionsIncludeSchema: z.ZodType<Prisma.permissionsInclude> = z.object({
  users_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const permissionsArgsSchema: z.ZodType<Prisma.permissionsDefaultArgs> = z.object({
  select: z.lazy(() => permissionsSelectSchema).optional(),
  include: z.lazy(() => permissionsIncludeSchema).optional(),
}).strict();

export const permissionsCountOutputTypeArgsSchema: z.ZodType<Prisma.permissionsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => permissionsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const permissionsCountOutputTypeSelectSchema: z.ZodType<Prisma.permissionsCountOutputTypeSelect> = z.object({
  roles_permissions: z.boolean().optional(),
  users_permissions: z.boolean().optional(),
}).strict();

export const permissionsSelectSchema: z.ZodType<Prisma.permissionsSelect> = z.object({
  id: z.boolean().optional(),
  slug: z.boolean().optional(),
  description: z.boolean().optional(),
  active: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PermissionsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROLES
//------------------------------------------------------

export const rolesIncludeSchema: z.ZodType<Prisma.rolesInclude> = z.object({
  users_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  users_roles: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RolesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const rolesArgsSchema: z.ZodType<Prisma.rolesDefaultArgs> = z.object({
  select: z.lazy(() => rolesSelectSchema).optional(),
  include: z.lazy(() => rolesIncludeSchema).optional(),
}).strict();

export const rolesCountOutputTypeArgsSchema: z.ZodType<Prisma.rolesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => rolesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const rolesCountOutputTypeSelectSchema: z.ZodType<Prisma.rolesCountOutputTypeSelect> = z.object({
  roles_permissions: z.boolean().optional(),
  users_roles: z.boolean().optional(),
}).strict();

export const rolesSelectSchema: z.ZodType<Prisma.rolesSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  active: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  roles_permissions: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  users_roles: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => RolesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ROLES PERMISSIONS
//------------------------------------------------------

export const roles_permissionsIncludeSchema: z.ZodType<Prisma.roles_permissionsInclude> = z.object({
  users_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => permissionsArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => rolesArgsSchema)]).optional(),
  users_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const roles_permissionsArgsSchema: z.ZodType<Prisma.roles_permissionsDefaultArgs> = z.object({
  select: z.lazy(() => roles_permissionsSelectSchema).optional(),
  include: z.lazy(() => roles_permissionsIncludeSchema).optional(),
}).strict();

export const roles_permissionsSelectSchema: z.ZodType<Prisma.roles_permissionsSelect> = z.object({
  role_id: z.boolean().optional(),
  permission_id: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => permissionsArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => rolesArgsSchema)]).optional(),
  users_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// USERS
//------------------------------------------------------

export const usersIncludeSchema: z.ZodType<Prisma.usersInclude> = z.object({
  permissions_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => permissionsFindManyArgsSchema)]).optional(),
  permissions_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => permissionsFindManyArgsSchema)]).optional(),
  roles_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => rolesFindManyArgsSchema)]).optional(),
  roles_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => rolesFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => organizationFindManyArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => organizationFindManyArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => work_schedulesFindManyArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => work_schedulesFindManyArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => users_terminalsFindManyArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => api_tokensFindManyArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => api_tokensFindManyArgsSchema)]).optional(),
  timesheet_users: z.union([z.boolean(),z.lazy(() => timesheetFindManyArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const usersArgsSchema: z.ZodType<Prisma.usersDefaultArgs> = z.object({
  select: z.lazy(() => usersSelectSchema).optional(),
  include: z.lazy(() => usersIncludeSchema).optional(),
}).strict();

export const usersCountOutputTypeArgsSchema: z.ZodType<Prisma.usersCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => usersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const usersCountOutputTypeSelectSchema: z.ZodType<Prisma.usersCountOutputTypeSelect> = z.object({
  permissions_permissions_created_byTousers: z.boolean().optional(),
  permissions_permissions_updated_byTousers: z.boolean().optional(),
  roles_roles_created_byTousers: z.boolean().optional(),
  roles_roles_updated_byTousers: z.boolean().optional(),
  roles_permissions_roles_permissions_created_byTousers: z.boolean().optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.boolean().optional(),
  users_permissions_usersTousers_permissions_created_by: z.boolean().optional(),
  users_permissions_usersTousers_permissions_updated_by: z.boolean().optional(),
  users_permissions_usersTousers_permissions_user_id: z.boolean().optional(),
  users_roles_usersTousers_roles_created_by: z.boolean().optional(),
  users_roles_usersTousers_roles_updated_by: z.boolean().optional(),
  users_roles_usersTousers_roles_user_id: z.boolean().optional(),
  organization_created_byTousers: z.boolean().optional(),
  organization_updated_byTousers: z.boolean().optional(),
  work_schedules_created_byTousers: z.boolean().optional(),
  work_schedules_updated_byTousers: z.boolean().optional(),
  users_terminals: z.boolean().optional(),
  users_work_schedules: z.boolean().optional(),
  work_schedule_entries_created_byTousers: z.boolean().optional(),
  work_schedule_entries_updated_byTousers: z.boolean().optional(),
  work_schedule_entries_users: z.boolean().optional(),
  api_tokens_created_byTousers: z.boolean().optional(),
  api_tokens_updated_byTousers: z.boolean().optional(),
  timesheet_users: z.boolean().optional(),
  scheduled_reports_subscription_users: z.boolean().optional(),
}).strict();

export const usersSelectSchema: z.ZodType<Prisma.usersSelect> = z.object({
  id: z.boolean().optional(),
  phone: z.boolean().optional(),
  first_name: z.boolean().optional(),
  last_name: z.boolean().optional(),
  password: z.boolean().optional(),
  is_super_user: z.boolean().optional(),
  status: z.boolean().optional(),
  card_name: z.boolean().optional(),
  card_number: z.boolean().optional(),
  birth_date: z.boolean().optional(),
  car_model: z.boolean().optional(),
  car_number: z.boolean().optional(),
  is_online: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  fcm_token: z.boolean().optional(),
  wallet_balance: z.boolean().optional(),
  max_active_order_count: z.boolean().optional(),
  doc_files: z.boolean().optional(),
  order_start_date: z.boolean().optional(),
  app_version: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  api_token: z.boolean().optional(),
  tg_id: z.boolean().optional(),
  permissions_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => permissionsFindManyArgsSchema)]).optional(),
  permissions_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => permissionsFindManyArgsSchema)]).optional(),
  roles_roles_created_byTousers: z.union([z.boolean(),z.lazy(() => rolesFindManyArgsSchema)]).optional(),
  roles_roles_updated_byTousers: z.union([z.boolean(),z.lazy(() => rolesFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.union([z.boolean(),z.lazy(() => roles_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  users_permissions_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => users_permissionsFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  users_roles_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => users_rolesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => organizationFindManyArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => organizationFindManyArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => work_schedulesFindManyArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => work_schedulesFindManyArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => users_terminalsFindManyArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => api_tokensFindManyArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => api_tokensFindManyArgsSchema)]).optional(),
  timesheet_users: z.union([z.boolean(),z.lazy(() => timesheetFindManyArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USERS PERMISSIONS
//------------------------------------------------------

export const users_permissionsIncludeSchema: z.ZodType<Prisma.users_permissionsInclude> = z.object({
  users_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => permissionsArgsSchema)]).optional(),
  users_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const users_permissionsArgsSchema: z.ZodType<Prisma.users_permissionsDefaultArgs> = z.object({
  select: z.lazy(() => users_permissionsSelectSchema).optional(),
  include: z.lazy(() => users_permissionsIncludeSchema).optional(),
}).strict();

export const users_permissionsSelectSchema: z.ZodType<Prisma.users_permissionsSelect> = z.object({
  user_id: z.boolean().optional(),
  permission_id: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_usersTousers_permissions_created_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  permissions: z.union([z.boolean(),z.lazy(() => permissionsArgsSchema)]).optional(),
  users_usersTousers_permissions_updated_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_usersTousers_permissions_user_id: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// USERS ROLES
//------------------------------------------------------

export const users_rolesIncludeSchema: z.ZodType<Prisma.users_rolesInclude> = z.object({
  users_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => rolesArgsSchema)]).optional(),
  users_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const users_rolesArgsSchema: z.ZodType<Prisma.users_rolesDefaultArgs> = z.object({
  select: z.lazy(() => users_rolesSelectSchema).optional(),
  include: z.lazy(() => users_rolesIncludeSchema).optional(),
}).strict();

export const users_rolesSelectSchema: z.ZodType<Prisma.users_rolesSelect> = z.object({
  user_id: z.boolean().optional(),
  role_id: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  users_usersTousers_roles_created_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  roles: z.union([z.boolean(),z.lazy(() => rolesArgsSchema)]).optional(),
  users_usersTousers_roles_updated_by: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_usersTousers_roles_user_id: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// WORK SCHEDULES
//------------------------------------------------------

export const work_schedulesIncludeSchema: z.ZodType<Prisma.work_schedulesInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => organizationArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Work_schedulesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const work_schedulesArgsSchema: z.ZodType<Prisma.work_schedulesDefaultArgs> = z.object({
  select: z.lazy(() => work_schedulesSelectSchema).optional(),
  include: z.lazy(() => work_schedulesIncludeSchema).optional(),
}).strict();

export const work_schedulesCountOutputTypeArgsSchema: z.ZodType<Prisma.work_schedulesCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => work_schedulesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const work_schedulesCountOutputTypeSelectSchema: z.ZodType<Prisma.work_schedulesCountOutputTypeSelect> = z.object({
  users_work_schedules: z.boolean().optional(),
  work_schedule_entries_work_schedules: z.boolean().optional(),
}).strict();

export const work_schedulesSelectSchema: z.ZodType<Prisma.work_schedulesSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  active: z.boolean().optional(),
  organization_id: z.boolean().optional(),
  days: z.boolean().optional(),
  start_time: z.boolean().optional(),
  end_time: z.boolean().optional(),
  max_start_time: z.boolean().optional(),
  bonus_price: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => organizationArgsSchema)]).optional(),
  work_schedules_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedules_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  users_work_schedules: z.union([z.boolean(),z.lazy(() => users_work_schedulesFindManyArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => work_schedule_entriesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Work_schedulesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TERMINALS
//------------------------------------------------------

export const terminalsIncludeSchema: z.ZodType<Prisma.terminalsInclude> = z.object({
  organization: z.union([z.boolean(),z.lazy(() => organizationArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => users_terminalsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TerminalsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const terminalsArgsSchema: z.ZodType<Prisma.terminalsDefaultArgs> = z.object({
  select: z.lazy(() => terminalsSelectSchema).optional(),
  include: z.lazy(() => terminalsIncludeSchema).optional(),
}).strict();

export const terminalsCountOutputTypeArgsSchema: z.ZodType<Prisma.terminalsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => terminalsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const terminalsCountOutputTypeSelectSchema: z.ZodType<Prisma.terminalsCountOutputTypeSelect> = z.object({
  users_terminals: z.boolean().optional(),
}).strict();

export const terminalsSelectSchema: z.ZodType<Prisma.terminalsSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  active: z.boolean().optional(),
  phone: z.boolean().optional(),
  address: z.boolean().optional(),
  latitude: z.boolean().optional(),
  longitude: z.boolean().optional(),
  external_id: z.boolean().optional(),
  organization_id: z.boolean().optional(),
  manager_name: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  organization: z.union([z.boolean(),z.lazy(() => organizationArgsSchema)]).optional(),
  users_terminals: z.union([z.boolean(),z.lazy(() => users_terminalsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TerminalsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ORGANIZATION
//------------------------------------------------------

export const organizationIncludeSchema: z.ZodType<Prisma.organizationInclude> = z.object({
  work_schedules_organization_idTorganization: z.union([z.boolean(),z.lazy(() => work_schedulesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  terminals_organization_idTorganization: z.union([z.boolean(),z.lazy(() => terminalsFindManyArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => api_tokensFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const organizationArgsSchema: z.ZodType<Prisma.organizationDefaultArgs> = z.object({
  select: z.lazy(() => organizationSelectSchema).optional(),
  include: z.lazy(() => organizationIncludeSchema).optional(),
}).strict();

export const organizationCountOutputTypeArgsSchema: z.ZodType<Prisma.organizationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => organizationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const organizationCountOutputTypeSelectSchema: z.ZodType<Prisma.organizationCountOutputTypeSelect> = z.object({
  work_schedules_organization_idTorganization: z.boolean().optional(),
  terminals_organization_idTorganization: z.boolean().optional(),
  api_tokens_organization: z.boolean().optional(),
}).strict();

export const organizationSelectSchema: z.ZodType<Prisma.organizationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  external_id: z.boolean().optional(),
  active: z.boolean().optional(),
  system_type: z.boolean().optional(),
  phone: z.boolean().optional(),
  iiko_login: z.boolean().optional(),
  webhook: z.boolean().optional(),
  group_id: z.boolean().optional(),
  apelsin_login: z.boolean().optional(),
  apelsin_password: z.boolean().optional(),
  sender_name: z.boolean().optional(),
  sender_number: z.boolean().optional(),
  description: z.boolean().optional(),
  max_distance: z.boolean().optional(),
  max_active_order_count: z.boolean().optional(),
  max_order_close_distance: z.boolean().optional(),
  payment_type: z.boolean().optional(),
  support_chat_url: z.boolean().optional(),
  icon_url: z.boolean().optional(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  work_schedules_organization_idTorganization: z.union([z.boolean(),z.lazy(() => work_schedulesFindManyArgsSchema)]).optional(),
  organization_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  organization_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  terminals_organization_idTorganization: z.union([z.boolean(),z.lazy(() => terminalsFindManyArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => api_tokensFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => OrganizationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USERS TERMINALS
//------------------------------------------------------

export const users_terminalsIncludeSchema: z.ZodType<Prisma.users_terminalsInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  terminals: z.union([z.boolean(),z.lazy(() => terminalsArgsSchema)]).optional(),
}).strict()

export const users_terminalsArgsSchema: z.ZodType<Prisma.users_terminalsDefaultArgs> = z.object({
  select: z.lazy(() => users_terminalsSelectSchema).optional(),
  include: z.lazy(() => users_terminalsIncludeSchema).optional(),
}).strict();

export const users_terminalsSelectSchema: z.ZodType<Prisma.users_terminalsSelect> = z.object({
  user_id: z.boolean().optional(),
  terminal_id: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  terminals: z.union([z.boolean(),z.lazy(() => terminalsArgsSchema)]).optional(),
}).strict()

// USERS WORK SCHEDULES
//------------------------------------------------------

export const users_work_schedulesIncludeSchema: z.ZodType<Prisma.users_work_schedulesInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedules: z.union([z.boolean(),z.lazy(() => work_schedulesArgsSchema)]).optional(),
}).strict()

export const users_work_schedulesArgsSchema: z.ZodType<Prisma.users_work_schedulesDefaultArgs> = z.object({
  select: z.lazy(() => users_work_schedulesSelectSchema).optional(),
  include: z.lazy(() => users_work_schedulesIncludeSchema).optional(),
}).strict();

export const users_work_schedulesSelectSchema: z.ZodType<Prisma.users_work_schedulesSelect> = z.object({
  user_id: z.boolean().optional(),
  work_schedule_id: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedules: z.union([z.boolean(),z.lazy(() => work_schedulesArgsSchema)]).optional(),
}).strict()

// WORK SCHEDULE ENTRIES
//------------------------------------------------------

export const work_schedule_entriesIncludeSchema: z.ZodType<Prisma.work_schedule_entriesInclude> = z.object({
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => work_schedulesArgsSchema)]).optional(),
}).strict()

export const work_schedule_entriesArgsSchema: z.ZodType<Prisma.work_schedule_entriesDefaultArgs> = z.object({
  select: z.lazy(() => work_schedule_entriesSelectSchema).optional(),
  include: z.lazy(() => work_schedule_entriesIncludeSchema).optional(),
}).strict();

export const work_schedule_entriesSelectSchema: z.ZodType<Prisma.work_schedule_entriesSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  work_schedule_id: z.boolean().optional(),
  date_start: z.boolean().optional(),
  date_finish: z.boolean().optional(),
  duration: z.boolean().optional(),
  ip_open: z.boolean().optional(),
  ip_close: z.boolean().optional(),
  lat_open: z.boolean().optional(),
  lat_close: z.boolean().optional(),
  lon_open: z.boolean().optional(),
  lon_close: z.boolean().optional(),
  current_status: z.boolean().optional(),
  late: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  work_schedule_entries_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedule_entries_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedule_entries_users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  work_schedule_entries_work_schedules: z.union([z.boolean(),z.lazy(() => work_schedulesArgsSchema)]).optional(),
}).strict()

// API TOKENS
//------------------------------------------------------

export const api_tokensIncludeSchema: z.ZodType<Prisma.api_tokensInclude> = z.object({
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => organizationArgsSchema)]).optional(),
}).strict()

export const api_tokensArgsSchema: z.ZodType<Prisma.api_tokensDefaultArgs> = z.object({
  select: z.lazy(() => api_tokensSelectSchema).optional(),
  include: z.lazy(() => api_tokensIncludeSchema).optional(),
}).strict();

export const api_tokensSelectSchema: z.ZodType<Prisma.api_tokensSelect> = z.object({
  id: z.boolean().optional(),
  active: z.boolean().optional(),
  token: z.boolean().optional(),
  organization_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  created_by: z.boolean().optional(),
  updated_by: z.boolean().optional(),
  api_tokens_created_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  api_tokens_updated_byTousers: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
  api_tokens_organization: z.union([z.boolean(),z.lazy(() => organizationArgsSchema)]).optional(),
}).strict()

// TIMESHEET
//------------------------------------------------------

export const timesheetIncludeSchema: z.ZodType<Prisma.timesheetInclude> = z.object({
  timesheet_users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const timesheetArgsSchema: z.ZodType<Prisma.timesheetDefaultArgs> = z.object({
  select: z.lazy(() => timesheetSelectSchema).optional(),
  include: z.lazy(() => timesheetIncludeSchema).optional(),
}).strict();

export const timesheetSelectSchema: z.ZodType<Prisma.timesheetSelect> = z.object({
  id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  is_late: z.boolean().optional(),
  date: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  timesheet_users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

// SCHEDULED REPORTS
//------------------------------------------------------

export const scheduled_reportsIncludeSchema: z.ZodType<Prisma.scheduled_reportsInclude> = z.object({
  scheduled_reports_scheduled_reports_subscriptions: z.union([z.boolean(),z.lazy(() => scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Scheduled_reportsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const scheduled_reportsArgsSchema: z.ZodType<Prisma.scheduled_reportsDefaultArgs> = z.object({
  select: z.lazy(() => scheduled_reportsSelectSchema).optional(),
  include: z.lazy(() => scheduled_reportsIncludeSchema).optional(),
}).strict();

export const scheduled_reportsCountOutputTypeArgsSchema: z.ZodType<Prisma.scheduled_reportsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => scheduled_reportsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const scheduled_reportsCountOutputTypeSelectSchema: z.ZodType<Prisma.scheduled_reportsCountOutputTypeSelect> = z.object({
  scheduled_reports_scheduled_reports_subscriptions: z.boolean().optional(),
}).strict();

export const scheduled_reportsSelectSchema: z.ZodType<Prisma.scheduled_reportsSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  code: z.boolean().optional(),
  cron: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.union([z.boolean(),z.lazy(() => scheduled_reports_subscriptionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Scheduled_reportsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SCHEDULED REPORTS SUBSCRIPTION
//------------------------------------------------------

export const scheduled_reports_subscriptionIncludeSchema: z.ZodType<Prisma.scheduled_reports_subscriptionInclude> = z.object({
  scheduled_reports_subscription_reports: z.union([z.boolean(),z.lazy(() => scheduled_reportsArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()

export const scheduled_reports_subscriptionArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionDefaultArgs> = z.object({
  select: z.lazy(() => scheduled_reports_subscriptionSelectSchema).optional(),
  include: z.lazy(() => scheduled_reports_subscriptionIncludeSchema).optional(),
}).strict();

export const scheduled_reports_subscriptionSelectSchema: z.ZodType<Prisma.scheduled_reports_subscriptionSelect> = z.object({
  id: z.boolean().optional(),
  report_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  scheduled_reports_subscription_reports: z.union([z.boolean(),z.lazy(() => scheduled_reportsArgsSchema)]).optional(),
  scheduled_reports_subscription_users: z.union([z.boolean(),z.lazy(() => usersArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const permissionsWhereInputSchema: z.ZodType<Prisma.permissionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => permissionsWhereInputSchema),z.lazy(() => permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => permissionsWhereInputSchema),z.lazy(() => permissionsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsListRelationFilterSchema).optional()
}).strict();

export const permissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.permissionsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const permissionsWhereUniqueInputSchema: z.ZodType<Prisma.permissionsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    slug: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    slug: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  slug: z.string().optional(),
  AND: z.union([ z.lazy(() => permissionsWhereInputSchema),z.lazy(() => permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => permissionsWhereInputSchema),z.lazy(() => permissionsWhereInputSchema).array() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions: z.lazy(() => Users_permissionsListRelationFilterSchema).optional()
}).strict());

export const permissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.permissionsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => permissionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => permissionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => permissionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const permissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.permissionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => permissionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const rolesWhereInputSchema: z.ZodType<Prisma.rolesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => rolesWhereInputSchema),z.lazy(() => rolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => rolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => rolesWhereInputSchema),z.lazy(() => rolesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_roles_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_roles: z.lazy(() => Users_rolesListRelationFilterSchema).optional()
}).strict();

export const rolesOrderByWithRelationInputSchema: z.ZodType<Prisma.rolesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const rolesWhereUniqueInputSchema: z.ZodType<Prisma.rolesWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    name: z.string(),
    code: z.string()
  }),
  z.object({
    id: z.string(),
    name: z.string(),
  }),
  z.object({
    id: z.string(),
    code: z.string(),
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    name: z.string(),
    code: z.string(),
  }),
  z.object({
    name: z.string(),
  }),
  z.object({
    code: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  code: z.string().optional(),
  AND: z.union([ z.lazy(() => rolesWhereInputSchema),z.lazy(() => rolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => rolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => rolesWhereInputSchema),z.lazy(() => rolesWhereInputSchema).array() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_roles_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_roles: z.lazy(() => Users_rolesListRelationFilterSchema).optional()
}).strict());

export const rolesOrderByWithAggregationInputSchema: z.ZodType<Prisma.rolesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => rolesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => rolesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => rolesMinOrderByAggregateInputSchema).optional()
}).strict();

export const rolesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.rolesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => rolesScalarWhereWithAggregatesInputSchema),z.lazy(() => rolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => rolesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => rolesScalarWhereWithAggregatesInputSchema),z.lazy(() => rolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const roles_permissionsWhereInputSchema: z.ZodType<Prisma.roles_permissionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => roles_permissionsWhereInputSchema),z.lazy(() => roles_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => roles_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roles_permissionsWhereInputSchema),z.lazy(() => roles_permissionsWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => permissionsWhereInputSchema) ]).optional(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => rolesWhereInputSchema) ]).optional(),
  users_roles_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.roles_permissionsOrderByWithRelationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_roles_permissions_created_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  permissions: z.lazy(() => permissionsOrderByWithRelationInputSchema).optional(),
  roles: z.lazy(() => rolesOrderByWithRelationInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const roles_permissionsWhereUniqueInputSchema: z.ZodType<Prisma.roles_permissionsWhereUniqueInput> = z.object({
  role_id_permission_id: z.lazy(() => roles_permissionsRole_idPermission_idCompoundUniqueInputSchema)
})
.and(z.object({
  role_id_permission_id: z.lazy(() => roles_permissionsRole_idPermission_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => roles_permissionsWhereInputSchema),z.lazy(() => roles_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => roles_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roles_permissionsWhereInputSchema),z.lazy(() => roles_permissionsWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_roles_permissions_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => permissionsWhereInputSchema) ]).optional(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => rolesWhereInputSchema) ]).optional(),
  users_roles_permissions_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
}).strict());

export const roles_permissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.roles_permissionsOrderByWithAggregationInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => roles_permissionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => roles_permissionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => roles_permissionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const roles_permissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.roles_permissionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => roles_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => roles_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => roles_permissionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roles_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => roles_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const usersWhereInputSchema: z.ZodType<Prisma.usersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => usersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  first_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  last_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_super_user: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => Enumuser_statusFilterSchema),z.lazy(() => user_statusSchema) ]).optional(),
  card_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  card_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birth_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  car_model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  car_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_online: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fcm_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wallet_balance: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  doc_files: z.lazy(() => StringNullableListFilterSchema).optional(),
  order_start_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  app_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  api_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tg_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetListRelationFilterSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional()
}).strict();

export const usersOrderByWithRelationInputSchema: z.ZodType<Prisma.usersOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  card_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birth_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_model: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fcm_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doc_files: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  app_version: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tg_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsOrderByRelationAggregateInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsOrderByRelationAggregateInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesOrderByRelationAggregateInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesOrderByRelationAggregateInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsOrderByRelationAggregateInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesOrderByRelationAggregateInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesOrderByRelationAggregateInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesOrderByRelationAggregateInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationOrderByRelationAggregateInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationOrderByRelationAggregateInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesOrderByRelationAggregateInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesOrderByRelationAggregateInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsOrderByRelationAggregateInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesOrderByRelationAggregateInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensOrderByRelationAggregateInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensOrderByRelationAggregateInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetOrderByRelationAggregateInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const usersWhereUniqueInputSchema: z.ZodType<Prisma.usersWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    phone: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    phone: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  phone: z.string().optional(),
  AND: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => usersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => usersWhereInputSchema),z.lazy(() => usersWhereInputSchema).array() ]).optional(),
  first_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  last_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_super_user: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => Enumuser_statusFilterSchema),z.lazy(() => user_statusSchema) ]).optional(),
  card_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  card_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  birth_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  car_model: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  car_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  is_online: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  fcm_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wallet_balance: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  doc_files: z.lazy(() => StringNullableListFilterSchema).optional(),
  order_start_date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  app_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  api_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tg_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => PermissionsListRelationFilterSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => RolesListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => Roles_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => Users_permissionsListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => Users_rolesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  organization_updated_byTousers: z.lazy(() => OrganizationListRelationFilterSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  work_schedule_entries_users: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => Api_tokensListRelationFilterSchema).optional(),
  timesheet_users: z.lazy(() => TimesheetListRelationFilterSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional()
}).strict());

export const usersOrderByWithAggregationInputSchema: z.ZodType<Prisma.usersOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  last_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  card_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  birth_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_model: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  car_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  longitude: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  fcm_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doc_files: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  app_version: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tg_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => usersCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => usersAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => usersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => usersMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => usersSumOrderByAggregateInputSchema).optional()
}).strict();

export const usersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.usersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => usersScalarWhereWithAggregatesInputSchema),z.lazy(() => usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => usersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => usersScalarWhereWithAggregatesInputSchema),z.lazy(() => usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  phone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  first_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  last_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  is_super_user: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  status: z.union([ z.lazy(() => Enumuser_statusWithAggregatesFilterSchema),z.lazy(() => user_statusSchema) ]).optional(),
  card_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  card_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  birth_date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  car_model: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  car_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  is_online: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  latitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  longitude: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  fcm_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wallet_balance: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  doc_files: z.lazy(() => StringNullableListFilterSchema).optional(),
  order_start_date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  app_version: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  api_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tg_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const users_permissionsWhereInputSchema: z.ZodType<Prisma.users_permissionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_permissionsWhereInputSchema),z.lazy(() => users_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_permissionsWhereInputSchema),z.lazy(() => users_permissionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_permissions_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => permissionsWhereInputSchema) ]).optional(),
  users_usersTousers_permissions_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_permissions_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const users_permissionsOrderByWithRelationInputSchema: z.ZodType<Prisma.users_permissionsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_usersTousers_permissions_created_by: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  permissions: z.lazy(() => permissionsOrderByWithRelationInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const users_permissionsWhereUniqueInputSchema: z.ZodType<Prisma.users_permissionsWhereUniqueInput> = z.object({
  user_id_permission_id: z.lazy(() => users_permissionsUser_idPermission_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_permission_id: z.lazy(() => users_permissionsUser_idPermission_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => users_permissionsWhereInputSchema),z.lazy(() => users_permissionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_permissionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_permissionsWhereInputSchema),z.lazy(() => users_permissionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_permissions_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  permissions: z.union([ z.lazy(() => PermissionsRelationFilterSchema),z.lazy(() => permissionsWhereInputSchema) ]).optional(),
  users_usersTousers_permissions_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_permissions_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const users_permissionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.users_permissionsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => users_permissionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => users_permissionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => users_permissionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const users_permissionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.users_permissionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => users_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => users_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_permissionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_permissionsScalarWhereWithAggregatesInputSchema),z.lazy(() => users_permissionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const users_rolesWhereInputSchema: z.ZodType<Prisma.users_rolesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_rolesWhereInputSchema),z.lazy(() => users_rolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_rolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_rolesWhereInputSchema),z.lazy(() => users_rolesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_roles_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => rolesWhereInputSchema) ]).optional(),
  users_usersTousers_roles_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_roles_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const users_rolesOrderByWithRelationInputSchema: z.ZodType<Prisma.users_rolesOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  users_usersTousers_roles_created_by: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  roles: z.lazy(() => rolesOrderByWithRelationInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const users_rolesWhereUniqueInputSchema: z.ZodType<Prisma.users_rolesWhereUniqueInput> = z.object({
  user_id_role_id: z.lazy(() => users_rolesUser_idRole_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_role_id: z.lazy(() => users_rolesUser_idRole_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => users_rolesWhereInputSchema),z.lazy(() => users_rolesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_rolesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_rolesWhereInputSchema),z.lazy(() => users_rolesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  users_usersTousers_roles_created_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  roles: z.union([ z.lazy(() => RolesRelationFilterSchema),z.lazy(() => rolesWhereInputSchema) ]).optional(),
  users_usersTousers_roles_updated_by: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_usersTousers_roles_user_id: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const users_rolesOrderByWithAggregationInputSchema: z.ZodType<Prisma.users_rolesOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => users_rolesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => users_rolesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => users_rolesMinOrderByAggregateInputSchema).optional()
}).strict();

export const users_rolesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.users_rolesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => users_rolesScalarWhereWithAggregatesInputSchema),z.lazy(() => users_rolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_rolesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_rolesScalarWhereWithAggregatesInputSchema),z.lazy(() => users_rolesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const work_schedulesWhereInputSchema: z.ZodType<Prisma.work_schedulesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => work_schedulesWhereInputSchema),z.lazy(() => work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedulesWhereInputSchema),z.lazy(() => work_schedulesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => organizationWhereInputSchema) ]).optional(),
  work_schedules_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  work_schedules_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional()
}).strict();

export const work_schedulesOrderByWithRelationInputSchema: z.ZodType<Prisma.work_schedulesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  organization: z.lazy(() => organizationOrderByWithRelationInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesOrderByRelationAggregateInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const work_schedulesWhereUniqueInputSchema: z.ZodType<Prisma.work_schedulesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => work_schedulesWhereInputSchema),z.lazy(() => work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedulesWhereInputSchema),z.lazy(() => work_schedulesWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => organizationWhereInputSchema) ]).optional(),
  work_schedules_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  work_schedules_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => Users_work_schedulesListRelationFilterSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => Work_schedule_entriesListRelationFilterSchema).optional()
}).strict());

export const work_schedulesOrderByWithAggregationInputSchema: z.ZodType<Prisma.work_schedulesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => work_schedulesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => work_schedulesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => work_schedulesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => work_schedulesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => work_schedulesSumOrderByAggregateInputSchema).optional()
}).strict();

export const work_schedulesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.work_schedulesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedulesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const terminalsWhereInputSchema: z.ZodType<Prisma.terminalsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => terminalsWhereInputSchema),z.lazy(() => terminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => terminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => terminalsWhereInputSchema),z.lazy(() => terminalsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  external_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => organizationWhereInputSchema) ]).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional()
}).strict();

export const terminalsOrderByWithRelationInputSchema: z.ZodType<Prisma.terminalsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  organization: z.lazy(() => organizationOrderByWithRelationInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const terminalsWhereUniqueInputSchema: z.ZodType<Prisma.terminalsWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    external_id: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    external_id: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  external_id: z.string().optional(),
  AND: z.union([ z.lazy(() => terminalsWhereInputSchema),z.lazy(() => terminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => terminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => terminalsWhereInputSchema),z.lazy(() => terminalsWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => organizationWhereInputSchema) ]).optional(),
  users_terminals: z.lazy(() => Users_terminalsListRelationFilterSchema).optional()
}).strict());

export const terminalsOrderByWithAggregationInputSchema: z.ZodType<Prisma.terminalsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  address: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => terminalsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => terminalsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => terminalsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => terminalsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => terminalsSumOrderByAggregateInputSchema).optional()
}).strict();

export const terminalsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.terminalsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => terminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => terminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => terminalsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => terminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => terminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  external_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const organizationWhereInputSchema: z.ZodType<Prisma.organizationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => organizationWhereInputSchema),z.lazy(() => organizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => organizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => organizationWhereInputSchema),z.lazy(() => organizationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  organization_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsListRelationFilterSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensListRelationFilterSchema).optional()
}).strict();

export const organizationOrderByWithRelationInputSchema: z.ZodType<Prisma.organizationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  webhook: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  group_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesOrderByRelationAggregateInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsOrderByRelationAggregateInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensOrderByRelationAggregateInputSchema).optional()
}).strict();

export const organizationWhereUniqueInputSchema: z.ZodType<Prisma.organizationWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => organizationWhereInputSchema),z.lazy(() => organizationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => organizationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => organizationWhereInputSchema),z.lazy(() => organizationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => Work_schedulesListRelationFilterSchema).optional(),
  organization_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  organization_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => TerminalsListRelationFilterSchema).optional(),
  api_tokens_organization: z.lazy(() => Api_tokensListRelationFilterSchema).optional()
}).strict());

export const organizationOrderByWithAggregationInputSchema: z.ZodType<Prisma.organizationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  webhook: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  group_id: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_login: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  apelsin_password: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sender_number: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  icon_url: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => organizationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => organizationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => organizationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => organizationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => organizationSumOrderByAggregateInputSchema).optional()
}).strict();

export const organizationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.organizationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => organizationScalarWhereWithAggregatesInputSchema),z.lazy(() => organizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => organizationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => organizationScalarWhereWithAggregatesInputSchema),z.lazy(() => organizationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeWithAggregatesFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesWithAggregatesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const users_terminalsWhereInputSchema: z.ZodType<Prisma.users_terminalsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_terminalsWhereInputSchema),z.lazy(() => users_terminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_terminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_terminalsWhereInputSchema),z.lazy(() => users_terminalsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  terminals: z.union([ z.lazy(() => TerminalsRelationFilterSchema),z.lazy(() => terminalsWhereInputSchema) ]).optional(),
}).strict();

export const users_terminalsOrderByWithRelationInputSchema: z.ZodType<Prisma.users_terminalsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  terminals: z.lazy(() => terminalsOrderByWithRelationInputSchema).optional()
}).strict();

export const users_terminalsWhereUniqueInputSchema: z.ZodType<Prisma.users_terminalsWhereUniqueInput> = z.object({
  user_id_terminal_id: z.lazy(() => users_terminalsUser_idTerminal_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_terminal_id: z.lazy(() => users_terminalsUser_idTerminal_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => users_terminalsWhereInputSchema),z.lazy(() => users_terminalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_terminalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_terminalsWhereInputSchema),z.lazy(() => users_terminalsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  terminals: z.union([ z.lazy(() => TerminalsRelationFilterSchema),z.lazy(() => terminalsWhereInputSchema) ]).optional(),
}).strict());

export const users_terminalsOrderByWithAggregationInputSchema: z.ZodType<Prisma.users_terminalsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => users_terminalsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => users_terminalsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => users_terminalsMinOrderByAggregateInputSchema).optional()
}).strict();

export const users_terminalsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.users_terminalsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => users_terminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => users_terminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_terminalsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_terminalsScalarWhereWithAggregatesInputSchema),z.lazy(() => users_terminalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const users_work_schedulesWhereInputSchema: z.ZodType<Prisma.users_work_schedulesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_work_schedulesWhereInputSchema),z.lazy(() => users_work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_work_schedulesWhereInputSchema),z.lazy(() => users_work_schedulesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => work_schedulesWhereInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesOrderByWithRelationInputSchema: z.ZodType<Prisma.users_work_schedulesOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  work_schedules: z.lazy(() => work_schedulesOrderByWithRelationInputSchema).optional()
}).strict();

export const users_work_schedulesWhereUniqueInputSchema: z.ZodType<Prisma.users_work_schedulesWhereUniqueInput> = z.object({
  user_id_work_schedule_id: z.lazy(() => users_work_schedulesUser_idWork_schedule_idCompoundUniqueInputSchema)
})
.and(z.object({
  user_id_work_schedule_id: z.lazy(() => users_work_schedulesUser_idWork_schedule_idCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => users_work_schedulesWhereInputSchema),z.lazy(() => users_work_schedulesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_work_schedulesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_work_schedulesWhereInputSchema),z.lazy(() => users_work_schedulesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => work_schedulesWhereInputSchema) ]).optional(),
}).strict());

export const users_work_schedulesOrderByWithAggregationInputSchema: z.ZodType<Prisma.users_work_schedulesOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => users_work_schedulesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => users_work_schedulesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => users_work_schedulesMinOrderByAggregateInputSchema).optional()
}).strict();

export const users_work_schedulesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.users_work_schedulesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => users_work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => users_work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_work_schedulesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_work_schedulesScalarWhereWithAggregatesInputSchema),z.lazy(() => users_work_schedulesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const work_schedule_entriesWhereInputSchema: z.ZodType<Prisma.work_schedule_entriesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => work_schedule_entriesWhereInputSchema),z.lazy(() => work_schedule_entriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedule_entriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedule_entriesWhereInputSchema),z.lazy(() => work_schedule_entriesWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedule_entries_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  work_schedule_entries_work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => work_schedulesWhereInputSchema) ]).optional(),
}).strict();

export const work_schedule_entriesOrderByWithRelationInputSchema: z.ZodType<Prisma.work_schedule_entriesOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesOrderByWithRelationInputSchema).optional()
}).strict();

export const work_schedule_entriesWhereUniqueInputSchema: z.ZodType<Prisma.work_schedule_entriesWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => work_schedule_entriesWhereInputSchema),z.lazy(() => work_schedule_entriesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedule_entriesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedule_entriesWhereInputSchema),z.lazy(() => work_schedule_entriesWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  work_schedule_entries_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  work_schedule_entries_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
  work_schedule_entries_work_schedules: z.union([ z.lazy(() => Work_schedulesRelationFilterSchema),z.lazy(() => work_schedulesWhereInputSchema) ]).optional(),
}).strict());

export const work_schedule_entriesOrderByWithAggregationInputSchema: z.ZodType<Prisma.work_schedule_entriesOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  ip_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => work_schedule_entriesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => work_schedule_entriesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => work_schedule_entriesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => work_schedule_entriesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => work_schedule_entriesSumOrderByAggregateInputSchema).optional()
}).strict();

export const work_schedule_entriesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.work_schedule_entriesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => work_schedule_entriesScalarWhereWithAggregatesInputSchema),z.lazy(() => work_schedule_entriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedule_entriesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedule_entriesScalarWhereWithAggregatesInputSchema),z.lazy(() => work_schedule_entriesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusWithAggregatesFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const api_tokensWhereInputSchema: z.ZodType<Prisma.api_tokensWhereInput> = z.object({
  AND: z.union([ z.lazy(() => api_tokensWhereInputSchema),z.lazy(() => api_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => api_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => api_tokensWhereInputSchema),z.lazy(() => api_tokensWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  api_tokens_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  api_tokens_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  api_tokens_organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => organizationWhereInputSchema) ]).optional(),
}).strict();

export const api_tokensOrderByWithRelationInputSchema: z.ZodType<Prisma.api_tokensOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => usersOrderByWithRelationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => organizationOrderByWithRelationInputSchema).optional()
}).strict();

export const api_tokensWhereUniqueInputSchema: z.ZodType<Prisma.api_tokensWhereUniqueInput> = z.union([
  z.object({
    id: z.string(),
    token: z.string()
  }),
  z.object({
    id: z.string(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => api_tokensWhereInputSchema),z.lazy(() => api_tokensWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => api_tokensWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => api_tokensWhereInputSchema),z.lazy(() => api_tokensWhereInputSchema).array() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  api_tokens_created_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  api_tokens_updated_byTousers: z.union([ z.lazy(() => UsersNullableRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional().nullable(),
  api_tokens_organization: z.union([ z.lazy(() => OrganizationRelationFilterSchema),z.lazy(() => organizationWhereInputSchema) ]).optional(),
}).strict());

export const api_tokensOrderByWithAggregationInputSchema: z.ZodType<Prisma.api_tokensOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  updated_by: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => api_tokensCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => api_tokensMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => api_tokensMinOrderByAggregateInputSchema).optional()
}).strict();

export const api_tokensScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.api_tokensScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => api_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => api_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => api_tokensScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => api_tokensScalarWhereWithAggregatesInputSchema),z.lazy(() => api_tokensScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const timesheetWhereInputSchema: z.ZodType<Prisma.timesheetWhereInput> = z.object({
  AND: z.union([ z.lazy(() => timesheetWhereInputSchema),z.lazy(() => timesheetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => timesheetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timesheetWhereInputSchema),z.lazy(() => timesheetWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  timesheet_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const timesheetOrderByWithRelationInputSchema: z.ZodType<Prisma.timesheetOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  timesheet_users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const timesheetWhereUniqueInputSchema: z.ZodType<Prisma.timesheetWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => timesheetWhereInputSchema),z.lazy(() => timesheetWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => timesheetWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timesheetWhereInputSchema),z.lazy(() => timesheetWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  timesheet_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const timesheetOrderByWithAggregationInputSchema: z.ZodType<Prisma.timesheetOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => timesheetCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => timesheetMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => timesheetMinOrderByAggregateInputSchema).optional()
}).strict();

export const timesheetScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.timesheetScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => timesheetScalarWhereWithAggregatesInputSchema),z.lazy(() => timesheetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => timesheetScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timesheetScalarWhereWithAggregatesInputSchema),z.lazy(() => timesheetScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const scheduled_reportsWhereInputSchema: z.ZodType<Prisma.scheduled_reportsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => scheduled_reportsWhereInputSchema),z.lazy(() => scheduled_reportsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => scheduled_reportsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => scheduled_reportsWhereInputSchema),z.lazy(() => scheduled_reportsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cron: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional()
}).strict();

export const scheduled_reportsOrderByWithRelationInputSchema: z.ZodType<Prisma.scheduled_reportsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => scheduled_reports_subscriptionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const scheduled_reportsWhereUniqueInputSchema: z.ZodType<Prisma.scheduled_reportsWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => scheduled_reportsWhereInputSchema),z.lazy(() => scheduled_reportsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => scheduled_reportsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => scheduled_reportsWhereInputSchema),z.lazy(() => scheduled_reportsWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  cron: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => Scheduled_reports_subscriptionListRelationFilterSchema).optional()
}).strict());

export const scheduled_reportsOrderByWithAggregationInputSchema: z.ZodType<Prisma.scheduled_reportsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => scheduled_reportsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => scheduled_reportsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => scheduled_reportsMinOrderByAggregateInputSchema).optional()
}).strict();

export const scheduled_reportsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.scheduled_reportsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => scheduled_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => scheduled_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => scheduled_reportsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => scheduled_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => scheduled_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  cron: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionWhereInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_subscription_reports: z.union([ z.lazy(() => Scheduled_reportsRelationFilterSchema),z.lazy(() => scheduled_reportsWhereInputSchema) ]).optional(),
  scheduled_reports_subscription_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionOrderByWithRelationInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  scheduled_reports_subscription_reports: z.lazy(() => scheduled_reportsOrderByWithRelationInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => usersOrderByWithRelationInputSchema).optional()
}).strict();

export const scheduled_reports_subscriptionWhereUniqueInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionWhereUniqueInput> = z.object({
  id: z.string()
})
.and(z.object({
  id: z.string().optional(),
  AND: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).array() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  scheduled_reports_subscription_reports: z.union([ z.lazy(() => Scheduled_reportsRelationFilterSchema),z.lazy(() => scheduled_reportsWhereInputSchema) ]).optional(),
  scheduled_reports_subscription_users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => usersWhereInputSchema) ]).optional(),
}).strict());

export const scheduled_reports_subscriptionOrderByWithAggregationInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => scheduled_reports_subscriptionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => scheduled_reports_subscriptionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => scheduled_reports_subscriptionMinOrderByAggregateInputSchema).optional()
}).strict();

export const scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const permissionsCreateInputSchema: z.ZodType<Prisma.permissionsCreateInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsUncheckedCreateInputSchema: z.ZodType<Prisma.permissionsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsUpdateInputSchema: z.ZodType<Prisma.permissionsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsCreateManyInputSchema: z.ZodType<Prisma.permissionsCreateManyInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const permissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.permissionsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const permissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const rolesCreateInputSchema: z.ZodType<Prisma.rolesCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesUncheckedCreateInputSchema: z.ZodType<Prisma.rolesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesUpdateInputSchema: z.ZodType<Prisma.rolesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesUncheckedUpdateInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesCreateManyInputSchema: z.ZodType<Prisma.rolesCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const rolesUpdateManyMutationInputSchema: z.ZodType<Prisma.rolesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const rolesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsCreateInputSchema: z.ZodType<Prisma.roles_permissionsCreateInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  roles: z.lazy(() => rolesCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedCreateInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsUpdateInputSchema: z.ZodType<Prisma.roles_permissionsUpdateInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsCreateManyInputSchema: z.ZodType<Prisma.roles_permissionsCreateManyInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyMutationInput> = z.object({
}).strict();

export const roles_permissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const usersCreateInputSchema: z.ZodType<Prisma.usersCreateInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateInputSchema: z.ZodType<Prisma.usersUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUpdateInputSchema: z.ZodType<Prisma.usersUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateInputSchema: z.ZodType<Prisma.usersUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersCreateManyInputSchema: z.ZodType<Prisma.usersCreateManyInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable()
}).strict();

export const usersUpdateManyMutationInputSchema: z.ZodType<Prisma.usersUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const usersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.usersUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsCreateInputSchema: z.ZodType<Prisma.users_permissionsCreateInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const users_permissionsUncheckedCreateInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_permissionsUpdateInputSchema: z.ZodType<Prisma.users_permissionsUpdateInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const users_permissionsUncheckedUpdateInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsCreateManyInputSchema: z.ZodType<Prisma.users_permissionsCreateManyInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_permissionsUpdateManyMutationInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyMutationInput> = z.object({
}).strict();

export const users_permissionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesCreateInputSchema: z.ZodType<Prisma.users_rolesCreateInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  roles: z.lazy(() => rolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const users_rolesUncheckedCreateInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesUpdateInputSchema: z.ZodType<Prisma.users_rolesUpdateInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const users_rolesUncheckedUpdateInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesCreateManyInputSchema: z.ZodType<Prisma.users_rolesCreateManyInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesUpdateManyMutationInputSchema: z.ZodType<Prisma.users_rolesUpdateManyMutationInput> = z.object({
}).strict();

export const users_rolesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedulesCreateInputSchema: z.ZodType<Prisma.work_schedulesCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => organizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesUncheckedCreateInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesUpdateInputSchema: z.ZodType<Prisma.work_schedulesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => organizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesCreateManyInputSchema: z.ZodType<Prisma.work_schedulesCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedulesUpdateManyMutationInputSchema: z.ZodType<Prisma.work_schedulesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const work_schedulesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const terminalsCreateInputSchema: z.ZodType<Prisma.terminalsCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => organizationCreateNestedOneWithoutTerminals_organization_idTorganizationInputSchema),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const terminalsUncheckedCreateInputSchema: z.ZodType<Prisma.terminalsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const terminalsUpdateInputSchema: z.ZodType<Prisma.terminalsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => organizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const terminalsUncheckedUpdateInputSchema: z.ZodType<Prisma.terminalsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const terminalsCreateManyInputSchema: z.ZodType<Prisma.terminalsCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const terminalsUpdateManyMutationInputSchema: z.ZodType<Prisma.terminalsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const terminalsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.terminalsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const organizationCreateInputSchema: z.ZodType<Prisma.organizationCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationUncheckedCreateInputSchema: z.ZodType<Prisma.organizationUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationUpdateInputSchema: z.ZodType<Prisma.organizationUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationCreateManyInputSchema: z.ZodType<Prisma.organizationCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const organizationUpdateManyMutationInputSchema: z.ZodType<Prisma.organizationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const organizationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_terminalsCreateInputSchema: z.ZodType<Prisma.users_terminalsCreateInput> = z.object({
  users: z.lazy(() => usersCreateNestedOneWithoutUsers_terminalsInputSchema),
  terminals: z.lazy(() => terminalsCreateNestedOneWithoutUsers_terminalsInputSchema)
}).strict();

export const users_terminalsUncheckedCreateInputSchema: z.ZodType<Prisma.users_terminalsUncheckedCreateInput> = z.object({
  user_id: z.string(),
  terminal_id: z.string()
}).strict();

export const users_terminalsUpdateInputSchema: z.ZodType<Prisma.users_terminalsUpdateInput> = z.object({
  users: z.lazy(() => usersUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional(),
  terminals: z.lazy(() => terminalsUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional()
}).strict();

export const users_terminalsUncheckedUpdateInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_terminalsCreateManyInputSchema: z.ZodType<Prisma.users_terminalsCreateManyInput> = z.object({
  user_id: z.string(),
  terminal_id: z.string()
}).strict();

export const users_terminalsUpdateManyMutationInputSchema: z.ZodType<Prisma.users_terminalsUpdateManyMutationInput> = z.object({
}).strict();

export const users_terminalsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesCreateInputSchema: z.ZodType<Prisma.users_work_schedulesCreateInput> = z.object({
  users: z.lazy(() => usersCreateNestedOneWithoutUsers_work_schedulesInputSchema),
  work_schedules: z.lazy(() => work_schedulesCreateNestedOneWithoutUsers_work_schedulesInputSchema)
}).strict();

export const users_work_schedulesUncheckedCreateInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedCreateInput> = z.object({
  user_id: z.string(),
  work_schedule_id: z.string()
}).strict();

export const users_work_schedulesUpdateInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateInput> = z.object({
  users: z.lazy(() => usersUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional(),
  work_schedules: z.lazy(() => work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional()
}).strict();

export const users_work_schedulesUncheckedUpdateInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesCreateManyInputSchema: z.ZodType<Prisma.users_work_schedulesCreateManyInput> = z.object({
  user_id: z.string(),
  work_schedule_id: z.string()
}).strict();

export const users_work_schedulesUpdateManyMutationInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateManyMutationInput> = z.object({
}).strict();

export const users_work_schedulesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const work_schedule_entriesCreateInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const work_schedule_entriesUncheckedCreateInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesUpdateInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedule_entriesUncheckedUpdateInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedule_entriesCreateManyInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesUpdateManyMutationInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const api_tokensCreateInputSchema: z.ZodType<Prisma.api_tokensCreateInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => organizationCreateNestedOneWithoutApi_tokens_organizationInputSchema)
}).strict();

export const api_tokensUncheckedCreateInputSchema: z.ZodType<Prisma.api_tokensUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const api_tokensUpdateInputSchema: z.ZodType<Prisma.api_tokensUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => usersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => usersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => organizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const api_tokensUncheckedUpdateInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const api_tokensCreateManyInputSchema: z.ZodType<Prisma.api_tokensCreateManyInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const api_tokensUpdateManyMutationInputSchema: z.ZodType<Prisma.api_tokensUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const api_tokensUncheckedUpdateManyInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const timesheetCreateInputSchema: z.ZodType<Prisma.timesheetCreateInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  timesheet_users: z.lazy(() => usersCreateNestedOneWithoutTimesheet_usersInputSchema)
}).strict();

export const timesheetUncheckedCreateInputSchema: z.ZodType<Prisma.timesheetUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const timesheetUpdateInputSchema: z.ZodType<Prisma.timesheetUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  timesheet_users: z.lazy(() => usersUpdateOneRequiredWithoutTimesheet_usersNestedInputSchema).optional()
}).strict();

export const timesheetUncheckedUpdateInputSchema: z.ZodType<Prisma.timesheetUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timesheetCreateManyInputSchema: z.ZodType<Prisma.timesheetCreateManyInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const timesheetUpdateManyMutationInputSchema: z.ZodType<Prisma.timesheetUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timesheetUncheckedUpdateManyInputSchema: z.ZodType<Prisma.timesheetUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reportsCreateInputSchema: z.ZodType<Prisma.scheduled_reportsCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema).optional()
}).strict();

export const scheduled_reportsUncheckedCreateInputSchema: z.ZodType<Prisma.scheduled_reportsUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema).optional()
}).strict();

export const scheduled_reportsUpdateInputSchema: z.ZodType<Prisma.scheduled_reportsUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema).optional()
}).strict();

export const scheduled_reportsUncheckedUpdateInputSchema: z.ZodType<Prisma.scheduled_reportsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_scheduled_reports_subscriptions: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema).optional()
}).strict();

export const scheduled_reportsCreateManyInputSchema: z.ZodType<Prisma.scheduled_reportsCreateManyInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reportsUpdateManyMutationInputSchema: z.ZodType<Prisma.scheduled_reportsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reportsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.scheduled_reportsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionCreateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_subscription_reports: z.lazy(() => scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),
  scheduled_reports_subscription_users: z.lazy(() => usersCreateNestedOneWithoutScheduled_reports_subscription_usersInputSchema)
}).strict();

export const scheduled_reports_subscriptionUncheckedCreateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedCreateInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reports_subscriptionUpdateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_subscription_reports: z.lazy(() => scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => usersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionCreateManyInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateManyInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reports_subscriptionUpdateManyMutationInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UuidFilterSchema: z.ZodType<Prisma.UuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const UuidNullableFilterSchema: z.ZodType<Prisma.UuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UsersNullableRelationFilterSchema: z.ZodType<Prisma.UsersNullableRelationFilter> = z.object({
  is: z.lazy(() => usersWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => usersWhereInputSchema).optional().nullable()
}).strict();

export const Roles_permissionsListRelationFilterSchema: z.ZodType<Prisma.Roles_permissionsListRelationFilter> = z.object({
  every: z.lazy(() => roles_permissionsWhereInputSchema).optional(),
  some: z.lazy(() => roles_permissionsWhereInputSchema).optional(),
  none: z.lazy(() => roles_permissionsWhereInputSchema).optional()
}).strict();

export const Users_permissionsListRelationFilterSchema: z.ZodType<Prisma.Users_permissionsListRelationFilter> = z.object({
  every: z.lazy(() => users_permissionsWhereInputSchema).optional(),
  some: z.lazy(() => users_permissionsWhereInputSchema).optional(),
  none: z.lazy(() => users_permissionsWhereInputSchema).optional()
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const roles_permissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.roles_permissionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_permissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.users_permissionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const permissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.permissionsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const permissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.permissionsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const permissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.permissionsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  slug: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidWithAggregatesFilterSchema: z.ZodType<Prisma.UuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const UuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.UuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Users_rolesListRelationFilterSchema: z.ZodType<Prisma.Users_rolesListRelationFilter> = z.object({
  every: z.lazy(() => users_rolesWhereInputSchema).optional(),
  some: z.lazy(() => users_rolesWhereInputSchema).optional(),
  none: z.lazy(() => users_rolesWhereInputSchema).optional()
}).strict();

export const users_rolesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.users_rolesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const rolesCountOrderByAggregateInputSchema: z.ZodType<Prisma.rolesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const rolesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.rolesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const rolesMinOrderByAggregateInputSchema: z.ZodType<Prisma.rolesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const PermissionsRelationFilterSchema: z.ZodType<Prisma.PermissionsRelationFilter> = z.object({
  is: z.lazy(() => permissionsWhereInputSchema).optional(),
  isNot: z.lazy(() => permissionsWhereInputSchema).optional()
}).strict();

export const RolesRelationFilterSchema: z.ZodType<Prisma.RolesRelationFilter> = z.object({
  is: z.lazy(() => rolesWhereInputSchema).optional(),
  isNot: z.lazy(() => rolesWhereInputSchema).optional()
}).strict();

export const roles_permissionsRole_idPermission_idCompoundUniqueInputSchema: z.ZodType<Prisma.roles_permissionsRole_idPermission_idCompoundUniqueInput> = z.object({
  role_id: z.string(),
  permission_id: z.string()
}).strict();

export const roles_permissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.roles_permissionsCountOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const roles_permissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.roles_permissionsMaxOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const roles_permissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.roles_permissionsMinOrderByAggregateInput> = z.object({
  role_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumuser_statusFilterSchema: z.ZodType<Prisma.Enumuser_statusFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const PermissionsListRelationFilterSchema: z.ZodType<Prisma.PermissionsListRelationFilter> = z.object({
  every: z.lazy(() => permissionsWhereInputSchema).optional(),
  some: z.lazy(() => permissionsWhereInputSchema).optional(),
  none: z.lazy(() => permissionsWhereInputSchema).optional()
}).strict();

export const RolesListRelationFilterSchema: z.ZodType<Prisma.RolesListRelationFilter> = z.object({
  every: z.lazy(() => rolesWhereInputSchema).optional(),
  some: z.lazy(() => rolesWhereInputSchema).optional(),
  none: z.lazy(() => rolesWhereInputSchema).optional()
}).strict();

export const OrganizationListRelationFilterSchema: z.ZodType<Prisma.OrganizationListRelationFilter> = z.object({
  every: z.lazy(() => organizationWhereInputSchema).optional(),
  some: z.lazy(() => organizationWhereInputSchema).optional(),
  none: z.lazy(() => organizationWhereInputSchema).optional()
}).strict();

export const Work_schedulesListRelationFilterSchema: z.ZodType<Prisma.Work_schedulesListRelationFilter> = z.object({
  every: z.lazy(() => work_schedulesWhereInputSchema).optional(),
  some: z.lazy(() => work_schedulesWhereInputSchema).optional(),
  none: z.lazy(() => work_schedulesWhereInputSchema).optional()
}).strict();

export const Users_terminalsListRelationFilterSchema: z.ZodType<Prisma.Users_terminalsListRelationFilter> = z.object({
  every: z.lazy(() => users_terminalsWhereInputSchema).optional(),
  some: z.lazy(() => users_terminalsWhereInputSchema).optional(),
  none: z.lazy(() => users_terminalsWhereInputSchema).optional()
}).strict();

export const Users_work_schedulesListRelationFilterSchema: z.ZodType<Prisma.Users_work_schedulesListRelationFilter> = z.object({
  every: z.lazy(() => users_work_schedulesWhereInputSchema).optional(),
  some: z.lazy(() => users_work_schedulesWhereInputSchema).optional(),
  none: z.lazy(() => users_work_schedulesWhereInputSchema).optional()
}).strict();

export const Work_schedule_entriesListRelationFilterSchema: z.ZodType<Prisma.Work_schedule_entriesListRelationFilter> = z.object({
  every: z.lazy(() => work_schedule_entriesWhereInputSchema).optional(),
  some: z.lazy(() => work_schedule_entriesWhereInputSchema).optional(),
  none: z.lazy(() => work_schedule_entriesWhereInputSchema).optional()
}).strict();

export const Api_tokensListRelationFilterSchema: z.ZodType<Prisma.Api_tokensListRelationFilter> = z.object({
  every: z.lazy(() => api_tokensWhereInputSchema).optional(),
  some: z.lazy(() => api_tokensWhereInputSchema).optional(),
  none: z.lazy(() => api_tokensWhereInputSchema).optional()
}).strict();

export const TimesheetListRelationFilterSchema: z.ZodType<Prisma.TimesheetListRelationFilter> = z.object({
  every: z.lazy(() => timesheetWhereInputSchema).optional(),
  some: z.lazy(() => timesheetWhereInputSchema).optional(),
  none: z.lazy(() => timesheetWhereInputSchema).optional()
}).strict();

export const Scheduled_reports_subscriptionListRelationFilterSchema: z.ZodType<Prisma.Scheduled_reports_subscriptionListRelationFilter> = z.object({
  every: z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).optional(),
  some: z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).optional(),
  none: z.lazy(() => scheduled_reports_subscriptionWhereInputSchema).optional()
}).strict();

export const permissionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.permissionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const rolesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.rolesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const organizationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.organizationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedulesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.work_schedulesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_terminalsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.users_terminalsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_work_schedulesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.users_work_schedulesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedule_entriesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.work_schedule_entriesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const api_tokensOrderByRelationAggregateInputSchema: z.ZodType<Prisma.api_tokensOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timesheetOrderByRelationAggregateInputSchema: z.ZodType<Prisma.timesheetOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const scheduled_reports_subscriptionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersCountOrderByAggregateInputSchema: z.ZodType<Prisma.usersCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.lazy(() => SortOrderSchema).optional(),
  last_name: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.lazy(() => SortOrderSchema).optional(),
  card_number: z.lazy(() => SortOrderSchema).optional(),
  birth_date: z.lazy(() => SortOrderSchema).optional(),
  car_model: z.lazy(() => SortOrderSchema).optional(),
  car_number: z.lazy(() => SortOrderSchema).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  fcm_token: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  doc_files: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.lazy(() => SortOrderSchema).optional(),
  app_version: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.lazy(() => SortOrderSchema).optional(),
  tg_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersAvgOrderByAggregateInputSchema: z.ZodType<Prisma.usersAvgOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.usersMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.lazy(() => SortOrderSchema).optional(),
  last_name: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.lazy(() => SortOrderSchema).optional(),
  card_number: z.lazy(() => SortOrderSchema).optional(),
  birth_date: z.lazy(() => SortOrderSchema).optional(),
  car_model: z.lazy(() => SortOrderSchema).optional(),
  car_number: z.lazy(() => SortOrderSchema).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  fcm_token: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.lazy(() => SortOrderSchema).optional(),
  app_version: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.lazy(() => SortOrderSchema).optional(),
  tg_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersMinOrderByAggregateInputSchema: z.ZodType<Prisma.usersMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  first_name: z.lazy(() => SortOrderSchema).optional(),
  last_name: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  is_super_user: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  card_name: z.lazy(() => SortOrderSchema).optional(),
  card_number: z.lazy(() => SortOrderSchema).optional(),
  birth_date: z.lazy(() => SortOrderSchema).optional(),
  car_model: z.lazy(() => SortOrderSchema).optional(),
  car_number: z.lazy(() => SortOrderSchema).optional(),
  is_online: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  fcm_token: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  order_start_date: z.lazy(() => SortOrderSchema).optional(),
  app_version: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  api_token: z.lazy(() => SortOrderSchema).optional(),
  tg_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersSumOrderByAggregateInputSchema: z.ZodType<Prisma.usersSumOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  wallet_balance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumuser_statusWithAggregatesFilterSchema: z.ZodType<Prisma.Enumuser_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_statusFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const UsersRelationFilterSchema: z.ZodType<Prisma.UsersRelationFilter> = z.object({
  is: z.lazy(() => usersWhereInputSchema).optional(),
  isNot: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const users_permissionsUser_idPermission_idCompoundUniqueInputSchema: z.ZodType<Prisma.users_permissionsUser_idPermission_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  permission_id: z.string()
}).strict();

export const users_permissionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.users_permissionsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_permissionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.users_permissionsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_permissionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.users_permissionsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  permission_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_rolesUser_idRole_idCompoundUniqueInputSchema: z.ZodType<Prisma.users_rolesUser_idRole_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  role_id: z.string()
}).strict();

export const users_rolesCountOrderByAggregateInputSchema: z.ZodType<Prisma.users_rolesCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_rolesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.users_rolesMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_rolesMinOrderByAggregateInputSchema: z.ZodType<Prisma.users_rolesMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role_id: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const OrganizationRelationFilterSchema: z.ZodType<Prisma.OrganizationRelationFilter> = z.object({
  is: z.lazy(() => organizationWhereInputSchema).optional(),
  isNot: z.lazy(() => organizationWhereInputSchema).optional()
}).strict();

export const work_schedulesCountOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedulesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  days: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedulesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedulesAvgOrderByAggregateInput> = z.object({
  bonus_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedulesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedulesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedulesMinOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedulesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  start_time: z.lazy(() => SortOrderSchema).optional(),
  end_time: z.lazy(() => SortOrderSchema).optional(),
  max_start_time: z.lazy(() => SortOrderSchema).optional(),
  bonus_price: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedulesSumOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedulesSumOrderByAggregateInput> = z.object({
  bonus_price: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const terminalsCountOrderByAggregateInputSchema: z.ZodType<Prisma.terminalsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const terminalsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.terminalsAvgOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const terminalsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.terminalsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const terminalsMinOrderByAggregateInputSchema: z.ZodType<Prisma.terminalsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  address: z.lazy(() => SortOrderSchema).optional(),
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  manager_name: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const terminalsSumOrderByAggregateInputSchema: z.ZodType<Prisma.terminalsSumOrderByAggregateInput> = z.object({
  latitude: z.lazy(() => SortOrderSchema).optional(),
  longitude: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumorganization_system_typeFilterSchema: z.ZodType<Prisma.Enumorganization_system_typeFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeFilterSchema) ]).optional(),
}).strict();

export const Enumorganization_payment_typesFilterSchema: z.ZodType<Prisma.Enumorganization_payment_typesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesFilterSchema) ]).optional(),
}).strict();

export const TerminalsListRelationFilterSchema: z.ZodType<Prisma.TerminalsListRelationFilter> = z.object({
  every: z.lazy(() => terminalsWhereInputSchema).optional(),
  some: z.lazy(() => terminalsWhereInputSchema).optional(),
  none: z.lazy(() => terminalsWhereInputSchema).optional()
}).strict();

export const terminalsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.terminalsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const organizationCountOrderByAggregateInputSchema: z.ZodType<Prisma.organizationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.lazy(() => SortOrderSchema).optional(),
  webhook: z.lazy(() => SortOrderSchema).optional(),
  group_id: z.lazy(() => SortOrderSchema).optional(),
  apelsin_login: z.lazy(() => SortOrderSchema).optional(),
  apelsin_password: z.lazy(() => SortOrderSchema).optional(),
  sender_name: z.lazy(() => SortOrderSchema).optional(),
  sender_number: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.lazy(() => SortOrderSchema).optional(),
  icon_url: z.lazy(() => SortOrderSchema).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const organizationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.organizationAvgOrderByAggregateInput> = z.object({
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const organizationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.organizationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.lazy(() => SortOrderSchema).optional(),
  webhook: z.lazy(() => SortOrderSchema).optional(),
  group_id: z.lazy(() => SortOrderSchema).optional(),
  apelsin_login: z.lazy(() => SortOrderSchema).optional(),
  apelsin_password: z.lazy(() => SortOrderSchema).optional(),
  sender_name: z.lazy(() => SortOrderSchema).optional(),
  sender_number: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.lazy(() => SortOrderSchema).optional(),
  icon_url: z.lazy(() => SortOrderSchema).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const organizationMinOrderByAggregateInputSchema: z.ZodType<Prisma.organizationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  external_id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  system_type: z.lazy(() => SortOrderSchema).optional(),
  phone: z.lazy(() => SortOrderSchema).optional(),
  iiko_login: z.lazy(() => SortOrderSchema).optional(),
  webhook: z.lazy(() => SortOrderSchema).optional(),
  group_id: z.lazy(() => SortOrderSchema).optional(),
  apelsin_login: z.lazy(() => SortOrderSchema).optional(),
  apelsin_password: z.lazy(() => SortOrderSchema).optional(),
  sender_name: z.lazy(() => SortOrderSchema).optional(),
  sender_number: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional(),
  payment_type: z.lazy(() => SortOrderSchema).optional(),
  support_chat_url: z.lazy(() => SortOrderSchema).optional(),
  icon_url: z.lazy(() => SortOrderSchema).optional(),
  allow_yandex_delivery: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const organizationSumOrderByAggregateInputSchema: z.ZodType<Prisma.organizationSumOrderByAggregateInput> = z.object({
  max_distance: z.lazy(() => SortOrderSchema).optional(),
  max_active_order_count: z.lazy(() => SortOrderSchema).optional(),
  max_order_close_distance: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumorganization_system_typeWithAggregatesFilterSchema: z.ZodType<Prisma.Enumorganization_system_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional()
}).strict();

export const Enumorganization_payment_typesWithAggregatesFilterSchema: z.ZodType<Prisma.Enumorganization_payment_typesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional()
}).strict();

export const TerminalsRelationFilterSchema: z.ZodType<Prisma.TerminalsRelationFilter> = z.object({
  is: z.lazy(() => terminalsWhereInputSchema).optional(),
  isNot: z.lazy(() => terminalsWhereInputSchema).optional()
}).strict();

export const users_terminalsUser_idTerminal_idCompoundUniqueInputSchema: z.ZodType<Prisma.users_terminalsUser_idTerminal_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  terminal_id: z.string()
}).strict();

export const users_terminalsCountOrderByAggregateInputSchema: z.ZodType<Prisma.users_terminalsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_terminalsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.users_terminalsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_terminalsMinOrderByAggregateInputSchema: z.ZodType<Prisma.users_terminalsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  terminal_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Work_schedulesRelationFilterSchema: z.ZodType<Prisma.Work_schedulesRelationFilter> = z.object({
  is: z.lazy(() => work_schedulesWhereInputSchema).optional(),
  isNot: z.lazy(() => work_schedulesWhereInputSchema).optional()
}).strict();

export const users_work_schedulesUser_idWork_schedule_idCompoundUniqueInputSchema: z.ZodType<Prisma.users_work_schedulesUser_idWork_schedule_idCompoundUniqueInput> = z.object({
  user_id: z.string(),
  work_schedule_id: z.string()
}).strict();

export const users_work_schedulesCountOrderByAggregateInputSchema: z.ZodType<Prisma.users_work_schedulesCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_work_schedulesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.users_work_schedulesMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const users_work_schedulesMinOrderByAggregateInputSchema: z.ZodType<Prisma.users_work_schedulesMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumwork_schedule_entry_statusFilterSchema: z.ZodType<Prisma.Enumwork_schedule_entry_statusFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema) ]).optional(),
}).strict();

export const work_schedule_entriesCountOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedule_entriesCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.lazy(() => SortOrderSchema).optional(),
  ip_close: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedule_entriesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedule_entriesAvgOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedule_entriesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedule_entriesMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.lazy(() => SortOrderSchema).optional(),
  ip_close: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedule_entriesMinOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedule_entriesMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  work_schedule_id: z.lazy(() => SortOrderSchema).optional(),
  date_start: z.lazy(() => SortOrderSchema).optional(),
  date_finish: z.lazy(() => SortOrderSchema).optional(),
  duration: z.lazy(() => SortOrderSchema).optional(),
  ip_open: z.lazy(() => SortOrderSchema).optional(),
  ip_close: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional(),
  current_status: z.lazy(() => SortOrderSchema).optional(),
  late: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const work_schedule_entriesSumOrderByAggregateInputSchema: z.ZodType<Prisma.work_schedule_entriesSumOrderByAggregateInput> = z.object({
  duration: z.lazy(() => SortOrderSchema).optional(),
  lat_open: z.lazy(() => SortOrderSchema).optional(),
  lat_close: z.lazy(() => SortOrderSchema).optional(),
  lon_open: z.lazy(() => SortOrderSchema).optional(),
  lon_close: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumwork_schedule_entry_statusWithAggregatesFilterSchema: z.ZodType<Prisma.Enumwork_schedule_entry_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional()
}).strict();

export const api_tokensCountOrderByAggregateInputSchema: z.ZodType<Prisma.api_tokensCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const api_tokensMaxOrderByAggregateInputSchema: z.ZodType<Prisma.api_tokensMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const api_tokensMinOrderByAggregateInputSchema: z.ZodType<Prisma.api_tokensMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  organization_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  created_by: z.lazy(() => SortOrderSchema).optional(),
  updated_by: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timesheetCountOrderByAggregateInputSchema: z.ZodType<Prisma.timesheetCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timesheetMaxOrderByAggregateInputSchema: z.ZodType<Prisma.timesheetMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const timesheetMinOrderByAggregateInputSchema: z.ZodType<Prisma.timesheetMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  is_late: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const scheduled_reportsCountOrderByAggregateInputSchema: z.ZodType<Prisma.scheduled_reportsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const scheduled_reportsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.scheduled_reportsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const scheduled_reportsMinOrderByAggregateInputSchema: z.ZodType<Prisma.scheduled_reportsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  code: z.lazy(() => SortOrderSchema).optional(),
  cron: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Scheduled_reportsRelationFilterSchema: z.ZodType<Prisma.Scheduled_reportsRelationFilter> = z.object({
  is: z.lazy(() => scheduled_reportsWhereInputSchema).optional(),
  isNot: z.lazy(() => scheduled_reportsWhereInputSchema).optional()
}).strict();

export const scheduled_reports_subscriptionCountOrderByAggregateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const scheduled_reports_subscriptionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const scheduled_reports_subscriptionMinOrderByAggregateInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  report_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutPermissions_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const roles_permissionsCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateNestedManyWithoutPermissionsInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const usersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUpdateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutPermissionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyPermissionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutRoles_roles_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_roles_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutRoles_roles_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const roles_permissionsCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutRolesInputSchema),z.lazy(() => users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateNestedManyWithoutRolesInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutRolesInputSchema),z.lazy(() => users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const usersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutRoles_roles_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_roles_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutRoles_roles_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUpdateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutRoles_roles_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUpdateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const roles_permissionsUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutRolesInputSchema),z.lazy(() => users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutRolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutRolesInputSchema),z.lazy(() => users_rolesCreateWithoutRolesInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutRolesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyRolesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutRolesInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutRolesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const permissionsCreateNestedOneWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsCreateNestedOneWithoutRoles_permissionsInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => permissionsCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => permissionsWhereUniqueInputSchema).optional()
}).strict();

export const rolesCreateNestedOneWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesCreateNestedOneWithoutRoles_permissionsInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => rolesCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => rolesWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]).optional(),
}).strict();

export const permissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema: z.ZodType<Prisma.permissionsUpdateOneRequiredWithoutRoles_permissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => permissionsCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  upsert: z.lazy(() => permissionsUpsertWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => permissionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => permissionsUpdateToOneWithWhereWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutRoles_permissionsInputSchema) ]).optional(),
}).strict();

export const rolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema: z.ZodType<Prisma.rolesUpdateOneRequiredWithoutRoles_permissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => rolesCreateOrConnectWithoutRoles_permissionsInputSchema).optional(),
  upsert: z.lazy(() => rolesUpsertWithoutRoles_permissionsInputSchema).optional(),
  connect: z.lazy(() => rolesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => rolesUpdateToOneWithWhereWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutRoles_permissionsInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const usersCreatedoc_filesInputSchema: z.ZodType<Prisma.usersCreatedoc_filesInput> = z.object({
  set: z.string().array()
}).strict();

export const permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesCreateNestedManyWithoutUsers_roles_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationCreateNestedManyWithoutOrganization_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationCreateNestedManyWithoutOrganization_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_terminalsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_work_schedulesCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const timesheetCreateNestedManyWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetCreateNestedManyWithoutTimesheet_usersInput> = z.object({
  create: z.union([ z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInput> = z.object({
  create: z.union([ z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumuser_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumuser_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => user_statusSchema).optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const usersUpdatedoc_filesInputSchema: z.ZodType<Prisma.usersUpdatedoc_filesInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => permissionsScalarWhereInputSchema),z.lazy(() => permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => permissionsScalarWhereInputSchema),z.lazy(() => permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema: z.ZodType<Prisma.rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => rolesScalarWhereInputSchema),z.lazy(() => rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema: z.ZodType<Prisma.rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => rolesScalarWhereInputSchema),z.lazy(() => rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema: z.ZodType<Prisma.organizationUpdateManyWithoutOrganization_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => organizationScalarWhereInputSchema),z.lazy(() => organizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema: z.ZodType<Prisma.organizationUpdateManyWithoutOrganization_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => organizationScalarWhereInputSchema),z.lazy(() => organizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_terminalsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.users_terminalsUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_terminalsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => users_terminalsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_terminalsScalarWhereInputSchema),z.lazy(() => users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_work_schedulesUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_work_schedulesScalarWhereInputSchema),z.lazy(() => users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema: z.ZodType<Prisma.api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema: z.ZodType<Prisma.api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema: z.ZodType<Prisma.timesheetUpdateManyWithoutTimesheet_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => timesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => timesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => timesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => timesheetScalarWhereInputSchema),z.lazy(() => timesheetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => permissionsScalarWhereInputSchema),z.lazy(() => permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema).array(),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => permissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => permissionsWhereUniqueInputSchema),z.lazy(() => permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => permissionsScalarWhereInputSchema),z.lazy(() => permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => rolesScalarWhereInputSchema),z.lazy(() => rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema).array(),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => rolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => rolesWhereUniqueInputSchema),z.lazy(() => rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => rolesScalarWhereInputSchema),z.lazy(() => rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array(),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => roles_permissionsWhereUniqueInputSchema),z.lazy(() => roles_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array(),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_permissionsWhereUniqueInputSchema),z.lazy(() => users_permissionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array(),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_rolesWhereUniqueInputSchema),z.lazy(() => users_rolesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => organizationScalarWhereInputSchema),z.lazy(() => organizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema).array(),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => organizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => organizationWhereUniqueInputSchema),z.lazy(() => organizationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => organizationScalarWhereInputSchema),z.lazy(() => organizationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateWithoutUsersInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_terminalsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => users_terminalsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_terminalsScalarWhereInputSchema),z.lazy(() => users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_work_schedulesScalarWhereInputSchema),z.lazy(() => users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema: z.ZodType<Prisma.timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema).array(),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetCreateOrConnectWithoutTimesheet_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => timesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => timesheetCreateManyTimesheet_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => timesheetWhereUniqueInputSchema),z.lazy(() => timesheetWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => timesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => timesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => timesheetScalarWhereInputSchema),z.lazy(() => timesheetScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const permissionsCreateNestedOneWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsCreateNestedOneWithoutUsers_permissionsInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissionsInputSchema).optional(),
  connect: z.lazy(() => permissionsWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]).optional(),
}).strict();

export const permissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema: z.ZodType<Prisma.permissionsUpdateOneRequiredWithoutUsers_permissionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => permissionsCreateOrConnectWithoutUsers_permissionsInputSchema).optional(),
  upsert: z.lazy(() => permissionsUpsertWithoutUsers_permissionsInputSchema).optional(),
  connect: z.lazy(() => permissionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => permissionsUpdateToOneWithWhereWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUpdateWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutUsers_permissionsInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const rolesCreateNestedOneWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesCreateNestedOneWithoutUsers_rolesInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_rolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => rolesCreateOrConnectWithoutUsers_rolesInputSchema).optional(),
  connect: z.lazy(() => rolesWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]).optional(),
}).strict();

export const rolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema: z.ZodType<Prisma.rolesUpdateOneRequiredWithoutUsers_rolesNestedInput> = z.object({
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_rolesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => rolesCreateOrConnectWithoutUsers_rolesInputSchema).optional(),
  upsert: z.lazy(() => rolesUpsertWithoutUsers_rolesInputSchema).optional(),
  connect: z.lazy(() => rolesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => rolesUpdateToOneWithWhereWithoutUsers_rolesInputSchema),z.lazy(() => rolesUpdateWithoutUsers_rolesInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutUsers_rolesInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_roles_usersTousers_roles_user_idInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]).optional(),
}).strict();

export const work_schedulesCreatedaysInputSchema: z.ZodType<Prisma.work_schedulesCreatedaysInput> = z.object({
  set: z.string().array()
}).strict();

export const organizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => organizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => organizationWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutWork_schedules_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutWork_schedules_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesCreateNestedManyWithoutWork_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUpdatedaysInputSchema: z.ZodType<Prisma.work_schedulesUpdatedaysInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const organizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema: z.ZodType<Prisma.organizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => organizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInputSchema).optional(),
  upsert: z.lazy(() => organizationUpsertWithoutWork_schedules_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => organizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => organizationUpdateToOneWithWhereWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutWork_schedules_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutWork_schedules_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutWork_schedules_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateManyWithoutWork_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_work_schedulesScalarWhereInputSchema),z.lazy(() => users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema).array(),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_work_schedulesWhereUniqueInputSchema),z.lazy(() => users_work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_work_schedulesScalarWhereInputSchema),z.lazy(() => users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array(),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),z.lazy(() => work_schedule_entriesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const organizationCreateNestedOneWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationCreateNestedOneWithoutTerminals_organization_idTorganizationInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => organizationCreateOrConnectWithoutTerminals_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => organizationWhereUniqueInputSchema).optional()
}).strict();

export const users_terminalsCreateNestedManyWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsCreateNestedManyWithoutTerminalsInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const users_terminalsUncheckedCreateNestedManyWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUncheckedCreateNestedManyWithoutTerminalsInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const organizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInputSchema: z.ZodType<Prisma.organizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => organizationCreateOrConnectWithoutTerminals_organization_idTorganizationInputSchema).optional(),
  upsert: z.lazy(() => organizationUpsertWithoutTerminals_organization_idTorganizationInputSchema).optional(),
  connect: z.lazy(() => organizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => organizationUpdateToOneWithWhereWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUpdateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema) ]).optional(),
}).strict();

export const users_terminalsUpdateManyWithoutTerminalsNestedInputSchema: z.ZodType<Prisma.users_terminalsUpdateManyWithoutTerminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_terminalsScalarWhereInputSchema),z.lazy(() => users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema).array(),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema),z.lazy(() => users_terminalsCreateOrConnectWithoutTerminalsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => users_terminalsCreateManyTerminalsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => users_terminalsWhereUniqueInputSchema),z.lazy(() => users_terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => users_terminalsScalarWhereInputSchema),z.lazy(() => users_terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutOrganization_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOrganization_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutOrganization_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const terminalsCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => terminalsCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => terminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensCreateNestedManyWithoutApi_tokens_organizationInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const terminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUncheckedCreateNestedManyWithoutOrganizationInput> = z.object({
  create: z.union([ z.lazy(() => terminalsCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => terminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Enumorganization_system_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumorganization_system_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => organization_system_typeSchema).optional()
}).strict();

export const Enumorganization_payment_typesFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumorganization_payment_typesFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => organization_payment_typesSchema).optional()
}).strict();

export const work_schedulesUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.work_schedulesUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutOrganization_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOrganization_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutOrganization_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutOrganization_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutOrganization_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutOrganization_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const terminalsUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.terminalsUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => terminalsCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => terminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => terminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => terminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => terminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => terminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => terminalsUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => terminalsUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => terminalsScalarWhereInputSchema),z.lazy(() => terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema: z.ZodType<Prisma.api_tokensUpdateManyWithoutApi_tokens_organizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema).array(),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => work_schedulesCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => work_schedulesCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => work_schedulesWhereUniqueInputSchema),z.lazy(() => work_schedulesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const terminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema: z.ZodType<Prisma.terminalsUncheckedUpdateManyWithoutOrganizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => terminalsCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateWithoutOrganizationInputSchema).array(),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema),z.lazy(() => terminalsCreateOrConnectWithoutOrganizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => terminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => terminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => terminalsCreateManyOrganizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => terminalsWhereUniqueInputSchema),z.lazy(() => terminalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => terminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema),z.lazy(() => terminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => terminalsUpdateManyWithWhereWithoutOrganizationInputSchema),z.lazy(() => terminalsUpdateManyWithWhereWithoutOrganizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => terminalsScalarWhereInputSchema),z.lazy(() => terminalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema).array(),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => api_tokensWhereUniqueInputSchema),z.lazy(() => api_tokensWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_terminalsInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const terminalsCreateNestedOneWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsCreateNestedOneWithoutUsers_terminalsInput> = z.object({
  create: z.union([ z.lazy(() => terminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => terminalsCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => terminalsWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutUsers_terminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_terminalsInputSchema),z.lazy(() => usersUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_terminalsInputSchema) ]).optional(),
}).strict();

export const terminalsUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema: z.ZodType<Prisma.terminalsUpdateOneRequiredWithoutUsers_terminalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => terminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => terminalsCreateOrConnectWithoutUsers_terminalsInputSchema).optional(),
  upsert: z.lazy(() => terminalsUpsertWithoutUsers_terminalsInputSchema).optional(),
  connect: z.lazy(() => terminalsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => terminalsUpdateToOneWithWhereWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUncheckedUpdateWithoutUsers_terminalsInputSchema) ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutUsers_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const work_schedulesCreateNestedOneWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesCreateNestedOneWithoutUsers_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => work_schedulesCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => work_schedulesWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutUsers_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]).optional(),
}).strict();

export const work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema: z.ZodType<Prisma.work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => work_schedulesCreateOrConnectWithoutUsers_work_schedulesInputSchema).optional(),
  upsert: z.lazy(() => work_schedulesUpsertWithoutUsers_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => work_schedulesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutWork_schedule_entries_usersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => work_schedulesWhereUniqueInputSchema).optional()
}).strict();

export const Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.Enumwork_schedule_entry_statusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => work_schedule_entry_statusSchema).optional()
}).strict();

export const usersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutWork_schedule_entries_usersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutWork_schedule_entries_usersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]).optional(),
}).strict();

export const work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema: z.ZodType<Prisma.work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInput> = z.object({
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema).optional(),
  upsert: z.lazy(() => work_schedulesUpsertWithoutWork_schedule_entries_work_schedulesInputSchema).optional(),
  connect: z.lazy(() => work_schedulesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => work_schedulesUpdateToOneWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutApi_tokens_created_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutApi_tokens_updated_byTousersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const organizationCreateNestedOneWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationCreateNestedOneWithoutApi_tokens_organizationInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => organizationCreateOrConnectWithoutApi_tokens_organizationInputSchema).optional(),
  connect: z.lazy(() => organizationWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutApi_tokens_created_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutApi_tokens_created_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneWithoutApi_tokens_updated_byTousersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => usersWhereInputSchema) ]).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]).optional(),
}).strict();

export const organizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema: z.ZodType<Prisma.organizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInput> = z.object({
  create: z.union([ z.lazy(() => organizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => organizationCreateOrConnectWithoutApi_tokens_organizationInputSchema).optional(),
  upsert: z.lazy(() => organizationUpsertWithoutApi_tokens_organizationInputSchema).optional(),
  connect: z.lazy(() => organizationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => organizationUpdateToOneWithWhereWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]).optional(),
}).strict();

export const usersCreateNestedOneWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutTimesheet_usersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutTimesheet_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutTimesheet_usersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const usersUpdateOneRequiredWithoutTimesheet_usersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutTimesheet_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutTimesheet_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutTimesheet_usersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutTimesheet_usersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutTimesheet_usersInputSchema),z.lazy(() => usersUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutTimesheet_usersInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_reportsInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_reportsInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsNestedInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema).array(),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema).optional(),
  connect: z.lazy(() => scheduled_reportsWhereUniqueInputSchema).optional()
}).strict();

export const usersCreateNestedOneWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersCreateNestedOneWithoutScheduled_reports_subscription_usersInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional()
}).strict();

export const scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInputSchema: z.ZodType<Prisma.scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema).optional(),
  upsert: z.lazy(() => scheduled_reportsUpsertWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema).optional(),
  connect: z.lazy(() => scheduled_reportsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => scheduled_reportsUpdateToOneWithWhereWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]).optional(),
}).strict();

export const usersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInputSchema: z.ZodType<Prisma.usersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => usersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => usersCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  upsert: z.lazy(() => usersUpsertWithoutScheduled_reports_subscription_usersInputSchema).optional(),
  connect: z.lazy(() => usersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => usersUpdateToOneWithWhereWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]).optional(),
}).strict();

export const NestedUuidFilterSchema: z.ZodType<Prisma.NestedUuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableFilterSchema: z.ZodType<Prisma.NestedUuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedUuidWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedUuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedEnumuser_statusFilterSchema: z.ZodType<Prisma.NestedEnumuser_statusFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedEnumuser_statusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumuser_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => user_statusSchema).optional(),
  in: z.lazy(() => user_statusSchema).array().optional(),
  notIn: z.lazy(() => user_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => NestedEnumuser_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumuser_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumuser_statusFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedEnumorganization_system_typeFilterSchema: z.ZodType<Prisma.NestedEnumorganization_system_typeFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumorganization_payment_typesFilterSchema: z.ZodType<Prisma.NestedEnumorganization_payment_typesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesFilterSchema) ]).optional(),
}).strict();

export const NestedEnumorganization_system_typeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumorganization_system_typeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_system_typeSchema).optional(),
  in: z.lazy(() => organization_system_typeSchema).array().optional(),
  notIn: z.lazy(() => organization_system_typeSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => NestedEnumorganization_system_typeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_system_typeFilterSchema).optional()
}).strict();

export const NestedEnumorganization_payment_typesWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumorganization_payment_typesWithAggregatesFilter> = z.object({
  equals: z.lazy(() => organization_payment_typesSchema).optional(),
  in: z.lazy(() => organization_payment_typesSchema).array().optional(),
  notIn: z.lazy(() => organization_payment_typesSchema).array().optional(),
  not: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => NestedEnumorganization_payment_typesWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumorganization_payment_typesFilterSchema).optional()
}).strict();

export const NestedEnumwork_schedule_entry_statusFilterSchema: z.ZodType<Prisma.NestedEnumwork_schedule_entry_statusFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumwork_schedule_entry_statusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumwork_schedule_entry_statusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  in: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  notIn: z.lazy(() => work_schedule_entry_statusSchema).array().optional(),
  not: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => NestedEnumwork_schedule_entry_statusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumwork_schedule_entry_statusFilterSchema).optional()
}).strict();

export const usersCreateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutPermissions_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
}).strict();

export const usersCreateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsCreateWithoutPermissionsInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  roles: z.lazy(() => rolesCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateWithoutPermissionsInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const roles_permissionsCreateManyPermissionsInputEnvelopeSchema: z.ZodType<Prisma.roles_permissionsCreateManyPermissionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => roles_permissionsCreateManyPermissionsInputSchema),z.lazy(() => roles_permissionsCreateManyPermissionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_permissionsCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsCreateWithoutPermissionsInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const users_permissionsUncheckedCreateWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateWithoutPermissionsInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateOrConnectWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsCreateOrConnectWithoutPermissionsInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const users_permissionsCreateManyPermissionsInputEnvelopeSchema: z.ZodType<Prisma.users_permissionsCreateManyPermissionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_permissionsCreateManyPermissionsInputSchema),z.lazy(() => users_permissionsCreateManyPermissionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const usersUpsertWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutPermissions_permissions_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutPermissions_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutPermissions_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutPermissions_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutPermissions_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUpsertWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const roles_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema) ]),
}).strict();

export const roles_permissionsScalarWhereInputSchema: z.ZodType<Prisma.roles_permissionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => roles_permissionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => roles_permissionsScalarWhereInputSchema),z.lazy(() => roles_permissionsScalarWhereInputSchema).array() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const users_permissionsUpsertWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUpsertWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutPermissionsInputSchema) ]),
}).strict();

export const users_permissionsUpdateWithWhereUniqueWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithWhereUniqueWithoutPermissionsInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateWithoutPermissionsInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutPermissionsInputSchema) ]),
}).strict();

export const users_permissionsUpdateManyWithWhereWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithWhereWithoutPermissionsInput> = z.object({
  where: z.lazy(() => users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateManyMutationInputSchema),z.lazy(() => users_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema) ]),
}).strict();

export const users_permissionsScalarWhereInputSchema: z.ZodType<Prisma.users_permissionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_permissionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_permissionsScalarWhereInputSchema),z.lazy(() => users_permissionsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  permission_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const usersCreateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutRoles_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]),
}).strict();

export const usersCreateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutRoles_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsCreateWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsCreateWithoutRolesInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateWithoutRolesInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const roles_permissionsCreateManyRolesInputEnvelopeSchema: z.ZodType<Prisma.roles_permissionsCreateManyRolesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => roles_permissionsCreateManyRolesInputSchema),z.lazy(() => roles_permissionsCreateManyRolesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_rolesCreateWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesCreateWithoutRolesInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const users_rolesUncheckedCreateWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateWithoutRolesInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateOrConnectWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesCreateOrConnectWithoutRolesInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const users_rolesCreateManyRolesInputEnvelopeSchema: z.ZodType<Prisma.users_rolesCreateManyRolesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_rolesCreateManyRolesInputSchema),z.lazy(() => users_rolesCreateManyRolesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const usersUpsertWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutRoles_roles_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_created_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutRoles_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutRoles_roles_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutRoles_roles_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutRoles_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutRoles_roles_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_roles_updated_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutRoles_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutRoles_roles_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutRoles_roles_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutRoles_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const roles_permissionsUpsertWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUpsertWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const roles_permissionsUpdateWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateWithoutRolesInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const roles_permissionsUpdateManyWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutRolesInputSchema) ]),
}).strict();

export const users_rolesUpsertWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUpsertWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_rolesUpdateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutRolesInputSchema) ]),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutRolesInputSchema) ]),
}).strict();

export const users_rolesUpdateWithWhereUniqueWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUpdateWithWhereUniqueWithoutRolesInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateWithoutRolesInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutRolesInputSchema) ]),
}).strict();

export const users_rolesUpdateManyWithWhereWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithWhereWithoutRolesInput> = z.object({
  where: z.lazy(() => users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateManyMutationInputSchema),z.lazy(() => users_rolesUncheckedUpdateManyWithoutRolesInputSchema) ]),
}).strict();

export const users_rolesScalarWhereInputSchema: z.ZodType<Prisma.users_rolesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_rolesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_rolesScalarWhereInputSchema),z.lazy(() => users_rolesScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  role_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const usersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const permissionsCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsUncheckedCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsUncheckedCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_permissions: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsCreateOrConnectWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsCreateOrConnectWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => permissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const rolesCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesUncheckedCreateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesUncheckedCreateWithoutRoles_permissionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_roles: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesCreateOrConnectWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesCreateOrConnectWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => rolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const usersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpsertWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const permissionsUpsertWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsUpsertWithoutRoles_permissionsInput> = z.object({
  update: z.union([ z.lazy(() => permissionsUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
  create: z.union([ z.lazy(() => permissionsCreateWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
  where: z.lazy(() => permissionsWhereInputSchema).optional()
}).strict();

export const permissionsUpdateToOneWithWhereWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsUpdateToOneWithWhereWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => permissionsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => permissionsUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const permissionsUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsUncheckedUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_permissions: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const rolesUpsertWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesUpsertWithoutRoles_permissionsInput> = z.object({
  update: z.union([ z.lazy(() => rolesUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
  create: z.union([ z.lazy(() => rolesCreateWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUncheckedCreateWithoutRoles_permissionsInputSchema) ]),
  where: z.lazy(() => rolesWhereInputSchema).optional()
}).strict();

export const rolesUpdateToOneWithWhereWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesUpdateToOneWithWhereWithoutRoles_permissionsInput> = z.object({
  where: z.lazy(() => rolesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => rolesUpdateWithoutRoles_permissionsInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutRoles_permissionsInputSchema) ]),
}).strict();

export const rolesUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesUncheckedUpdateWithoutRoles_permissionsInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateWithoutRoles_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_roles: z.lazy(() => users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutRoles_permissions_roles_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateOrConnectWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const permissionsCreateManyUsers_permissions_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.permissionsCreateManyUsers_permissions_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => permissionsCreateManyUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsCreateManyUsers_permissions_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateOrConnectWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const permissionsCreateManyUsers_permissions_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.permissionsCreateManyUsers_permissions_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => permissionsCreateManyUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsCreateManyUsers_permissions_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const rolesCreateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesCreateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedCreateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesCreateOrConnectWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesCreateOrConnectWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const rolesCreateManyUsers_roles_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.rolesCreateManyUsers_roles_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => rolesCreateManyUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesCreateManyUsers_roles_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const rolesCreateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesCreateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesCreateOrConnectWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const rolesCreateManyUsers_roles_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.rolesCreateManyUsers_roles_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => rolesCreateManyUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesCreateManyUsers_roles_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  roles: z.lazy(() => rolesCreateNestedOneWithoutRoles_permissionsInputSchema),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_updated_byTousersInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_permissions_roles_permissions_created_byTousersInputSchema).optional(),
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutRoles_permissionsInputSchema),
  roles: z.lazy(() => rolesCreateNestedOneWithoutRoles_permissionsInputSchema)
}).strict();

export const roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateOrConnectWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelopeSchema: z.ZodType<Prisma.users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema)
}).strict();

export const users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelopeSchema: z.ZodType<Prisma.users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema).optional(),
  permissions: z.lazy(() => permissionsCreateNestedOneWithoutUsers_permissionsInputSchema),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema).optional()
}).strict();

export const users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsCreateOrConnectWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelopeSchema: z.ZodType<Prisma.users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesCreateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  roles: z.lazy(() => rolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelopeSchema: z.ZodType<Prisma.users_rolesCreateManyUsers_usersTousers_roles_created_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_created_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  roles: z.lazy(() => rolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_user_id: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_user_idInputSchema)
}).strict();

export const users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelopeSchema: z.ZodType<Prisma.users_rolesCreateManyUsers_usersTousers_roles_updated_byInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_updated_byInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesCreateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_created_byInputSchema).optional(),
  roles: z.lazy(() => rolesCreateNestedOneWithoutUsers_rolesInputSchema),
  users_usersTousers_roles_updated_by: z.lazy(() => usersCreateNestedOneWithoutUsers_roles_usersTousers_roles_updated_byInputSchema).optional()
}).strict();

export const users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesCreateOrConnectWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelopeSchema: z.ZodType<Prisma.users_rolesCreateManyUsers_usersTousers_roles_user_idInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesCreateManyUsers_usersTousers_roles_user_idInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const organizationCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationCreateOrConnectWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationCreateOrConnectWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const organizationCreateManyOrganization_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.organizationCreateManyOrganization_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => organizationCreateManyOrganization_created_byTousersInputSchema),z.lazy(() => organizationCreateManyOrganization_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const organizationCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationCreateOrConnectWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationCreateOrConnectWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const organizationCreateManyOrganization_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.organizationCreateManyOrganization_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => organizationCreateManyOrganization_updated_byTousersInputSchema),z.lazy(() => organizationCreateManyOrganization_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => organizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateOrConnectWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.work_schedulesCreateManyWork_schedules_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => work_schedulesCreateManyWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesCreateManyWork_schedules_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => organizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateOrConnectWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.work_schedulesCreateManyWork_schedules_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => work_schedulesCreateManyWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesCreateManyWork_schedules_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_terminalsCreateWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsCreateWithoutUsersInput> = z.object({
  terminals: z.lazy(() => terminalsCreateNestedOneWithoutUsers_terminalsInputSchema)
}).strict();

export const users_terminalsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUncheckedCreateWithoutUsersInput> = z.object({
  terminal_id: z.string()
}).strict();

export const users_terminalsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => users_terminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const users_terminalsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.users_terminalsCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_terminalsCreateManyUsersInputSchema),z.lazy(() => users_terminalsCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const users_work_schedulesCreateWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesCreateWithoutUsersInput> = z.object({
  work_schedules: z.lazy(() => work_schedulesCreateNestedOneWithoutUsers_work_schedulesInputSchema)
}).strict();

export const users_work_schedulesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedCreateWithoutUsersInput> = z.object({
  work_schedule_id: z.string()
}).strict();

export const users_work_schedulesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => users_work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const users_work_schedulesCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.users_work_schedulesCreateManyUsersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_work_schedulesCreateManyUsersInputSchema),z.lazy(() => users_work_schedulesCreateManyUsersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesCreateNestedOneWithoutWork_schedule_entries_work_schedulesInputSchema)
}).strict();

export const work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelopeSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_usersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_usersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => organizationCreateNestedOneWithoutApi_tokens_organizationInputSchema)
}).strict();

export const api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateOrConnectWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const api_tokensCreateManyApi_tokens_created_byTousersInputEnvelopeSchema: z.ZodType<Prisma.api_tokensCreateManyApi_tokens_created_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => api_tokensCreateManyApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensCreateManyApi_tokens_created_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => organizationCreateNestedOneWithoutApi_tokens_organizationInputSchema)
}).strict();

export const api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateOrConnectWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelopeSchema: z.ZodType<Prisma.api_tokensCreateManyApi_tokens_updated_byTousersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => api_tokensCreateManyApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensCreateManyApi_tokens_updated_byTousersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const timesheetCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const timesheetUncheckedCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUncheckedCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const timesheetCreateOrConnectWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetCreateOrConnectWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => timesheetWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const timesheetCreateManyTimesheet_usersInputEnvelopeSchema: z.ZodType<Prisma.timesheetCreateManyTimesheet_usersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => timesheetCreateManyTimesheet_usersInputSchema),z.lazy(() => timesheetCreateManyTimesheet_usersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_subscription_reports: z.lazy(() => scheduled_reportsCreateNestedOneWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema)
}).strict();

export const scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelopeSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const permissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUpsertWithWhereUniqueWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => permissionsUpdateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const permissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUpdateWithWhereUniqueWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => permissionsUpdateWithoutUsers_permissions_created_byTousersInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const permissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUpdateManyWithWhereWithoutUsers_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => permissionsUpdateManyMutationInputSchema),z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersInputSchema) ]),
}).strict();

export const permissionsScalarWhereInputSchema: z.ZodType<Prisma.permissionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => permissionsScalarWhereInputSchema),z.lazy(() => permissionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => permissionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => permissionsScalarWhereInputSchema),z.lazy(() => permissionsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  slug: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const permissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUpsertWithWhereUniqueWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => permissionsUpdateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const permissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUpdateWithWhereUniqueWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => permissionsUpdateWithoutUsers_permissions_updated_byTousersInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const permissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUpdateManyWithWhereWithoutUsers_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => permissionsUpdateManyMutationInputSchema),z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const rolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUpsertWithWhereUniqueWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => rolesUpdateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutUsers_roles_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const rolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUpdateWithWhereUniqueWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => rolesUpdateWithoutUsers_roles_created_byTousersInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const rolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUpdateManyWithWhereWithoutUsers_roles_created_byTousersInput> = z.object({
  where: z.lazy(() => rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => rolesUpdateManyMutationInputSchema),z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersInputSchema) ]),
}).strict();

export const rolesScalarWhereInputSchema: z.ZodType<Prisma.rolesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => rolesScalarWhereInputSchema),z.lazy(() => rolesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => rolesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => rolesScalarWhereInputSchema),z.lazy(() => rolesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  code: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const rolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUpsertWithWhereUniqueWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => rolesUpdateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const rolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUpdateWithWhereUniqueWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => rolesUpdateWithoutUsers_roles_updated_byTousersInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const rolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUpdateManyWithWhereWithoutUsers_roles_updated_byTousersInput> = z.object({
  where: z.lazy(() => rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => rolesUpdateManyMutationInputSchema),z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpsertWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => roles_permissionsCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedCreateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithWhereUniqueWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpdateManyWithWhereWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  where: z.lazy(() => roles_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => roles_permissionsUpdateManyMutationInputSchema),z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersInputSchema) ]),
}).strict();

export const users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateManyMutationInputSchema),z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateManyMutationInputSchema),z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUpsertWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => users_permissionsCreateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedCreateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithWhereUniqueWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => users_permissionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema),z.lazy(() => users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUpdateManyWithWhereWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => users_permissionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_permissionsUpdateManyMutationInputSchema),z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateManyMutationInputSchema),z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateManyMutationInputSchema),z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUpsertWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => users_rolesCreateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedCreateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUpdateWithWhereUniqueWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => users_rolesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInputSchema),z.lazy(() => users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUpdateManyWithWhereWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => users_rolesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_rolesUpdateManyMutationInputSchema),z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const organizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUpsertWithWhereUniqueWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => organizationUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const organizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUpdateWithWhereUniqueWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => organizationUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const organizationUpdateManyWithWhereWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUpdateManyWithWhereWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => organizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => organizationUpdateManyMutationInputSchema),z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const organizationScalarWhereInputSchema: z.ZodType<Prisma.organizationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => organizationScalarWhereInputSchema),z.lazy(() => organizationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => organizationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => organizationScalarWhereInputSchema),z.lazy(() => organizationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  external_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  system_type: z.union([ z.lazy(() => Enumorganization_system_typeFilterSchema),z.lazy(() => organization_system_typeSchema) ]).optional(),
  phone: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  iiko_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  webhook: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  group_id: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_login: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  apelsin_password: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sender_number: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  max_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_active_order_count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  max_order_close_distance: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  payment_type: z.union([ z.lazy(() => Enumorganization_payment_typesFilterSchema),z.lazy(() => organization_payment_typesSchema) ]).optional(),
  support_chat_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  icon_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const organizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUpsertWithWhereUniqueWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => organizationUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => organizationCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const organizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUpdateWithWhereUniqueWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => organizationUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const organizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUpdateManyWithWhereWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => organizationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => organizationUpdateManyMutationInputSchema),z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => work_schedulesUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpdateManyWithWhereWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => work_schedulesUpdateManyMutationInputSchema),z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const work_schedulesScalarWhereInputSchema: z.ZodType<Prisma.work_schedulesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedulesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedulesScalarWhereInputSchema),z.lazy(() => work_schedulesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  days: z.lazy(() => StringNullableListFilterSchema).optional(),
  start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  end_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  max_start_time: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  bonus_price: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpsertWithWhereUniqueWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithWhereUniqueWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => work_schedulesUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpdateManyWithWhereWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => work_schedulesUpdateManyMutationInputSchema),z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const users_terminalsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => users_terminalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_terminalsUpdateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const users_terminalsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => users_terminalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_terminalsUpdateWithoutUsersInputSchema),z.lazy(() => users_terminalsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const users_terminalsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => users_terminalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_terminalsUpdateManyMutationInputSchema),z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const users_terminalsScalarWhereInputSchema: z.ZodType<Prisma.users_terminalsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_terminalsScalarWhereInputSchema),z.lazy(() => users_terminalsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_terminalsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_terminalsScalarWhereInputSchema),z.lazy(() => users_terminalsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  terminal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const users_work_schedulesUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => users_work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_work_schedulesUpdateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const users_work_schedulesUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => users_work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_work_schedulesUpdateWithoutUsersInputSchema),z.lazy(() => users_work_schedulesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const users_work_schedulesUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => users_work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_work_schedulesUpdateManyMutationInputSchema),z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersInputSchema) ]),
}).strict();

export const users_work_schedulesScalarWhereInputSchema: z.ZodType<Prisma.users_work_schedulesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => users_work_schedulesScalarWhereInputSchema),z.lazy(() => users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => users_work_schedulesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => users_work_schedulesScalarWhereInputSchema),z.lazy(() => users_work_schedulesScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
}).strict();

export const work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesScalarWhereInputSchema: z.ZodType<Prisma.work_schedule_entriesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => work_schedule_entriesScalarWhereInputSchema),z.lazy(() => work_schedule_entriesScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  work_schedule_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  date_start: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  date_finish: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  duration: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  ip_open: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  ip_close: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  lat_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lat_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  lon_open: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lon_close: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => Enumwork_schedule_entry_statusFilterSchema),z.lazy(() => work_schedule_entry_statusSchema) ]).optional(),
  late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpsertWithWhereUniqueWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => api_tokensUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpdateWithWhereUniqueWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => api_tokensUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpdateManyWithWhereWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => api_tokensUpdateManyMutationInputSchema),z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const api_tokensScalarWhereInputSchema: z.ZodType<Prisma.api_tokensScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => api_tokensScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => api_tokensScalarWhereInputSchema),z.lazy(() => api_tokensScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  updated_by: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpsertWithWhereUniqueWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => api_tokensUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpdateWithWhereUniqueWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => api_tokensUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpdateManyWithWhereWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => api_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => api_tokensUpdateManyMutationInputSchema),z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const timesheetUpsertWithWhereUniqueWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUpsertWithWhereUniqueWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => timesheetWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => timesheetUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
  create: z.union([ z.lazy(() => timesheetCreateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const timesheetUpdateWithWhereUniqueWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUpdateWithWhereUniqueWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => timesheetWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => timesheetUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => timesheetUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const timesheetUpdateManyWithWhereWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUpdateManyWithWhereWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => timesheetScalarWhereInputSchema),
  data: z.union([ z.lazy(() => timesheetUpdateManyMutationInputSchema),z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const timesheetScalarWhereInputSchema: z.ZodType<Prisma.timesheetScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => timesheetScalarWhereInputSchema),z.lazy(() => timesheetScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => timesheetScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => timesheetScalarWhereInputSchema),z.lazy(() => timesheetScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  is_late: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  date: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateManyMutationInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const scheduled_reports_subscriptionScalarWhereInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const usersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const permissionsCreateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsCreateWithoutUsers_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_permissions_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_created_byTousersInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutPermissions_permissions_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsUncheckedCreateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsUncheckedCreateWithoutUsers_permissionsInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutPermissionsInputSchema).optional()
}).strict();

export const permissionsCreateOrConnectWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsCreateOrConnectWithoutUsers_permissionsInput> = z.object({
  where: z.lazy(() => permissionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]),
}).strict();

export const usersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const usersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const usersUpsertWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const permissionsUpsertWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsUpsertWithoutUsers_permissionsInput> = z.object({
  update: z.union([ z.lazy(() => permissionsUpdateWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutUsers_permissionsInputSchema) ]),
  create: z.union([ z.lazy(() => permissionsCreateWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUncheckedCreateWithoutUsers_permissionsInputSchema) ]),
  where: z.lazy(() => permissionsWhereInputSchema).optional()
}).strict();

export const permissionsUpdateToOneWithWhereWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsUpdateToOneWithWhereWithoutUsers_permissionsInput> = z.object({
  where: z.lazy(() => permissionsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => permissionsUpdateWithoutUsers_permissionsInputSchema),z.lazy(() => permissionsUncheckedUpdateWithoutUsers_permissionsInputSchema) ]),
}).strict();

export const permissionsUpdateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsUpdateWithoutUsers_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsUncheckedUpdateWithoutUsers_permissionsInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateWithoutUsers_permissionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_permissions_usersTousers_permissions_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const rolesCreateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesCreateWithoutUsers_rolesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_roles_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_created_byTousersInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutRoles_roles_updated_byTousersInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesUncheckedCreateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesUncheckedCreateWithoutUsers_rolesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutRolesInputSchema).optional()
}).strict();

export const rolesCreateOrConnectWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesCreateOrConnectWithoutUsers_rolesInput> = z.object({
  where: z.lazy(() => rolesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_rolesInputSchema) ]),
}).strict();

export const usersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const usersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const usersUpsertWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_created_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const rolesUpsertWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesUpsertWithoutUsers_rolesInput> = z.object({
  update: z.union([ z.lazy(() => rolesUpdateWithoutUsers_rolesInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutUsers_rolesInputSchema) ]),
  create: z.union([ z.lazy(() => rolesCreateWithoutUsers_rolesInputSchema),z.lazy(() => rolesUncheckedCreateWithoutUsers_rolesInputSchema) ]),
  where: z.lazy(() => rolesWhereInputSchema).optional()
}).strict();

export const rolesUpdateToOneWithWhereWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesUpdateToOneWithWhereWithoutUsers_rolesInput> = z.object({
  where: z.lazy(() => rolesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => rolesUpdateWithoutUsers_rolesInputSchema),z.lazy(() => rolesUncheckedUpdateWithoutUsers_rolesInputSchema) ]),
}).strict();

export const rolesUpdateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesUpdateWithoutUsers_rolesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesUncheckedUpdateWithoutUsers_rolesInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateWithoutUsers_rolesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_updated_byInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_roles_usersTousers_roles_user_idInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const organizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationCreateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationCreateOrConnectWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => organizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
}).strict();

export const usersCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const usersCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const users_work_schedulesCreateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesCreateWithoutWork_schedulesInput> = z.object({
  users: z.lazy(() => usersCreateNestedOneWithoutUsers_work_schedulesInputSchema)
}).strict();

export const users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedCreateWithoutWork_schedulesInput> = z.object({
  user_id: z.string()
}).strict();

export const users_work_schedulesCreateOrConnectWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesCreateOrConnectWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => users_work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema) ]),
}).strict();

export const users_work_schedulesCreateManyWork_schedulesInputEnvelopeSchema: z.ZodType<Prisma.users_work_schedulesCreateManyWork_schedulesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_work_schedulesCreateManyWork_schedulesInputSchema),z.lazy(() => users_work_schedulesCreateManyWork_schedulesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersCreateNestedOneWithoutWork_schedule_entries_usersInputSchema)
}).strict();

export const work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelopeSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const organizationUpsertWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUpsertWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  update: z.union([ z.lazy(() => organizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
  create: z.union([ z.lazy(() => organizationCreateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
  where: z.lazy(() => organizationWhereInputSchema).optional()
}).strict();

export const organizationUpdateToOneWithWhereWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUpdateToOneWithWhereWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => organizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => organizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema) ]),
}).strict();

export const organizationUpdateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUpdateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization_created_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateWithoutWork_schedules_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutWork_schedules_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_created_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutWork_schedules_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutWork_schedules_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutWork_schedules_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedules_updated_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutWork_schedules_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutWork_schedules_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUpsertWithWhereUniqueWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => users_work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_work_schedulesUpdateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedUpdateWithoutWork_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => users_work_schedulesCreateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedCreateWithoutWork_schedulesInputSchema) ]),
}).strict();

export const users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateWithWhereUniqueWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => users_work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_work_schedulesUpdateWithoutWork_schedulesInputSchema),z.lazy(() => users_work_schedulesUncheckedUpdateWithoutWork_schedulesInputSchema) ]),
}).strict();

export const users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateManyWithWhereWithoutWork_schedulesInput> = z.object({
  where: z.lazy(() => users_work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_work_schedulesUpdateManyMutationInputSchema),z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesInputSchema) ]),
}).strict();

export const work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUpsertWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedule_entriesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithWhereUniqueWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedule_entriesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyWithWhereWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedule_entriesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => work_schedule_entriesUpdateManyMutationInputSchema),z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const organizationCreateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationCreateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUncheckedCreateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_organizationInputSchema).optional()
}).strict();

export const organizationCreateOrConnectWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationCreateOrConnectWithoutTerminals_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => organizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]),
}).strict();

export const users_terminalsCreateWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsCreateWithoutTerminalsInput> = z.object({
  users: z.lazy(() => usersCreateNestedOneWithoutUsers_terminalsInputSchema)
}).strict();

export const users_terminalsUncheckedCreateWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUncheckedCreateWithoutTerminalsInput> = z.object({
  user_id: z.string()
}).strict();

export const users_terminalsCreateOrConnectWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsCreateOrConnectWithoutTerminalsInput> = z.object({
  where: z.lazy(() => users_terminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema) ]),
}).strict();

export const users_terminalsCreateManyTerminalsInputEnvelopeSchema: z.ZodType<Prisma.users_terminalsCreateManyTerminalsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => users_terminalsCreateManyTerminalsInputSchema),z.lazy(() => users_terminalsCreateManyTerminalsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const organizationUpsertWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUpsertWithoutTerminals_organization_idTorganizationInput> = z.object({
  update: z.union([ z.lazy(() => organizationUpdateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema) ]),
  create: z.union([ z.lazy(() => organizationCreateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutTerminals_organization_idTorganizationInputSchema) ]),
  where: z.lazy(() => organizationWhereInputSchema).optional()
}).strict();

export const organizationUpdateToOneWithWhereWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUpdateToOneWithWhereWithoutTerminals_organization_idTorganizationInput> = z.object({
  where: z.lazy(() => organizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => organizationUpdateWithoutTerminals_organization_idTorganizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema) ]),
}).strict();

export const organizationUpdateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUpdateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateWithoutTerminals_organization_idTorganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const users_terminalsUpsertWithWhereUniqueWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUpsertWithWhereUniqueWithoutTerminalsInput> = z.object({
  where: z.lazy(() => users_terminalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => users_terminalsUpdateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedUpdateWithoutTerminalsInputSchema) ]),
  create: z.union([ z.lazy(() => users_terminalsCreateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedCreateWithoutTerminalsInputSchema) ]),
}).strict();

export const users_terminalsUpdateWithWhereUniqueWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUpdateWithWhereUniqueWithoutTerminalsInput> = z.object({
  where: z.lazy(() => users_terminalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => users_terminalsUpdateWithoutTerminalsInputSchema),z.lazy(() => users_terminalsUncheckedUpdateWithoutTerminalsInputSchema) ]),
}).strict();

export const users_terminalsUpdateManyWithWhereWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUpdateManyWithWhereWithoutTerminalsInput> = z.object({
  where: z.lazy(() => users_terminalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => users_terminalsUpdateManyMutationInputSchema),z.lazy(() => users_terminalsUncheckedUpdateManyWithoutTerminalsInputSchema) ]),
}).strict();

export const work_schedulesCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const work_schedulesCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.work_schedulesCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => work_schedulesCreateManyOrganizationInputSchema),z.lazy(() => work_schedulesCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const usersCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const usersCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const terminalsCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const terminalsUncheckedCreateWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUncheckedCreateWithoutOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutTerminalsInputSchema).optional()
}).strict();

export const terminalsCreateOrConnectWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsCreateOrConnectWithoutOrganizationInput> = z.object({
  where: z.lazy(() => terminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => terminalsCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const terminalsCreateManyOrganizationInputEnvelopeSchema: z.ZodType<Prisma.terminalsCreateManyOrganizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => terminalsCreateManyOrganizationInputSchema),z.lazy(() => terminalsCreateManyOrganizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const api_tokensCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_tokens_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutApi_tokens_updated_byTousersInputSchema).optional()
}).strict();

export const api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUncheckedCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const api_tokensCreateOrConnectWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensCreateOrConnectWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const api_tokensCreateManyApi_tokens_organizationInputEnvelopeSchema: z.ZodType<Prisma.api_tokensCreateManyApi_tokens_organizationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => api_tokensCreateManyApi_tokens_organizationInputSchema),z.lazy(() => api_tokensCreateManyApi_tokens_organizationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const work_schedulesUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => work_schedulesUpdateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const work_schedulesUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => work_schedulesUpdateWithoutOrganizationInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const work_schedulesUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => work_schedulesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => work_schedulesUpdateManyMutationInputSchema),z.lazy(() => work_schedulesUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const usersUpsertWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutOrganization_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_created_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutOrganization_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutOrganization_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutOrganization_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutOrganization_updated_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutOrganization_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutOrganization_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const terminalsUpsertWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUpsertWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => terminalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => terminalsUpdateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedUpdateWithoutOrganizationInputSchema) ]),
  create: z.union([ z.lazy(() => terminalsCreateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutOrganizationInputSchema) ]),
}).strict();

export const terminalsUpdateWithWhereUniqueWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUpdateWithWhereUniqueWithoutOrganizationInput> = z.object({
  where: z.lazy(() => terminalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => terminalsUpdateWithoutOrganizationInputSchema),z.lazy(() => terminalsUncheckedUpdateWithoutOrganizationInputSchema) ]),
}).strict();

export const terminalsUpdateManyWithWhereWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUpdateManyWithWhereWithoutOrganizationInput> = z.object({
  where: z.lazy(() => terminalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => terminalsUpdateManyMutationInputSchema),z.lazy(() => terminalsUncheckedUpdateManyWithoutOrganizationInputSchema) ]),
}).strict();

export const terminalsScalarWhereInputSchema: z.ZodType<Prisma.terminalsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => terminalsScalarWhereInputSchema),z.lazy(() => terminalsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => terminalsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => terminalsScalarWhereInputSchema),z.lazy(() => terminalsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  phone: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  address: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  latitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  longitude: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  external_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  organization_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  manager_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUpsertWithWhereUniqueWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => api_tokensUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
  create: z.union([ z.lazy(() => api_tokensCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUpdateWithWhereUniqueWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => api_tokensWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => api_tokensUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => api_tokensUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUpdateManyWithWhereWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => api_tokensScalarWhereInputSchema),
  data: z.union([ z.lazy(() => api_tokensUpdateManyMutationInputSchema),z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const usersCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const terminalsCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => organizationCreateNestedOneWithoutTerminals_organization_idTorganizationInputSchema)
}).strict();

export const terminalsUncheckedCreateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsUncheckedCreateWithoutUsers_terminalsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  organization_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const terminalsCreateOrConnectWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsCreateOrConnectWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => terminalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => terminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const usersUpsertWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_terminalsInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_terminalsInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const terminalsUpsertWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsUpsertWithoutUsers_terminalsInput> = z.object({
  update: z.union([ z.lazy(() => terminalsUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
  create: z.union([ z.lazy(() => terminalsCreateWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUncheckedCreateWithoutUsers_terminalsInputSchema) ]),
  where: z.lazy(() => terminalsWhereInputSchema).optional()
}).strict();

export const terminalsUpdateToOneWithWhereWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsUpdateToOneWithWhereWithoutUsers_terminalsInput> = z.object({
  where: z.lazy(() => terminalsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => terminalsUpdateWithoutUsers_terminalsInputSchema),z.lazy(() => terminalsUncheckedUpdateWithoutUsers_terminalsInputSchema) ]),
}).strict();

export const terminalsUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => organizationUpdateOneRequiredWithoutTerminals_organization_idTorganizationNestedInputSchema).optional()
}).strict();

export const terminalsUncheckedUpdateWithoutUsers_terminalsInputSchema: z.ZodType<Prisma.terminalsUncheckedUpdateWithoutUsers_terminalsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const usersCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const work_schedulesCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => organizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateWithoutUsers_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_work_schedulesInputSchema).optional()
}).strict();

export const work_schedulesCreateOrConnectWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesCreateOrConnectWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const usersUpsertWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersUpsertWithoutUsers_work_schedulesInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => usersUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const usersUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const work_schedulesUpsertWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUpsertWithoutUsers_work_schedulesInput> = z.object({
  update: z.union([ z.lazy(() => work_schedulesUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutUsers_work_schedulesInputSchema) ]),
  where: z.lazy(() => work_schedulesWhereInputSchema).optional()
}).strict();

export const work_schedulesUpdateToOneWithWhereWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUpdateToOneWithWhereWithoutUsers_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedulesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => work_schedulesUpdateWithoutUsers_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema) ]),
}).strict();

export const work_schedulesUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => organizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateWithoutUsers_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const usersCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const usersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const usersCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  organization: z.lazy(() => organizationCreateNestedOneWithoutWork_schedules_organization_idTorganizationInputSchema),
  work_schedules_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutWork_schedulesInputSchema).optional()
}).strict();

export const work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutWork_schedulesInputSchema).optional()
}).strict();

export const work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesCreateOrConnectWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedulesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const usersUpsertWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersUpsertWithoutWork_schedule_entries_usersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutWork_schedule_entries_usersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutWork_schedule_entries_usersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutWork_schedule_entries_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema) ]),
}).strict();

export const usersUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const work_schedulesUpsertWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUpsertWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  update: z.union([ z.lazy(() => work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
  create: z.union([ z.lazy(() => work_schedulesCreateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedCreateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
  where: z.lazy(() => work_schedulesWhereInputSchema).optional()
}).strict();

export const work_schedulesUpdateToOneWithWhereWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUpdateToOneWithWhereWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  where: z.lazy(() => work_schedulesWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema),z.lazy(() => work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema) ]),
}).strict();

export const work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => organizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional()
}).strict();

export const usersCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const usersCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const organizationCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesCreateNestedManyWithoutOrganizationInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersCreateNestedOneWithoutOrganization_updated_byTousersInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const organizationUncheckedCreateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationUncheckedCreateWithoutApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedCreateNestedManyWithoutOrganizationInputSchema).optional()
}).strict();

export const organizationCreateOrConnectWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationCreateOrConnectWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => organizationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => organizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const usersUpsertWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutApi_tokens_created_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_created_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutApi_tokens_created_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutApi_tokens_created_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUpsertWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpsertWithoutApi_tokens_updated_byTousersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUncheckedCreateWithoutApi_tokens_updated_byTousersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutApi_tokens_updated_byTousersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutApi_tokens_updated_byTousersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema) ]),
}).strict();

export const usersUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const organizationUpsertWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationUpsertWithoutApi_tokens_organizationInput> = z.object({
  update: z.union([ z.lazy(() => organizationUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
  create: z.union([ z.lazy(() => organizationCreateWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUncheckedCreateWithoutApi_tokens_organizationInputSchema) ]),
  where: z.lazy(() => organizationWhereInputSchema).optional()
}).strict();

export const organizationUpdateToOneWithWhereWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationUpdateToOneWithWhereWithoutApi_tokens_organizationInput> = z.object({
  where: z.lazy(() => organizationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => organizationUpdateWithoutApi_tokens_organizationInputSchema),z.lazy(() => organizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema) ]),
}).strict();

export const organizationUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional()
}).strict();

export const usersCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedCreateNestedManyWithoutScheduled_reports_subscription_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const usersUpsertWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersUpsertWithoutTimesheet_usersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutTimesheet_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutTimesheet_usersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutTimesheet_usersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutTimesheet_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutTimesheet_usersInputSchema) ]),
}).strict();

export const usersUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  scheduled_reports_subscription_users: z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.string().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  scheduled_reports_subscription_users: z.lazy(() => usersCreateNestedOneWithoutScheduled_reports_subscription_usersInputSchema)
}).strict();

export const scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateOrConnectWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelopeSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpsertWithWhereUniqueWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => scheduled_reports_subscriptionCreateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedCreateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateWithWhereUniqueWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateManyWithWhereWithoutScheduled_reports_subscription_reportsInput> = z.object({
  where: z.lazy(() => scheduled_reports_subscriptionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => scheduled_reports_subscriptionUpdateManyMutationInputSchema),z.lazy(() => scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsInputSchema) ]),
}).strict();

export const scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string(),
  cron: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsCreateOrConnectWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  where: z.lazy(() => scheduled_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
}).strict();

export const usersCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetCreateNestedManyWithoutTimesheet_usersInputSchema).optional()
}).strict();

export const usersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersUncheckedCreateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  phone: z.string(),
  first_name: z.string().optional().nullable(),
  last_name: z.string().optional().nullable(),
  password: z.string().optional().nullable(),
  is_super_user: z.boolean().optional(),
  status: z.lazy(() => user_statusSchema),
  card_name: z.string().optional().nullable(),
  card_number: z.string().optional().nullable(),
  birth_date: z.coerce.date().optional().nullable(),
  car_model: z.string().optional().nullable(),
  car_number: z.string().optional().nullable(),
  is_online: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  fcm_token: z.string().optional().nullable(),
  wallet_balance: z.number().optional(),
  max_active_order_count: z.number().int().optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersCreatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.coerce.date().optional().nullable(),
  app_version: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  api_token: z.string().optional().nullable(),
  tg_id: z.string().optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_created_byTousersInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedCreateNestedManyWithoutUsers_permissions_updated_byTousersInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_created_byTousersInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedCreateNestedManyWithoutUsers_roles_updated_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_created_byTousersInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedCreateNestedManyWithoutUsers_roles_permissions_updated_byTousersInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_created_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_updated_byInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedCreateNestedManyWithoutUsers_usersTousers_permissions_user_idInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_created_byInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_updated_byInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedCreateNestedManyWithoutUsers_usersTousers_roles_user_idInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_created_byTousersInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedCreateNestedManyWithoutOrganization_updated_byTousersInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_created_byTousersInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedCreateNestedManyWithoutWork_schedules_updated_byTousersInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_created_byTousersInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_updated_byTousersInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedCreateNestedManyWithoutWork_schedule_entries_usersInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_created_byTousersInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedCreateNestedManyWithoutApi_tokens_updated_byTousersInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedCreateNestedManyWithoutTimesheet_usersInputSchema).optional()
}).strict();

export const usersCreateOrConnectWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersCreateOrConnectWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => usersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const scheduled_reportsUpsertWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsUpsertWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  update: z.union([ z.lazy(() => scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
  create: z.union([ z.lazy(() => scheduled_reportsCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUncheckedCreateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
  where: z.lazy(() => scheduled_reportsWhereInputSchema).optional()
}).strict();

export const scheduled_reportsUpdateToOneWithWhereWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsUpdateToOneWithWhereWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  where: z.lazy(() => scheduled_reportsWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema),z.lazy(() => scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema) ]),
}).strict();

export const scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInputSchema: z.ZodType<Prisma.scheduled_reportsUncheckedUpdateWithoutScheduled_reports_scheduled_reports_subscriptionsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  cron: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const usersUpsertWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersUpsertWithoutScheduled_reports_subscription_usersInput> = z.object({
  update: z.union([ z.lazy(() => usersUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
  create: z.union([ z.lazy(() => usersCreateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUncheckedCreateWithoutScheduled_reports_subscription_usersInputSchema) ]),
  where: z.lazy(() => usersWhereInputSchema).optional()
}).strict();

export const usersUpdateToOneWithWhereWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersUpdateToOneWithWhereWithoutScheduled_reports_subscription_usersInput> = z.object({
  where: z.lazy(() => usersWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => usersUpdateWithoutScheduled_reports_subscription_usersInputSchema),z.lazy(() => usersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema) ]),
}).strict();

export const usersUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUpdateManyWithoutTimesheet_usersNestedInputSchema).optional()
}).strict();

export const usersUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.usersUncheckedUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  first_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  last_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_super_user: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => user_statusSchema),z.lazy(() => Enumuser_statusFieldUpdateOperationsInputSchema) ]).optional(),
  card_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  card_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  birth_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_model: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  car_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  is_online: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  latitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  longitude: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fcm_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wallet_balance: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_files: z.union([ z.lazy(() => usersUpdatedoc_filesInputSchema),z.string().array() ]).optional(),
  order_start_date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  app_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tg_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  permissions_permissions_created_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersNestedInputSchema).optional(),
  permissions_permissions_updated_byTousers: z.lazy(() => permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_roles_created_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersNestedInputSchema).optional(),
  roles_roles_updated_byTousers: z.lazy(() => rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_created_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions_roles_permissions_updated_byTousers: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_created_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_updated_by: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_permissions_usersTousers_permissions_user_id: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idNestedInputSchema).optional(),
  users_roles_usersTousers_roles_created_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_updated_by: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_roles_usersTousers_roles_user_id: z.lazy(() => users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  api_tokens_created_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  timesheet_users: z.lazy(() => timesheetUncheckedUpdateManyWithoutTimesheet_usersNestedInputSchema).optional()
}).strict();

export const roles_permissionsCreateManyPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsCreateManyPermissionsInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateManyPermissionsInputSchema: z.ZodType<Prisma.users_permissionsCreateManyPermissionsInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithoutPermissionsInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateWithoutPermissionsInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutPermissionsInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithoutPermissionsInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const users_permissionsUncheckedUpdateWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateWithoutPermissionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutPermissionsInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutPermissionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsCreateManyRolesInputSchema: z.ZodType<Prisma.roles_permissionsCreateManyRolesInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateManyRolesInputSchema: z.ZodType<Prisma.users_rolesCreateManyRolesInput> = z.object({
  user_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsUpdateWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithoutRolesInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateWithoutRolesInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutRolesInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutRolesInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUpdateWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUpdateWithoutRolesInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const users_rolesUncheckedUpdateWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateWithoutRolesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutRolesInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutRolesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const permissionsCreateManyUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateManyUsers_permissions_created_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const permissionsCreateManyUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsCreateManyUsers_permissions_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  slug: z.string(),
  description: z.string(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const rolesCreateManyUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesCreateManyUsers_roles_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const rolesCreateManyUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesCreateManyUsers_roles_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  code: z.string().optional().nullable(),
  active: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateManyUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsCreateManyUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateManyUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsCreateManyUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsCreateManyUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.string(),
  permission_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const users_permissionsCreateManyUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsCreateManyUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateManyUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesCreateManyUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateManyUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesCreateManyUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.string(),
  role_id: z.string(),
  created_by: z.string().optional().nullable()
}).strict();

export const users_rolesCreateManyUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesCreateManyUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.string(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const organizationCreateManyOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationCreateManyOrganization_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const organizationCreateManyOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationCreateManyOrganization_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  external_id: z.string().optional().nullable(),
  active: z.boolean().optional(),
  system_type: z.lazy(() => organization_system_typeSchema).optional(),
  phone: z.string(),
  iiko_login: z.string().optional().nullable(),
  webhook: z.string().optional().nullable(),
  group_id: z.string().optional().nullable(),
  apelsin_login: z.string().optional().nullable(),
  apelsin_password: z.string().optional().nullable(),
  sender_name: z.string().optional().nullable(),
  sender_number: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  max_distance: z.number().int().optional(),
  max_active_order_count: z.number().int().optional(),
  max_order_close_distance: z.number().int().optional(),
  payment_type: z.lazy(() => organization_payment_typesSchema).optional(),
  support_chat_url: z.string().optional().nullable(),
  icon_url: z.string().optional().nullable(),
  allow_yandex_delivery: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const work_schedulesCreateManyWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateManyWork_schedules_created_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedulesCreateManyWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesCreateManyWork_schedules_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  organization_id: z.string(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const users_terminalsCreateManyUsersInputSchema: z.ZodType<Prisma.users_terminalsCreateManyUsersInput> = z.object({
  terminal_id: z.string()
}).strict();

export const users_work_schedulesCreateManyUsersInputSchema: z.ZodType<Prisma.users_work_schedulesCreateManyUsersInput> = z.object({
  work_schedule_id: z.string()
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_usersInput> = z.object({
  id: z.string().optional(),
  work_schedule_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const api_tokensCreateManyApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateManyApi_tokens_created_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  updated_by: z.string().optional().nullable()
}).strict();

export const api_tokensCreateManyApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensCreateManyApi_tokens_updated_byTousersInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  organization_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable()
}).strict();

export const timesheetCreateManyTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetCreateManyTimesheet_usersInput> = z.object({
  id: z.string().optional(),
  is_late: z.boolean().optional(),
  date: z.coerce.date(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_usersInput> = z.object({
  id: z.string().optional(),
  report_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const permissionsUpdateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUpdateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateManyWithoutUsers_permissions_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const permissionsUpdateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUpdateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutPermissions_permissions_created_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional(),
  users_permissions: z.lazy(() => users_permissionsUncheckedUpdateManyWithoutPermissionsNestedInputSchema).optional()
}).strict();

export const permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.permissionsUncheckedUpdateManyWithoutUsers_permissions_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  slug: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const rolesUpdateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUpdateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_updated_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesUncheckedUpdateWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateManyWithoutUsers_roles_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const rolesUpdateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUpdateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_roles_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_roles_created_byTousersNestedInputSchema).optional(),
  roles_permissions: z.lazy(() => roles_permissionsUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  roles_permissions: z.lazy(() => roles_permissionsUncheckedUpdateManyWithoutRolesNestedInputSchema).optional(),
  users_roles: z.lazy(() => users_rolesUncheckedUpdateManyWithoutRolesNestedInputSchema).optional()
}).strict();

export const rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersInputSchema: z.ZodType<Prisma.rolesUncheckedUpdateManyWithoutUsers_roles_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  code: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  users_roles_permissions_updated_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_updated_byTousersNestedInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_created_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUpdateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  users_roles_permissions_created_byTousers: z.lazy(() => usersUpdateOneWithoutRoles_permissions_roles_permissions_created_byTousersNestedInputSchema).optional(),
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional(),
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutRoles_permissionsNestedInputSchema).optional()
}).strict();

export const roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersInputSchema: z.ZodType<Prisma.roles_permissionsUncheckedUpdateManyWithoutUsers_roles_permissions_updated_byTousersInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_permissions_usersTousers_permissions_user_idNestedInputSchema).optional()
}).strict();

export const users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUpdateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  users_usersTousers_permissions_created_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_created_byNestedInputSchema).optional(),
  permissions: z.lazy(() => permissionsUpdateOneRequiredWithoutUsers_permissionsNestedInputSchema).optional(),
  users_usersTousers_permissions_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_permissions_usersTousers_permissions_updated_byNestedInputSchema).optional()
}).strict();

export const users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idInputSchema: z.ZodType<Prisma.users_permissionsUncheckedUpdateManyWithoutUsers_usersTousers_permissions_user_idInput> = z.object({
  permission_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUpdateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_created_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUpdateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_user_id: z.lazy(() => usersUpdateOneRequiredWithoutUsers_roles_usersTousers_roles_user_idNestedInputSchema).optional()
}).strict();

export const users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_updated_byInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUpdateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  users_usersTousers_roles_created_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_created_byNestedInputSchema).optional(),
  roles: z.lazy(() => rolesUpdateOneRequiredWithoutUsers_rolesNestedInputSchema).optional(),
  users_usersTousers_roles_updated_by: z.lazy(() => usersUpdateOneWithoutUsers_roles_usersTousers_roles_updated_byNestedInputSchema).optional()
}).strict();

export const users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idInputSchema: z.ZodType<Prisma.users_rolesUncheckedUpdateManyWithoutUsers_usersTousers_roles_user_idInput> = z.object({
  role_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const organizationUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_updated_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_updated_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateManyWithoutOrganization_created_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateManyWithoutOrganization_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const organizationUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  organization_created_byTousers: z.lazy(() => usersUpdateOneWithoutOrganization_created_byTousersNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  work_schedules_organization_idTorganization: z.lazy(() => work_schedulesUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  terminals_organization_idTorganization: z.lazy(() => terminalsUncheckedUpdateManyWithoutOrganizationNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersInputSchema: z.ZodType<Prisma.organizationUncheckedUpdateManyWithoutOrganization_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  system_type: z.union([ z.lazy(() => organization_system_typeSchema),z.lazy(() => Enumorganization_system_typeFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  iiko_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  webhook: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  group_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_login: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  apelsin_password: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sender_number: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_active_order_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  max_order_close_distance: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  payment_type: z.union([ z.lazy(() => organization_payment_typesSchema),z.lazy(() => Enumorganization_payment_typesFieldUpdateOperationsInputSchema) ]).optional(),
  support_chat_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  icon_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allow_yandex_delivery: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedulesUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => organizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateManyWithoutWork_schedules_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedulesUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  organization: z.lazy(() => organizationUpdateOneRequiredWithoutWork_schedules_organization_idTorganizationNestedInputSchema).optional(),
  work_schedules_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateManyWithoutWork_schedules_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_terminalsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUpdateWithoutUsersInput> = z.object({
  terminals: z.lazy(() => terminalsUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional()
}).strict();

export const users_terminalsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateWithoutUsersInput> = z.object({
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_terminalsUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateManyWithoutUsersInput> = z.object({
  terminal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateWithoutUsersInput> = z.object({
  work_schedules: z.lazy(() => work_schedulesUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional()
}).strict();

export const users_work_schedulesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateWithoutUsersInput> = z.object({
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesUncheckedUpdateManyWithoutUsersInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateManyWithoutUsersInput> = z.object({
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedulesUpdateOneRequiredWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const api_tokensUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_updated_byTousers: z.lazy(() => usersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => organizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateManyWithoutApi_tokens_created_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const api_tokensUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => usersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_organization: z.lazy(() => organizationUpdateOneRequiredWithoutApi_tokens_organizationNestedInputSchema).optional()
}).strict();

export const api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateManyWithoutApi_tokens_updated_byTousersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  organization_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const timesheetUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timesheetUncheckedUpdateWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUncheckedUpdateWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const timesheetUncheckedUpdateManyWithoutTimesheet_usersInputSchema: z.ZodType<Prisma.timesheetUncheckedUpdateManyWithoutTimesheet_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  is_late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_subscription_reports: z.lazy(() => scheduled_reportsUpdateOneRequiredWithoutScheduled_reports_scheduled_reports_subscriptionsNestedInputSchema).optional()
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_usersInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesCreateManyWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesCreateManyWork_schedulesInput> = z.object({
  user_id: z.string()
}).strict();

export const work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  date_start: z.coerce.date(),
  date_finish: z.coerce.date().optional().nullable(),
  duration: z.number().int().optional(),
  ip_open: z.string().optional().nullable(),
  ip_close: z.string().optional().nullable(),
  lat_open: z.number().optional(),
  lat_close: z.number().optional().nullable(),
  lon_open: z.number().optional(),
  lon_close: z.number().optional().nullable(),
  current_status: z.lazy(() => work_schedule_entry_statusSchema).optional(),
  late: z.boolean().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const users_work_schedulesUpdateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUpdateWithoutWork_schedulesInput> = z.object({
  users: z.lazy(() => usersUpdateOneRequiredWithoutUsers_work_schedulesNestedInputSchema).optional()
}).strict();

export const users_work_schedulesUncheckedUpdateWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateWithoutWork_schedulesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesInputSchema: z.ZodType<Prisma.users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedule_entries_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_created_byTousersNestedInputSchema).optional(),
  work_schedule_entries_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedule_entries_updated_byTousersNestedInputSchema).optional(),
  work_schedule_entries_users: z.lazy(() => usersUpdateOneRequiredWithoutWork_schedule_entries_usersNestedInputSchema).optional()
}).strict();

export const work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesInputSchema: z.ZodType<Prisma.work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  date_start: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  date_finish: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  duration: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  ip_open: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  ip_close: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lat_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lat_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lon_open: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lon_close: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  current_status: z.union([ z.lazy(() => work_schedule_entry_statusSchema),z.lazy(() => Enumwork_schedule_entry_statusFieldUpdateOperationsInputSchema) ]).optional(),
  late: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const users_terminalsCreateManyTerminalsInputSchema: z.ZodType<Prisma.users_terminalsCreateManyTerminalsInput> = z.object({
  user_id: z.string()
}).strict();

export const users_terminalsUpdateWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUpdateWithoutTerminalsInput> = z.object({
  users: z.lazy(() => usersUpdateOneRequiredWithoutUsers_terminalsNestedInputSchema).optional()
}).strict();

export const users_terminalsUncheckedUpdateWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateWithoutTerminalsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const users_terminalsUncheckedUpdateManyWithoutTerminalsInputSchema: z.ZodType<Prisma.users_terminalsUncheckedUpdateManyWithoutTerminalsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const work_schedulesCreateManyOrganizationInputSchema: z.ZodType<Prisma.work_schedulesCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  days: z.union([ z.lazy(() => work_schedulesCreatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.coerce.date(),
  end_time: z.coerce.date(),
  max_start_time: z.coerce.date(),
  bonus_price: z.number().int().optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const terminalsCreateManyOrganizationInputSchema: z.ZodType<Prisma.terminalsCreateManyOrganizationInput> = z.object({
  id: z.string().optional(),
  name: z.string(),
  active: z.boolean().optional(),
  phone: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  latitude: z.number().optional(),
  longitude: z.number().optional(),
  external_id: z.string(),
  manager_name: z.string().optional().nullable(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const api_tokensCreateManyApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensCreateManyApi_tokens_organizationInput> = z.object({
  id: z.string().optional(),
  active: z.boolean().optional(),
  token: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  created_by: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable()
}).strict();

export const work_schedulesUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  work_schedules_created_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_created_byTousersNestedInputSchema).optional(),
  work_schedules_updated_byTousers: z.lazy(() => usersUpdateOneWithoutWork_schedules_updated_byTousersNestedInputSchema).optional(),
  users_work_schedules: z.lazy(() => users_work_schedulesUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users_work_schedules: z.lazy(() => users_work_schedulesUncheckedUpdateManyWithoutWork_schedulesNestedInputSchema).optional(),
  work_schedule_entries_work_schedules: z.lazy(() => work_schedule_entriesUncheckedUpdateManyWithoutWork_schedule_entries_work_schedulesNestedInputSchema).optional()
}).strict();

export const work_schedulesUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.work_schedulesUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  days: z.union([ z.lazy(() => work_schedulesUpdatedaysInputSchema),z.string().array() ]).optional(),
  start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  end_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  max_start_time: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  bonus_price: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const terminalsUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_terminals: z.lazy(() => users_terminalsUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const terminalsUncheckedUpdateWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUncheckedUpdateWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  users_terminals: z.lazy(() => users_terminalsUncheckedUpdateManyWithoutTerminalsNestedInputSchema).optional()
}).strict();

export const terminalsUncheckedUpdateManyWithoutOrganizationInputSchema: z.ZodType<Prisma.terminalsUncheckedUpdateManyWithoutOrganizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  phone: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  address: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  latitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  longitude: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  external_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  manager_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const api_tokensUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  api_tokens_created_byTousers: z.lazy(() => usersUpdateOneWithoutApi_tokens_created_byTousersNestedInputSchema).optional(),
  api_tokens_updated_byTousers: z.lazy(() => usersUpdateOneWithoutApi_tokens_updated_byTousersNestedInputSchema).optional()
}).strict();

export const api_tokensUncheckedUpdateWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationInputSchema: z.ZodType<Prisma.api_tokensUncheckedUpdateManyWithoutApi_tokens_organizationInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  created_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  updated_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateManyScheduled_reports_subscription_reportsInput> = z.object({
  id: z.string().optional(),
  user_id: z.string(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  scheduled_reports_subscription_users: z.lazy(() => usersUpdateOneRequiredWithoutScheduled_reports_subscription_usersNestedInputSchema).optional()
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsInputSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUncheckedUpdateManyWithoutScheduled_reports_subscription_reportsInput> = z.object({
  id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const permissionsFindFirstArgsSchema: z.ZodType<Prisma.permissionsFindFirstArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  where: permissionsWhereInputSchema.optional(),
  orderBy: z.union([ permissionsOrderByWithRelationInputSchema.array(),permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionsScalarFieldEnumSchema,PermissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const permissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.permissionsFindFirstOrThrowArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  where: permissionsWhereInputSchema.optional(),
  orderBy: z.union([ permissionsOrderByWithRelationInputSchema.array(),permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionsScalarFieldEnumSchema,PermissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const permissionsFindManyArgsSchema: z.ZodType<Prisma.permissionsFindManyArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  where: permissionsWhereInputSchema.optional(),
  orderBy: z.union([ permissionsOrderByWithRelationInputSchema.array(),permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PermissionsScalarFieldEnumSchema,PermissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const permissionsAggregateArgsSchema: z.ZodType<Prisma.permissionsAggregateArgs> = z.object({
  where: permissionsWhereInputSchema.optional(),
  orderBy: z.union([ permissionsOrderByWithRelationInputSchema.array(),permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const permissionsGroupByArgsSchema: z.ZodType<Prisma.permissionsGroupByArgs> = z.object({
  where: permissionsWhereInputSchema.optional(),
  orderBy: z.union([ permissionsOrderByWithAggregationInputSchema.array(),permissionsOrderByWithAggregationInputSchema ]).optional(),
  by: PermissionsScalarFieldEnumSchema.array(),
  having: permissionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const permissionsFindUniqueArgsSchema: z.ZodType<Prisma.permissionsFindUniqueArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  where: permissionsWhereUniqueInputSchema,
}).strict()

export const permissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.permissionsFindUniqueOrThrowArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  where: permissionsWhereUniqueInputSchema,
}).strict()

export const rolesFindFirstArgsSchema: z.ZodType<Prisma.rolesFindFirstArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  where: rolesWhereInputSchema.optional(),
  orderBy: z.union([ rolesOrderByWithRelationInputSchema.array(),rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolesScalarFieldEnumSchema,RolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const rolesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.rolesFindFirstOrThrowArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  where: rolesWhereInputSchema.optional(),
  orderBy: z.union([ rolesOrderByWithRelationInputSchema.array(),rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolesScalarFieldEnumSchema,RolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const rolesFindManyArgsSchema: z.ZodType<Prisma.rolesFindManyArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  where: rolesWhereInputSchema.optional(),
  orderBy: z.union([ rolesOrderByWithRelationInputSchema.array(),rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ RolesScalarFieldEnumSchema,RolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const rolesAggregateArgsSchema: z.ZodType<Prisma.rolesAggregateArgs> = z.object({
  where: rolesWhereInputSchema.optional(),
  orderBy: z.union([ rolesOrderByWithRelationInputSchema.array(),rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const rolesGroupByArgsSchema: z.ZodType<Prisma.rolesGroupByArgs> = z.object({
  where: rolesWhereInputSchema.optional(),
  orderBy: z.union([ rolesOrderByWithAggregationInputSchema.array(),rolesOrderByWithAggregationInputSchema ]).optional(),
  by: RolesScalarFieldEnumSchema.array(),
  having: rolesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const rolesFindUniqueArgsSchema: z.ZodType<Prisma.rolesFindUniqueArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  where: rolesWhereUniqueInputSchema,
}).strict()

export const rolesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.rolesFindUniqueOrThrowArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  where: rolesWhereUniqueInputSchema,
}).strict()

export const roles_permissionsFindFirstArgsSchema: z.ZodType<Prisma.roles_permissionsFindFirstArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  where: roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ roles_permissionsOrderByWithRelationInputSchema.array(),roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Roles_permissionsScalarFieldEnumSchema,Roles_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const roles_permissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.roles_permissionsFindFirstOrThrowArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  where: roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ roles_permissionsOrderByWithRelationInputSchema.array(),roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Roles_permissionsScalarFieldEnumSchema,Roles_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const roles_permissionsFindManyArgsSchema: z.ZodType<Prisma.roles_permissionsFindManyArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  where: roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ roles_permissionsOrderByWithRelationInputSchema.array(),roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Roles_permissionsScalarFieldEnumSchema,Roles_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const roles_permissionsAggregateArgsSchema: z.ZodType<Prisma.roles_permissionsAggregateArgs> = z.object({
  where: roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ roles_permissionsOrderByWithRelationInputSchema.array(),roles_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: roles_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const roles_permissionsGroupByArgsSchema: z.ZodType<Prisma.roles_permissionsGroupByArgs> = z.object({
  where: roles_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ roles_permissionsOrderByWithAggregationInputSchema.array(),roles_permissionsOrderByWithAggregationInputSchema ]).optional(),
  by: Roles_permissionsScalarFieldEnumSchema.array(),
  having: roles_permissionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const roles_permissionsFindUniqueArgsSchema: z.ZodType<Prisma.roles_permissionsFindUniqueArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  where: roles_permissionsWhereUniqueInputSchema,
}).strict()

export const roles_permissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.roles_permissionsFindUniqueOrThrowArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  where: roles_permissionsWhereUniqueInputSchema,
}).strict()

export const usersFindFirstArgsSchema: z.ZodType<Prisma.usersFindFirstArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const usersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.usersFindFirstOrThrowArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const usersFindManyArgsSchema: z.ZodType<Prisma.usersFindManyArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UsersScalarFieldEnumSchema,UsersScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const usersAggregateArgsSchema: z.ZodType<Prisma.usersAggregateArgs> = z.object({
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithRelationInputSchema.array(),usersOrderByWithRelationInputSchema ]).optional(),
  cursor: usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const usersGroupByArgsSchema: z.ZodType<Prisma.usersGroupByArgs> = z.object({
  where: usersWhereInputSchema.optional(),
  orderBy: z.union([ usersOrderByWithAggregationInputSchema.array(),usersOrderByWithAggregationInputSchema ]).optional(),
  by: UsersScalarFieldEnumSchema.array(),
  having: usersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const usersFindUniqueArgsSchema: z.ZodType<Prisma.usersFindUniqueArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
}).strict()

export const usersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.usersFindUniqueOrThrowArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
}).strict()

export const users_permissionsFindFirstArgsSchema: z.ZodType<Prisma.users_permissionsFindFirstArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  where: users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ users_permissionsOrderByWithRelationInputSchema.array(),users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_permissionsScalarFieldEnumSchema,Users_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_permissionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.users_permissionsFindFirstOrThrowArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  where: users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ users_permissionsOrderByWithRelationInputSchema.array(),users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_permissionsScalarFieldEnumSchema,Users_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_permissionsFindManyArgsSchema: z.ZodType<Prisma.users_permissionsFindManyArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  where: users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ users_permissionsOrderByWithRelationInputSchema.array(),users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_permissionsScalarFieldEnumSchema,Users_permissionsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_permissionsAggregateArgsSchema: z.ZodType<Prisma.users_permissionsAggregateArgs> = z.object({
  where: users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ users_permissionsOrderByWithRelationInputSchema.array(),users_permissionsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_permissionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_permissionsGroupByArgsSchema: z.ZodType<Prisma.users_permissionsGroupByArgs> = z.object({
  where: users_permissionsWhereInputSchema.optional(),
  orderBy: z.union([ users_permissionsOrderByWithAggregationInputSchema.array(),users_permissionsOrderByWithAggregationInputSchema ]).optional(),
  by: Users_permissionsScalarFieldEnumSchema.array(),
  having: users_permissionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_permissionsFindUniqueArgsSchema: z.ZodType<Prisma.users_permissionsFindUniqueArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  where: users_permissionsWhereUniqueInputSchema,
}).strict()

export const users_permissionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.users_permissionsFindUniqueOrThrowArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  where: users_permissionsWhereUniqueInputSchema,
}).strict()

export const users_rolesFindFirstArgsSchema: z.ZodType<Prisma.users_rolesFindFirstArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  where: users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ users_rolesOrderByWithRelationInputSchema.array(),users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_rolesScalarFieldEnumSchema,Users_rolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_rolesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.users_rolesFindFirstOrThrowArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  where: users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ users_rolesOrderByWithRelationInputSchema.array(),users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_rolesScalarFieldEnumSchema,Users_rolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_rolesFindManyArgsSchema: z.ZodType<Prisma.users_rolesFindManyArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  where: users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ users_rolesOrderByWithRelationInputSchema.array(),users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_rolesScalarFieldEnumSchema,Users_rolesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_rolesAggregateArgsSchema: z.ZodType<Prisma.users_rolesAggregateArgs> = z.object({
  where: users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ users_rolesOrderByWithRelationInputSchema.array(),users_rolesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_rolesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_rolesGroupByArgsSchema: z.ZodType<Prisma.users_rolesGroupByArgs> = z.object({
  where: users_rolesWhereInputSchema.optional(),
  orderBy: z.union([ users_rolesOrderByWithAggregationInputSchema.array(),users_rolesOrderByWithAggregationInputSchema ]).optional(),
  by: Users_rolesScalarFieldEnumSchema.array(),
  having: users_rolesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_rolesFindUniqueArgsSchema: z.ZodType<Prisma.users_rolesFindUniqueArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  where: users_rolesWhereUniqueInputSchema,
}).strict()

export const users_rolesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.users_rolesFindUniqueOrThrowArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  where: users_rolesWhereUniqueInputSchema,
}).strict()

export const work_schedulesFindFirstArgsSchema: z.ZodType<Prisma.work_schedulesFindFirstArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  where: work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedulesOrderByWithRelationInputSchema.array(),work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedulesScalarFieldEnumSchema,Work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const work_schedulesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.work_schedulesFindFirstOrThrowArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  where: work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedulesOrderByWithRelationInputSchema.array(),work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedulesScalarFieldEnumSchema,Work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const work_schedulesFindManyArgsSchema: z.ZodType<Prisma.work_schedulesFindManyArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  where: work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedulesOrderByWithRelationInputSchema.array(),work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedulesScalarFieldEnumSchema,Work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const work_schedulesAggregateArgsSchema: z.ZodType<Prisma.work_schedulesAggregateArgs> = z.object({
  where: work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedulesOrderByWithRelationInputSchema.array(),work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const work_schedulesGroupByArgsSchema: z.ZodType<Prisma.work_schedulesGroupByArgs> = z.object({
  where: work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedulesOrderByWithAggregationInputSchema.array(),work_schedulesOrderByWithAggregationInputSchema ]).optional(),
  by: Work_schedulesScalarFieldEnumSchema.array(),
  having: work_schedulesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const work_schedulesFindUniqueArgsSchema: z.ZodType<Prisma.work_schedulesFindUniqueArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  where: work_schedulesWhereUniqueInputSchema,
}).strict()

export const work_schedulesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.work_schedulesFindUniqueOrThrowArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  where: work_schedulesWhereUniqueInputSchema,
}).strict()

export const terminalsFindFirstArgsSchema: z.ZodType<Prisma.terminalsFindFirstArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  where: terminalsWhereInputSchema.optional(),
  orderBy: z.union([ terminalsOrderByWithRelationInputSchema.array(),terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TerminalsScalarFieldEnumSchema,TerminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const terminalsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.terminalsFindFirstOrThrowArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  where: terminalsWhereInputSchema.optional(),
  orderBy: z.union([ terminalsOrderByWithRelationInputSchema.array(),terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TerminalsScalarFieldEnumSchema,TerminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const terminalsFindManyArgsSchema: z.ZodType<Prisma.terminalsFindManyArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  where: terminalsWhereInputSchema.optional(),
  orderBy: z.union([ terminalsOrderByWithRelationInputSchema.array(),terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TerminalsScalarFieldEnumSchema,TerminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const terminalsAggregateArgsSchema: z.ZodType<Prisma.terminalsAggregateArgs> = z.object({
  where: terminalsWhereInputSchema.optional(),
  orderBy: z.union([ terminalsOrderByWithRelationInputSchema.array(),terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const terminalsGroupByArgsSchema: z.ZodType<Prisma.terminalsGroupByArgs> = z.object({
  where: terminalsWhereInputSchema.optional(),
  orderBy: z.union([ terminalsOrderByWithAggregationInputSchema.array(),terminalsOrderByWithAggregationInputSchema ]).optional(),
  by: TerminalsScalarFieldEnumSchema.array(),
  having: terminalsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const terminalsFindUniqueArgsSchema: z.ZodType<Prisma.terminalsFindUniqueArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  where: terminalsWhereUniqueInputSchema,
}).strict()

export const terminalsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.terminalsFindUniqueOrThrowArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  where: terminalsWhereUniqueInputSchema,
}).strict()

export const organizationFindFirstArgsSchema: z.ZodType<Prisma.organizationFindFirstArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  where: organizationWhereInputSchema.optional(),
  orderBy: z.union([ organizationOrderByWithRelationInputSchema.array(),organizationOrderByWithRelationInputSchema ]).optional(),
  cursor: organizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const organizationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.organizationFindFirstOrThrowArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  where: organizationWhereInputSchema.optional(),
  orderBy: z.union([ organizationOrderByWithRelationInputSchema.array(),organizationOrderByWithRelationInputSchema ]).optional(),
  cursor: organizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const organizationFindManyArgsSchema: z.ZodType<Prisma.organizationFindManyArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  where: organizationWhereInputSchema.optional(),
  orderBy: z.union([ organizationOrderByWithRelationInputSchema.array(),organizationOrderByWithRelationInputSchema ]).optional(),
  cursor: organizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ OrganizationScalarFieldEnumSchema,OrganizationScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const organizationAggregateArgsSchema: z.ZodType<Prisma.organizationAggregateArgs> = z.object({
  where: organizationWhereInputSchema.optional(),
  orderBy: z.union([ organizationOrderByWithRelationInputSchema.array(),organizationOrderByWithRelationInputSchema ]).optional(),
  cursor: organizationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const organizationGroupByArgsSchema: z.ZodType<Prisma.organizationGroupByArgs> = z.object({
  where: organizationWhereInputSchema.optional(),
  orderBy: z.union([ organizationOrderByWithAggregationInputSchema.array(),organizationOrderByWithAggregationInputSchema ]).optional(),
  by: OrganizationScalarFieldEnumSchema.array(),
  having: organizationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const organizationFindUniqueArgsSchema: z.ZodType<Prisma.organizationFindUniqueArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  where: organizationWhereUniqueInputSchema,
}).strict()

export const organizationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.organizationFindUniqueOrThrowArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  where: organizationWhereUniqueInputSchema,
}).strict()

export const users_terminalsFindFirstArgsSchema: z.ZodType<Prisma.users_terminalsFindFirstArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  where: users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ users_terminalsOrderByWithRelationInputSchema.array(),users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_terminalsScalarFieldEnumSchema,Users_terminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_terminalsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.users_terminalsFindFirstOrThrowArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  where: users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ users_terminalsOrderByWithRelationInputSchema.array(),users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_terminalsScalarFieldEnumSchema,Users_terminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_terminalsFindManyArgsSchema: z.ZodType<Prisma.users_terminalsFindManyArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  where: users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ users_terminalsOrderByWithRelationInputSchema.array(),users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_terminalsScalarFieldEnumSchema,Users_terminalsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_terminalsAggregateArgsSchema: z.ZodType<Prisma.users_terminalsAggregateArgs> = z.object({
  where: users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ users_terminalsOrderByWithRelationInputSchema.array(),users_terminalsOrderByWithRelationInputSchema ]).optional(),
  cursor: users_terminalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_terminalsGroupByArgsSchema: z.ZodType<Prisma.users_terminalsGroupByArgs> = z.object({
  where: users_terminalsWhereInputSchema.optional(),
  orderBy: z.union([ users_terminalsOrderByWithAggregationInputSchema.array(),users_terminalsOrderByWithAggregationInputSchema ]).optional(),
  by: Users_terminalsScalarFieldEnumSchema.array(),
  having: users_terminalsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_terminalsFindUniqueArgsSchema: z.ZodType<Prisma.users_terminalsFindUniqueArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  where: users_terminalsWhereUniqueInputSchema,
}).strict()

export const users_terminalsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.users_terminalsFindUniqueOrThrowArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  where: users_terminalsWhereUniqueInputSchema,
}).strict()

export const users_work_schedulesFindFirstArgsSchema: z.ZodType<Prisma.users_work_schedulesFindFirstArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  where: users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ users_work_schedulesOrderByWithRelationInputSchema.array(),users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_work_schedulesScalarFieldEnumSchema,Users_work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_work_schedulesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.users_work_schedulesFindFirstOrThrowArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  where: users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ users_work_schedulesOrderByWithRelationInputSchema.array(),users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_work_schedulesScalarFieldEnumSchema,Users_work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_work_schedulesFindManyArgsSchema: z.ZodType<Prisma.users_work_schedulesFindManyArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  where: users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ users_work_schedulesOrderByWithRelationInputSchema.array(),users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Users_work_schedulesScalarFieldEnumSchema,Users_work_schedulesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const users_work_schedulesAggregateArgsSchema: z.ZodType<Prisma.users_work_schedulesAggregateArgs> = z.object({
  where: users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ users_work_schedulesOrderByWithRelationInputSchema.array(),users_work_schedulesOrderByWithRelationInputSchema ]).optional(),
  cursor: users_work_schedulesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_work_schedulesGroupByArgsSchema: z.ZodType<Prisma.users_work_schedulesGroupByArgs> = z.object({
  where: users_work_schedulesWhereInputSchema.optional(),
  orderBy: z.union([ users_work_schedulesOrderByWithAggregationInputSchema.array(),users_work_schedulesOrderByWithAggregationInputSchema ]).optional(),
  by: Users_work_schedulesScalarFieldEnumSchema.array(),
  having: users_work_schedulesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const users_work_schedulesFindUniqueArgsSchema: z.ZodType<Prisma.users_work_schedulesFindUniqueArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  where: users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const users_work_schedulesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.users_work_schedulesFindUniqueOrThrowArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  where: users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const work_schedule_entriesFindFirstArgsSchema: z.ZodType<Prisma.work_schedule_entriesFindFirstArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  where: work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedule_entriesOrderByWithRelationInputSchema.array(),work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedule_entriesScalarFieldEnumSchema,Work_schedule_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const work_schedule_entriesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.work_schedule_entriesFindFirstOrThrowArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  where: work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedule_entriesOrderByWithRelationInputSchema.array(),work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedule_entriesScalarFieldEnumSchema,Work_schedule_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const work_schedule_entriesFindManyArgsSchema: z.ZodType<Prisma.work_schedule_entriesFindManyArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  where: work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedule_entriesOrderByWithRelationInputSchema.array(),work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Work_schedule_entriesScalarFieldEnumSchema,Work_schedule_entriesScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const work_schedule_entriesAggregateArgsSchema: z.ZodType<Prisma.work_schedule_entriesAggregateArgs> = z.object({
  where: work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedule_entriesOrderByWithRelationInputSchema.array(),work_schedule_entriesOrderByWithRelationInputSchema ]).optional(),
  cursor: work_schedule_entriesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const work_schedule_entriesGroupByArgsSchema: z.ZodType<Prisma.work_schedule_entriesGroupByArgs> = z.object({
  where: work_schedule_entriesWhereInputSchema.optional(),
  orderBy: z.union([ work_schedule_entriesOrderByWithAggregationInputSchema.array(),work_schedule_entriesOrderByWithAggregationInputSchema ]).optional(),
  by: Work_schedule_entriesScalarFieldEnumSchema.array(),
  having: work_schedule_entriesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const work_schedule_entriesFindUniqueArgsSchema: z.ZodType<Prisma.work_schedule_entriesFindUniqueArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  where: work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const work_schedule_entriesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.work_schedule_entriesFindUniqueOrThrowArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  where: work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const api_tokensFindFirstArgsSchema: z.ZodType<Prisma.api_tokensFindFirstArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  where: api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ api_tokensOrderByWithRelationInputSchema.array(),api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Api_tokensScalarFieldEnumSchema,Api_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const api_tokensFindFirstOrThrowArgsSchema: z.ZodType<Prisma.api_tokensFindFirstOrThrowArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  where: api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ api_tokensOrderByWithRelationInputSchema.array(),api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Api_tokensScalarFieldEnumSchema,Api_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const api_tokensFindManyArgsSchema: z.ZodType<Prisma.api_tokensFindManyArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  where: api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ api_tokensOrderByWithRelationInputSchema.array(),api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Api_tokensScalarFieldEnumSchema,Api_tokensScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const api_tokensAggregateArgsSchema: z.ZodType<Prisma.api_tokensAggregateArgs> = z.object({
  where: api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ api_tokensOrderByWithRelationInputSchema.array(),api_tokensOrderByWithRelationInputSchema ]).optional(),
  cursor: api_tokensWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const api_tokensGroupByArgsSchema: z.ZodType<Prisma.api_tokensGroupByArgs> = z.object({
  where: api_tokensWhereInputSchema.optional(),
  orderBy: z.union([ api_tokensOrderByWithAggregationInputSchema.array(),api_tokensOrderByWithAggregationInputSchema ]).optional(),
  by: Api_tokensScalarFieldEnumSchema.array(),
  having: api_tokensScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const api_tokensFindUniqueArgsSchema: z.ZodType<Prisma.api_tokensFindUniqueArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  where: api_tokensWhereUniqueInputSchema,
}).strict()

export const api_tokensFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.api_tokensFindUniqueOrThrowArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  where: api_tokensWhereUniqueInputSchema,
}).strict()

export const timesheetFindFirstArgsSchema: z.ZodType<Prisma.timesheetFindFirstArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  where: timesheetWhereInputSchema.optional(),
  orderBy: z.union([ timesheetOrderByWithRelationInputSchema.array(),timesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: timesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimesheetScalarFieldEnumSchema,TimesheetScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const timesheetFindFirstOrThrowArgsSchema: z.ZodType<Prisma.timesheetFindFirstOrThrowArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  where: timesheetWhereInputSchema.optional(),
  orderBy: z.union([ timesheetOrderByWithRelationInputSchema.array(),timesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: timesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimesheetScalarFieldEnumSchema,TimesheetScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const timesheetFindManyArgsSchema: z.ZodType<Prisma.timesheetFindManyArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  where: timesheetWhereInputSchema.optional(),
  orderBy: z.union([ timesheetOrderByWithRelationInputSchema.array(),timesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: timesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ TimesheetScalarFieldEnumSchema,TimesheetScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const timesheetAggregateArgsSchema: z.ZodType<Prisma.timesheetAggregateArgs> = z.object({
  where: timesheetWhereInputSchema.optional(),
  orderBy: z.union([ timesheetOrderByWithRelationInputSchema.array(),timesheetOrderByWithRelationInputSchema ]).optional(),
  cursor: timesheetWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const timesheetGroupByArgsSchema: z.ZodType<Prisma.timesheetGroupByArgs> = z.object({
  where: timesheetWhereInputSchema.optional(),
  orderBy: z.union([ timesheetOrderByWithAggregationInputSchema.array(),timesheetOrderByWithAggregationInputSchema ]).optional(),
  by: TimesheetScalarFieldEnumSchema.array(),
  having: timesheetScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const timesheetFindUniqueArgsSchema: z.ZodType<Prisma.timesheetFindUniqueArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  where: timesheetWhereUniqueInputSchema,
}).strict()

export const timesheetFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.timesheetFindUniqueOrThrowArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  where: timesheetWhereUniqueInputSchema,
}).strict()

export const scheduled_reportsFindFirstArgsSchema: z.ZodType<Prisma.scheduled_reportsFindFirstArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  where: scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reportsOrderByWithRelationInputSchema.array(),scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reportsScalarFieldEnumSchema,Scheduled_reportsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const scheduled_reportsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.scheduled_reportsFindFirstOrThrowArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  where: scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reportsOrderByWithRelationInputSchema.array(),scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reportsScalarFieldEnumSchema,Scheduled_reportsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const scheduled_reportsFindManyArgsSchema: z.ZodType<Prisma.scheduled_reportsFindManyArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  where: scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reportsOrderByWithRelationInputSchema.array(),scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reportsScalarFieldEnumSchema,Scheduled_reportsScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const scheduled_reportsAggregateArgsSchema: z.ZodType<Prisma.scheduled_reportsAggregateArgs> = z.object({
  where: scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reportsOrderByWithRelationInputSchema.array(),scheduled_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const scheduled_reportsGroupByArgsSchema: z.ZodType<Prisma.scheduled_reportsGroupByArgs> = z.object({
  where: scheduled_reportsWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reportsOrderByWithAggregationInputSchema.array(),scheduled_reportsOrderByWithAggregationInputSchema ]).optional(),
  by: Scheduled_reportsScalarFieldEnumSchema.array(),
  having: scheduled_reportsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const scheduled_reportsFindUniqueArgsSchema: z.ZodType<Prisma.scheduled_reportsFindUniqueArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  where: scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const scheduled_reportsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.scheduled_reportsFindUniqueOrThrowArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  where: scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const scheduled_reports_subscriptionFindFirstArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionFindFirstArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  where: scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reports_subscriptionScalarFieldEnumSchema,Scheduled_reports_subscriptionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const scheduled_reports_subscriptionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionFindFirstOrThrowArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  where: scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reports_subscriptionScalarFieldEnumSchema,Scheduled_reports_subscriptionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const scheduled_reports_subscriptionFindManyArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionFindManyArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  where: scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ Scheduled_reports_subscriptionScalarFieldEnumSchema,Scheduled_reports_subscriptionScalarFieldEnumSchema.array() ]).optional(),
}).strict()

export const scheduled_reports_subscriptionAggregateArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionAggregateArgs> = z.object({
  where: scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reports_subscriptionOrderByWithRelationInputSchema.array(),scheduled_reports_subscriptionOrderByWithRelationInputSchema ]).optional(),
  cursor: scheduled_reports_subscriptionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const scheduled_reports_subscriptionGroupByArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionGroupByArgs> = z.object({
  where: scheduled_reports_subscriptionWhereInputSchema.optional(),
  orderBy: z.union([ scheduled_reports_subscriptionOrderByWithAggregationInputSchema.array(),scheduled_reports_subscriptionOrderByWithAggregationInputSchema ]).optional(),
  by: Scheduled_reports_subscriptionScalarFieldEnumSchema.array(),
  having: scheduled_reports_subscriptionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict()

export const scheduled_reports_subscriptionFindUniqueArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionFindUniqueArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  where: scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const scheduled_reports_subscriptionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionFindUniqueOrThrowArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  where: scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const permissionsCreateArgsSchema: z.ZodType<Prisma.permissionsCreateArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  data: z.union([ permissionsCreateInputSchema,permissionsUncheckedCreateInputSchema ]),
}).strict()

export const permissionsUpsertArgsSchema: z.ZodType<Prisma.permissionsUpsertArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  where: permissionsWhereUniqueInputSchema,
  create: z.union([ permissionsCreateInputSchema,permissionsUncheckedCreateInputSchema ]),
  update: z.union([ permissionsUpdateInputSchema,permissionsUncheckedUpdateInputSchema ]),
}).strict()

export const permissionsCreateManyArgsSchema: z.ZodType<Prisma.permissionsCreateManyArgs> = z.object({
  data: z.union([ permissionsCreateManyInputSchema,permissionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const permissionsDeleteArgsSchema: z.ZodType<Prisma.permissionsDeleteArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  where: permissionsWhereUniqueInputSchema,
}).strict()

export const permissionsUpdateArgsSchema: z.ZodType<Prisma.permissionsUpdateArgs> = z.object({
  select: permissionsSelectSchema.optional(),
  include: permissionsIncludeSchema.optional(),
  data: z.union([ permissionsUpdateInputSchema,permissionsUncheckedUpdateInputSchema ]),
  where: permissionsWhereUniqueInputSchema,
}).strict()

export const permissionsUpdateManyArgsSchema: z.ZodType<Prisma.permissionsUpdateManyArgs> = z.object({
  data: z.union([ permissionsUpdateManyMutationInputSchema,permissionsUncheckedUpdateManyInputSchema ]),
  where: permissionsWhereInputSchema.optional(),
}).strict()

export const permissionsDeleteManyArgsSchema: z.ZodType<Prisma.permissionsDeleteManyArgs> = z.object({
  where: permissionsWhereInputSchema.optional(),
}).strict()

export const rolesCreateArgsSchema: z.ZodType<Prisma.rolesCreateArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  data: z.union([ rolesCreateInputSchema,rolesUncheckedCreateInputSchema ]),
}).strict()

export const rolesUpsertArgsSchema: z.ZodType<Prisma.rolesUpsertArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  where: rolesWhereUniqueInputSchema,
  create: z.union([ rolesCreateInputSchema,rolesUncheckedCreateInputSchema ]),
  update: z.union([ rolesUpdateInputSchema,rolesUncheckedUpdateInputSchema ]),
}).strict()

export const rolesCreateManyArgsSchema: z.ZodType<Prisma.rolesCreateManyArgs> = z.object({
  data: z.union([ rolesCreateManyInputSchema,rolesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const rolesDeleteArgsSchema: z.ZodType<Prisma.rolesDeleteArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  where: rolesWhereUniqueInputSchema,
}).strict()

export const rolesUpdateArgsSchema: z.ZodType<Prisma.rolesUpdateArgs> = z.object({
  select: rolesSelectSchema.optional(),
  include: rolesIncludeSchema.optional(),
  data: z.union([ rolesUpdateInputSchema,rolesUncheckedUpdateInputSchema ]),
  where: rolesWhereUniqueInputSchema,
}).strict()

export const rolesUpdateManyArgsSchema: z.ZodType<Prisma.rolesUpdateManyArgs> = z.object({
  data: z.union([ rolesUpdateManyMutationInputSchema,rolesUncheckedUpdateManyInputSchema ]),
  where: rolesWhereInputSchema.optional(),
}).strict()

export const rolesDeleteManyArgsSchema: z.ZodType<Prisma.rolesDeleteManyArgs> = z.object({
  where: rolesWhereInputSchema.optional(),
}).strict()

export const roles_permissionsCreateArgsSchema: z.ZodType<Prisma.roles_permissionsCreateArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  data: z.union([ roles_permissionsCreateInputSchema,roles_permissionsUncheckedCreateInputSchema ]),
}).strict()

export const roles_permissionsUpsertArgsSchema: z.ZodType<Prisma.roles_permissionsUpsertArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  where: roles_permissionsWhereUniqueInputSchema,
  create: z.union([ roles_permissionsCreateInputSchema,roles_permissionsUncheckedCreateInputSchema ]),
  update: z.union([ roles_permissionsUpdateInputSchema,roles_permissionsUncheckedUpdateInputSchema ]),
}).strict()

export const roles_permissionsCreateManyArgsSchema: z.ZodType<Prisma.roles_permissionsCreateManyArgs> = z.object({
  data: z.union([ roles_permissionsCreateManyInputSchema,roles_permissionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const roles_permissionsDeleteArgsSchema: z.ZodType<Prisma.roles_permissionsDeleteArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  where: roles_permissionsWhereUniqueInputSchema,
}).strict()

export const roles_permissionsUpdateArgsSchema: z.ZodType<Prisma.roles_permissionsUpdateArgs> = z.object({
  select: roles_permissionsSelectSchema.optional(),
  include: roles_permissionsIncludeSchema.optional(),
  data: z.union([ roles_permissionsUpdateInputSchema,roles_permissionsUncheckedUpdateInputSchema ]),
  where: roles_permissionsWhereUniqueInputSchema,
}).strict()

export const roles_permissionsUpdateManyArgsSchema: z.ZodType<Prisma.roles_permissionsUpdateManyArgs> = z.object({
  data: z.union([ roles_permissionsUpdateManyMutationInputSchema,roles_permissionsUncheckedUpdateManyInputSchema ]),
  where: roles_permissionsWhereInputSchema.optional(),
}).strict()

export const roles_permissionsDeleteManyArgsSchema: z.ZodType<Prisma.roles_permissionsDeleteManyArgs> = z.object({
  where: roles_permissionsWhereInputSchema.optional(),
}).strict()

export const usersCreateArgsSchema: z.ZodType<Prisma.usersCreateArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  data: z.union([ usersCreateInputSchema,usersUncheckedCreateInputSchema ]),
}).strict()

export const usersUpsertArgsSchema: z.ZodType<Prisma.usersUpsertArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
  create: z.union([ usersCreateInputSchema,usersUncheckedCreateInputSchema ]),
  update: z.union([ usersUpdateInputSchema,usersUncheckedUpdateInputSchema ]),
}).strict()

export const usersCreateManyArgsSchema: z.ZodType<Prisma.usersCreateManyArgs> = z.object({
  data: z.union([ usersCreateManyInputSchema,usersCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const usersDeleteArgsSchema: z.ZodType<Prisma.usersDeleteArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  where: usersWhereUniqueInputSchema,
}).strict()

export const usersUpdateArgsSchema: z.ZodType<Prisma.usersUpdateArgs> = z.object({
  select: usersSelectSchema.optional(),
  include: usersIncludeSchema.optional(),
  data: z.union([ usersUpdateInputSchema,usersUncheckedUpdateInputSchema ]),
  where: usersWhereUniqueInputSchema,
}).strict()

export const usersUpdateManyArgsSchema: z.ZodType<Prisma.usersUpdateManyArgs> = z.object({
  data: z.union([ usersUpdateManyMutationInputSchema,usersUncheckedUpdateManyInputSchema ]),
  where: usersWhereInputSchema.optional(),
}).strict()

export const usersDeleteManyArgsSchema: z.ZodType<Prisma.usersDeleteManyArgs> = z.object({
  where: usersWhereInputSchema.optional(),
}).strict()

export const users_permissionsCreateArgsSchema: z.ZodType<Prisma.users_permissionsCreateArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  data: z.union([ users_permissionsCreateInputSchema,users_permissionsUncheckedCreateInputSchema ]),
}).strict()

export const users_permissionsUpsertArgsSchema: z.ZodType<Prisma.users_permissionsUpsertArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  where: users_permissionsWhereUniqueInputSchema,
  create: z.union([ users_permissionsCreateInputSchema,users_permissionsUncheckedCreateInputSchema ]),
  update: z.union([ users_permissionsUpdateInputSchema,users_permissionsUncheckedUpdateInputSchema ]),
}).strict()

export const users_permissionsCreateManyArgsSchema: z.ZodType<Prisma.users_permissionsCreateManyArgs> = z.object({
  data: z.union([ users_permissionsCreateManyInputSchema,users_permissionsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const users_permissionsDeleteArgsSchema: z.ZodType<Prisma.users_permissionsDeleteArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  where: users_permissionsWhereUniqueInputSchema,
}).strict()

export const users_permissionsUpdateArgsSchema: z.ZodType<Prisma.users_permissionsUpdateArgs> = z.object({
  select: users_permissionsSelectSchema.optional(),
  include: users_permissionsIncludeSchema.optional(),
  data: z.union([ users_permissionsUpdateInputSchema,users_permissionsUncheckedUpdateInputSchema ]),
  where: users_permissionsWhereUniqueInputSchema,
}).strict()

export const users_permissionsUpdateManyArgsSchema: z.ZodType<Prisma.users_permissionsUpdateManyArgs> = z.object({
  data: z.union([ users_permissionsUpdateManyMutationInputSchema,users_permissionsUncheckedUpdateManyInputSchema ]),
  where: users_permissionsWhereInputSchema.optional(),
}).strict()

export const users_permissionsDeleteManyArgsSchema: z.ZodType<Prisma.users_permissionsDeleteManyArgs> = z.object({
  where: users_permissionsWhereInputSchema.optional(),
}).strict()

export const users_rolesCreateArgsSchema: z.ZodType<Prisma.users_rolesCreateArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  data: z.union([ users_rolesCreateInputSchema,users_rolesUncheckedCreateInputSchema ]),
}).strict()

export const users_rolesUpsertArgsSchema: z.ZodType<Prisma.users_rolesUpsertArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  where: users_rolesWhereUniqueInputSchema,
  create: z.union([ users_rolesCreateInputSchema,users_rolesUncheckedCreateInputSchema ]),
  update: z.union([ users_rolesUpdateInputSchema,users_rolesUncheckedUpdateInputSchema ]),
}).strict()

export const users_rolesCreateManyArgsSchema: z.ZodType<Prisma.users_rolesCreateManyArgs> = z.object({
  data: z.union([ users_rolesCreateManyInputSchema,users_rolesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const users_rolesDeleteArgsSchema: z.ZodType<Prisma.users_rolesDeleteArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  where: users_rolesWhereUniqueInputSchema,
}).strict()

export const users_rolesUpdateArgsSchema: z.ZodType<Prisma.users_rolesUpdateArgs> = z.object({
  select: users_rolesSelectSchema.optional(),
  include: users_rolesIncludeSchema.optional(),
  data: z.union([ users_rolesUpdateInputSchema,users_rolesUncheckedUpdateInputSchema ]),
  where: users_rolesWhereUniqueInputSchema,
}).strict()

export const users_rolesUpdateManyArgsSchema: z.ZodType<Prisma.users_rolesUpdateManyArgs> = z.object({
  data: z.union([ users_rolesUpdateManyMutationInputSchema,users_rolesUncheckedUpdateManyInputSchema ]),
  where: users_rolesWhereInputSchema.optional(),
}).strict()

export const users_rolesDeleteManyArgsSchema: z.ZodType<Prisma.users_rolesDeleteManyArgs> = z.object({
  where: users_rolesWhereInputSchema.optional(),
}).strict()

export const work_schedulesCreateArgsSchema: z.ZodType<Prisma.work_schedulesCreateArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  data: z.union([ work_schedulesCreateInputSchema,work_schedulesUncheckedCreateInputSchema ]),
}).strict()

export const work_schedulesUpsertArgsSchema: z.ZodType<Prisma.work_schedulesUpsertArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  where: work_schedulesWhereUniqueInputSchema,
  create: z.union([ work_schedulesCreateInputSchema,work_schedulesUncheckedCreateInputSchema ]),
  update: z.union([ work_schedulesUpdateInputSchema,work_schedulesUncheckedUpdateInputSchema ]),
}).strict()

export const work_schedulesCreateManyArgsSchema: z.ZodType<Prisma.work_schedulesCreateManyArgs> = z.object({
  data: z.union([ work_schedulesCreateManyInputSchema,work_schedulesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const work_schedulesDeleteArgsSchema: z.ZodType<Prisma.work_schedulesDeleteArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  where: work_schedulesWhereUniqueInputSchema,
}).strict()

export const work_schedulesUpdateArgsSchema: z.ZodType<Prisma.work_schedulesUpdateArgs> = z.object({
  select: work_schedulesSelectSchema.optional(),
  include: work_schedulesIncludeSchema.optional(),
  data: z.union([ work_schedulesUpdateInputSchema,work_schedulesUncheckedUpdateInputSchema ]),
  where: work_schedulesWhereUniqueInputSchema,
}).strict()

export const work_schedulesUpdateManyArgsSchema: z.ZodType<Prisma.work_schedulesUpdateManyArgs> = z.object({
  data: z.union([ work_schedulesUpdateManyMutationInputSchema,work_schedulesUncheckedUpdateManyInputSchema ]),
  where: work_schedulesWhereInputSchema.optional(),
}).strict()

export const work_schedulesDeleteManyArgsSchema: z.ZodType<Prisma.work_schedulesDeleteManyArgs> = z.object({
  where: work_schedulesWhereInputSchema.optional(),
}).strict()

export const terminalsCreateArgsSchema: z.ZodType<Prisma.terminalsCreateArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  data: z.union([ terminalsCreateInputSchema,terminalsUncheckedCreateInputSchema ]),
}).strict()

export const terminalsUpsertArgsSchema: z.ZodType<Prisma.terminalsUpsertArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  where: terminalsWhereUniqueInputSchema,
  create: z.union([ terminalsCreateInputSchema,terminalsUncheckedCreateInputSchema ]),
  update: z.union([ terminalsUpdateInputSchema,terminalsUncheckedUpdateInputSchema ]),
}).strict()

export const terminalsCreateManyArgsSchema: z.ZodType<Prisma.terminalsCreateManyArgs> = z.object({
  data: z.union([ terminalsCreateManyInputSchema,terminalsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const terminalsDeleteArgsSchema: z.ZodType<Prisma.terminalsDeleteArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  where: terminalsWhereUniqueInputSchema,
}).strict()

export const terminalsUpdateArgsSchema: z.ZodType<Prisma.terminalsUpdateArgs> = z.object({
  select: terminalsSelectSchema.optional(),
  include: terminalsIncludeSchema.optional(),
  data: z.union([ terminalsUpdateInputSchema,terminalsUncheckedUpdateInputSchema ]),
  where: terminalsWhereUniqueInputSchema,
}).strict()

export const terminalsUpdateManyArgsSchema: z.ZodType<Prisma.terminalsUpdateManyArgs> = z.object({
  data: z.union([ terminalsUpdateManyMutationInputSchema,terminalsUncheckedUpdateManyInputSchema ]),
  where: terminalsWhereInputSchema.optional(),
}).strict()

export const terminalsDeleteManyArgsSchema: z.ZodType<Prisma.terminalsDeleteManyArgs> = z.object({
  where: terminalsWhereInputSchema.optional(),
}).strict()

export const organizationCreateArgsSchema: z.ZodType<Prisma.organizationCreateArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  data: z.union([ organizationCreateInputSchema,organizationUncheckedCreateInputSchema ]),
}).strict()

export const organizationUpsertArgsSchema: z.ZodType<Prisma.organizationUpsertArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  where: organizationWhereUniqueInputSchema,
  create: z.union([ organizationCreateInputSchema,organizationUncheckedCreateInputSchema ]),
  update: z.union([ organizationUpdateInputSchema,organizationUncheckedUpdateInputSchema ]),
}).strict()

export const organizationCreateManyArgsSchema: z.ZodType<Prisma.organizationCreateManyArgs> = z.object({
  data: z.union([ organizationCreateManyInputSchema,organizationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const organizationDeleteArgsSchema: z.ZodType<Prisma.organizationDeleteArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  where: organizationWhereUniqueInputSchema,
}).strict()

export const organizationUpdateArgsSchema: z.ZodType<Prisma.organizationUpdateArgs> = z.object({
  select: organizationSelectSchema.optional(),
  include: organizationIncludeSchema.optional(),
  data: z.union([ organizationUpdateInputSchema,organizationUncheckedUpdateInputSchema ]),
  where: organizationWhereUniqueInputSchema,
}).strict()

export const organizationUpdateManyArgsSchema: z.ZodType<Prisma.organizationUpdateManyArgs> = z.object({
  data: z.union([ organizationUpdateManyMutationInputSchema,organizationUncheckedUpdateManyInputSchema ]),
  where: organizationWhereInputSchema.optional(),
}).strict()

export const organizationDeleteManyArgsSchema: z.ZodType<Prisma.organizationDeleteManyArgs> = z.object({
  where: organizationWhereInputSchema.optional(),
}).strict()

export const users_terminalsCreateArgsSchema: z.ZodType<Prisma.users_terminalsCreateArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  data: z.union([ users_terminalsCreateInputSchema,users_terminalsUncheckedCreateInputSchema ]),
}).strict()

export const users_terminalsUpsertArgsSchema: z.ZodType<Prisma.users_terminalsUpsertArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  where: users_terminalsWhereUniqueInputSchema,
  create: z.union([ users_terminalsCreateInputSchema,users_terminalsUncheckedCreateInputSchema ]),
  update: z.union([ users_terminalsUpdateInputSchema,users_terminalsUncheckedUpdateInputSchema ]),
}).strict()

export const users_terminalsCreateManyArgsSchema: z.ZodType<Prisma.users_terminalsCreateManyArgs> = z.object({
  data: z.union([ users_terminalsCreateManyInputSchema,users_terminalsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const users_terminalsDeleteArgsSchema: z.ZodType<Prisma.users_terminalsDeleteArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  where: users_terminalsWhereUniqueInputSchema,
}).strict()

export const users_terminalsUpdateArgsSchema: z.ZodType<Prisma.users_terminalsUpdateArgs> = z.object({
  select: users_terminalsSelectSchema.optional(),
  include: users_terminalsIncludeSchema.optional(),
  data: z.union([ users_terminalsUpdateInputSchema,users_terminalsUncheckedUpdateInputSchema ]),
  where: users_terminalsWhereUniqueInputSchema,
}).strict()

export const users_terminalsUpdateManyArgsSchema: z.ZodType<Prisma.users_terminalsUpdateManyArgs> = z.object({
  data: z.union([ users_terminalsUpdateManyMutationInputSchema,users_terminalsUncheckedUpdateManyInputSchema ]),
  where: users_terminalsWhereInputSchema.optional(),
}).strict()

export const users_terminalsDeleteManyArgsSchema: z.ZodType<Prisma.users_terminalsDeleteManyArgs> = z.object({
  where: users_terminalsWhereInputSchema.optional(),
}).strict()

export const users_work_schedulesCreateArgsSchema: z.ZodType<Prisma.users_work_schedulesCreateArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  data: z.union([ users_work_schedulesCreateInputSchema,users_work_schedulesUncheckedCreateInputSchema ]),
}).strict()

export const users_work_schedulesUpsertArgsSchema: z.ZodType<Prisma.users_work_schedulesUpsertArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  where: users_work_schedulesWhereUniqueInputSchema,
  create: z.union([ users_work_schedulesCreateInputSchema,users_work_schedulesUncheckedCreateInputSchema ]),
  update: z.union([ users_work_schedulesUpdateInputSchema,users_work_schedulesUncheckedUpdateInputSchema ]),
}).strict()

export const users_work_schedulesCreateManyArgsSchema: z.ZodType<Prisma.users_work_schedulesCreateManyArgs> = z.object({
  data: z.union([ users_work_schedulesCreateManyInputSchema,users_work_schedulesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const users_work_schedulesDeleteArgsSchema: z.ZodType<Prisma.users_work_schedulesDeleteArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  where: users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const users_work_schedulesUpdateArgsSchema: z.ZodType<Prisma.users_work_schedulesUpdateArgs> = z.object({
  select: users_work_schedulesSelectSchema.optional(),
  include: users_work_schedulesIncludeSchema.optional(),
  data: z.union([ users_work_schedulesUpdateInputSchema,users_work_schedulesUncheckedUpdateInputSchema ]),
  where: users_work_schedulesWhereUniqueInputSchema,
}).strict()

export const users_work_schedulesUpdateManyArgsSchema: z.ZodType<Prisma.users_work_schedulesUpdateManyArgs> = z.object({
  data: z.union([ users_work_schedulesUpdateManyMutationInputSchema,users_work_schedulesUncheckedUpdateManyInputSchema ]),
  where: users_work_schedulesWhereInputSchema.optional(),
}).strict()

export const users_work_schedulesDeleteManyArgsSchema: z.ZodType<Prisma.users_work_schedulesDeleteManyArgs> = z.object({
  where: users_work_schedulesWhereInputSchema.optional(),
}).strict()

export const work_schedule_entriesCreateArgsSchema: z.ZodType<Prisma.work_schedule_entriesCreateArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  data: z.union([ work_schedule_entriesCreateInputSchema,work_schedule_entriesUncheckedCreateInputSchema ]),
}).strict()

export const work_schedule_entriesUpsertArgsSchema: z.ZodType<Prisma.work_schedule_entriesUpsertArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  where: work_schedule_entriesWhereUniqueInputSchema,
  create: z.union([ work_schedule_entriesCreateInputSchema,work_schedule_entriesUncheckedCreateInputSchema ]),
  update: z.union([ work_schedule_entriesUpdateInputSchema,work_schedule_entriesUncheckedUpdateInputSchema ]),
}).strict()

export const work_schedule_entriesCreateManyArgsSchema: z.ZodType<Prisma.work_schedule_entriesCreateManyArgs> = z.object({
  data: z.union([ work_schedule_entriesCreateManyInputSchema,work_schedule_entriesCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const work_schedule_entriesDeleteArgsSchema: z.ZodType<Prisma.work_schedule_entriesDeleteArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  where: work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const work_schedule_entriesUpdateArgsSchema: z.ZodType<Prisma.work_schedule_entriesUpdateArgs> = z.object({
  select: work_schedule_entriesSelectSchema.optional(),
  include: work_schedule_entriesIncludeSchema.optional(),
  data: z.union([ work_schedule_entriesUpdateInputSchema,work_schedule_entriesUncheckedUpdateInputSchema ]),
  where: work_schedule_entriesWhereUniqueInputSchema,
}).strict()

export const work_schedule_entriesUpdateManyArgsSchema: z.ZodType<Prisma.work_schedule_entriesUpdateManyArgs> = z.object({
  data: z.union([ work_schedule_entriesUpdateManyMutationInputSchema,work_schedule_entriesUncheckedUpdateManyInputSchema ]),
  where: work_schedule_entriesWhereInputSchema.optional(),
}).strict()

export const work_schedule_entriesDeleteManyArgsSchema: z.ZodType<Prisma.work_schedule_entriesDeleteManyArgs> = z.object({
  where: work_schedule_entriesWhereInputSchema.optional(),
}).strict()

export const api_tokensCreateArgsSchema: z.ZodType<Prisma.api_tokensCreateArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  data: z.union([ api_tokensCreateInputSchema,api_tokensUncheckedCreateInputSchema ]),
}).strict()

export const api_tokensUpsertArgsSchema: z.ZodType<Prisma.api_tokensUpsertArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  where: api_tokensWhereUniqueInputSchema,
  create: z.union([ api_tokensCreateInputSchema,api_tokensUncheckedCreateInputSchema ]),
  update: z.union([ api_tokensUpdateInputSchema,api_tokensUncheckedUpdateInputSchema ]),
}).strict()

export const api_tokensCreateManyArgsSchema: z.ZodType<Prisma.api_tokensCreateManyArgs> = z.object({
  data: z.union([ api_tokensCreateManyInputSchema,api_tokensCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const api_tokensDeleteArgsSchema: z.ZodType<Prisma.api_tokensDeleteArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  where: api_tokensWhereUniqueInputSchema,
}).strict()

export const api_tokensUpdateArgsSchema: z.ZodType<Prisma.api_tokensUpdateArgs> = z.object({
  select: api_tokensSelectSchema.optional(),
  include: api_tokensIncludeSchema.optional(),
  data: z.union([ api_tokensUpdateInputSchema,api_tokensUncheckedUpdateInputSchema ]),
  where: api_tokensWhereUniqueInputSchema,
}).strict()

export const api_tokensUpdateManyArgsSchema: z.ZodType<Prisma.api_tokensUpdateManyArgs> = z.object({
  data: z.union([ api_tokensUpdateManyMutationInputSchema,api_tokensUncheckedUpdateManyInputSchema ]),
  where: api_tokensWhereInputSchema.optional(),
}).strict()

export const api_tokensDeleteManyArgsSchema: z.ZodType<Prisma.api_tokensDeleteManyArgs> = z.object({
  where: api_tokensWhereInputSchema.optional(),
}).strict()

export const timesheetCreateArgsSchema: z.ZodType<Prisma.timesheetCreateArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  data: z.union([ timesheetCreateInputSchema,timesheetUncheckedCreateInputSchema ]),
}).strict()

export const timesheetUpsertArgsSchema: z.ZodType<Prisma.timesheetUpsertArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  where: timesheetWhereUniqueInputSchema,
  create: z.union([ timesheetCreateInputSchema,timesheetUncheckedCreateInputSchema ]),
  update: z.union([ timesheetUpdateInputSchema,timesheetUncheckedUpdateInputSchema ]),
}).strict()

export const timesheetCreateManyArgsSchema: z.ZodType<Prisma.timesheetCreateManyArgs> = z.object({
  data: z.union([ timesheetCreateManyInputSchema,timesheetCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const timesheetDeleteArgsSchema: z.ZodType<Prisma.timesheetDeleteArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  where: timesheetWhereUniqueInputSchema,
}).strict()

export const timesheetUpdateArgsSchema: z.ZodType<Prisma.timesheetUpdateArgs> = z.object({
  select: timesheetSelectSchema.optional(),
  include: timesheetIncludeSchema.optional(),
  data: z.union([ timesheetUpdateInputSchema,timesheetUncheckedUpdateInputSchema ]),
  where: timesheetWhereUniqueInputSchema,
}).strict()

export const timesheetUpdateManyArgsSchema: z.ZodType<Prisma.timesheetUpdateManyArgs> = z.object({
  data: z.union([ timesheetUpdateManyMutationInputSchema,timesheetUncheckedUpdateManyInputSchema ]),
  where: timesheetWhereInputSchema.optional(),
}).strict()

export const timesheetDeleteManyArgsSchema: z.ZodType<Prisma.timesheetDeleteManyArgs> = z.object({
  where: timesheetWhereInputSchema.optional(),
}).strict()

export const scheduled_reportsCreateArgsSchema: z.ZodType<Prisma.scheduled_reportsCreateArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  data: z.union([ scheduled_reportsCreateInputSchema,scheduled_reportsUncheckedCreateInputSchema ]),
}).strict()

export const scheduled_reportsUpsertArgsSchema: z.ZodType<Prisma.scheduled_reportsUpsertArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  where: scheduled_reportsWhereUniqueInputSchema,
  create: z.union([ scheduled_reportsCreateInputSchema,scheduled_reportsUncheckedCreateInputSchema ]),
  update: z.union([ scheduled_reportsUpdateInputSchema,scheduled_reportsUncheckedUpdateInputSchema ]),
}).strict()

export const scheduled_reportsCreateManyArgsSchema: z.ZodType<Prisma.scheduled_reportsCreateManyArgs> = z.object({
  data: z.union([ scheduled_reportsCreateManyInputSchema,scheduled_reportsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const scheduled_reportsDeleteArgsSchema: z.ZodType<Prisma.scheduled_reportsDeleteArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  where: scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const scheduled_reportsUpdateArgsSchema: z.ZodType<Prisma.scheduled_reportsUpdateArgs> = z.object({
  select: scheduled_reportsSelectSchema.optional(),
  include: scheduled_reportsIncludeSchema.optional(),
  data: z.union([ scheduled_reportsUpdateInputSchema,scheduled_reportsUncheckedUpdateInputSchema ]),
  where: scheduled_reportsWhereUniqueInputSchema,
}).strict()

export const scheduled_reportsUpdateManyArgsSchema: z.ZodType<Prisma.scheduled_reportsUpdateManyArgs> = z.object({
  data: z.union([ scheduled_reportsUpdateManyMutationInputSchema,scheduled_reportsUncheckedUpdateManyInputSchema ]),
  where: scheduled_reportsWhereInputSchema.optional(),
}).strict()

export const scheduled_reportsDeleteManyArgsSchema: z.ZodType<Prisma.scheduled_reportsDeleteManyArgs> = z.object({
  where: scheduled_reportsWhereInputSchema.optional(),
}).strict()

export const scheduled_reports_subscriptionCreateArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  data: z.union([ scheduled_reports_subscriptionCreateInputSchema,scheduled_reports_subscriptionUncheckedCreateInputSchema ]),
}).strict()

export const scheduled_reports_subscriptionUpsertArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpsertArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  where: scheduled_reports_subscriptionWhereUniqueInputSchema,
  create: z.union([ scheduled_reports_subscriptionCreateInputSchema,scheduled_reports_subscriptionUncheckedCreateInputSchema ]),
  update: z.union([ scheduled_reports_subscriptionUpdateInputSchema,scheduled_reports_subscriptionUncheckedUpdateInputSchema ]),
}).strict()

export const scheduled_reports_subscriptionCreateManyArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionCreateManyArgs> = z.object({
  data: z.union([ scheduled_reports_subscriptionCreateManyInputSchema,scheduled_reports_subscriptionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict()

export const scheduled_reports_subscriptionDeleteArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionDeleteArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  where: scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const scheduled_reports_subscriptionUpdateArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateArgs> = z.object({
  select: scheduled_reports_subscriptionSelectSchema.optional(),
  include: scheduled_reports_subscriptionIncludeSchema.optional(),
  data: z.union([ scheduled_reports_subscriptionUpdateInputSchema,scheduled_reports_subscriptionUncheckedUpdateInputSchema ]),
  where: scheduled_reports_subscriptionWhereUniqueInputSchema,
}).strict()

export const scheduled_reports_subscriptionUpdateManyArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionUpdateManyArgs> = z.object({
  data: z.union([ scheduled_reports_subscriptionUpdateManyMutationInputSchema,scheduled_reports_subscriptionUncheckedUpdateManyInputSchema ]),
  where: scheduled_reports_subscriptionWhereInputSchema.optional(),
}).strict()

export const scheduled_reports_subscriptionDeleteManyArgsSchema: z.ZodType<Prisma.scheduled_reports_subscriptionDeleteManyArgs> = z.object({
  where: scheduled_reports_subscriptionWhereInputSchema.optional(),
}).strict()